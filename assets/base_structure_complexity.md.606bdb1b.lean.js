import{_ as n,o as l,c as a,N as o}from"./chunks/framework.2f525601.js";const F=JSON.parse('{"title":"时间 & 空间复杂度","description":"","frontmatter":{},"headers":[],"relativePath":"base/structure/complexity.md","lastUpdated":1731052528000}'),p={name:"base/structure/complexity.md"};function e(c,s,r,t,i,d){return l(),a("div",null,s[0]||(s[0]=[o(`<h1 id="时间-空间复杂度" tabindex="-1">时间 &amp; 空间复杂度 <a class="header-anchor" href="#时间-空间复杂度" aria-label="Permalink to &quot;时间 &amp; 空间复杂度&quot;">​</a></h1><p>判断一个算法的好坏，一般从执行时间和占用空间来看，执行时间越短，占用的内存空间越小，那么它就是好的算法。对应的，我们常常用时间复杂度代表执行时间，空间复杂度代表占用的内存空间。</p><h2 id="时间复杂度" tabindex="-1">时间复杂度 <a class="header-anchor" href="#时间复杂度" aria-label="Permalink to &quot;时间复杂度&quot;">​</a></h2><p>时间复杂度用于描述算法执行所需时间与输入规模之间的关系。它通常表示为一个函数 ( <code>T(n)</code> )，其中 ( <code>n</code> ) 是输入的规模。随着<code>n</code>的不断增大，时间复杂度不断增大。</p><h3 id="常见的时间复杂度" tabindex="-1"><strong>常见的时间复杂度</strong> <a class="header-anchor" href="#常见的时间复杂度" aria-label="Permalink to &quot;**常见的时间复杂度**&quot;">​</a></h3><ul><li><p><strong>常数时间复杂度 ( <code>O(1)</code> )</strong></p><ul><li><p>执行时间不随输入规模的增加而变化。</p></li><li><p>例如：访问数组中的一个元素。</p></li></ul></li><li><p><strong>对数时间复杂度 ( <code>O(log n)</code> )</strong></p><ul><li><p>执行时间随着输入规模的增加而增加，但增加的速度减慢。</p></li><li><p>例如：二分查找。</p></li></ul></li><li><p><strong>线性时间复杂度 ( <code>O(n)</code> )</strong></p><ul><li><p>执行时间与输入规模成正比。</p></li><li><p>例如：遍历一个数组。</p></li></ul></li><li><p><strong>线性对数时间复杂度 ( <code>O(n \\log n)</code> )</strong></p><ul><li>常见于高效的排序算法，如归并排序和快速排序。</li></ul></li><li><p><strong>平方时间复杂度 ( <code>O(n^2)</code> )</strong></p><ul><li><p>执行时间与输入规模的平方成正比。</p></li><li><p>例如：嵌套循环遍历二维数组。</p></li></ul></li><li><p><strong>立方时间复杂度 ( <code>O(n^3)</code> )</strong></p><ul><li>通常出现在三重嵌套循环的算法中。</li></ul></li><li><p><strong>指数时间复杂度 ( <code>O(2^n)</code> )</strong> 和 <strong>阶乘时间复杂度 ( <code>O(n!)</code> )</strong></p><ul><li><p>执行时间随着输入规模的增加而呈指数或阶乘增长，通常被认为是效率低下的算法。</p></li><li><p>例如：解决某些组合问题的回溯算法。</p></li></ul></li></ul><h3 id="时间复杂度的计算" tabindex="-1"><strong>时间复杂度的计算</strong> <a class="header-anchor" href="#时间复杂度的计算" aria-label="Permalink to &quot;**时间复杂度的计算**&quot;">​</a></h3><p>在分析时间复杂度时，通常关注以下几点：</p><ul><li><p><strong>基本操作</strong>：算法中最频繁执行的操作。</p></li><li><p><strong>最坏情况</strong>：对时间复杂度的最严格评估，通常分析在输入的最不利情况下算法的表现。</p></li><li><p><strong>大 O 符号</strong>：用于描述算法的上界，忽略低阶项和常数系数，专注于输入规模增长时的增长率。</p></li></ul><h3 id="举几个-🌰" tabindex="-1">举几个 🌰 <a class="header-anchor" href="#举几个-🌰" aria-label="Permalink to &quot;举几个 🌰&quot;">​</a></h3><ul><li>如果算法的执行时间不随<code>n</code>的增加而增长，假如算法中有上千条语句，执行时间也不过是一个较大的常数。</li></ul><p>此类算法的时间复杂度是<code>O(1)</code></p><p>🌰 代码执行<code>100</code>次，是一个常数，复杂度也是<code>O(1)</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#BABED8;"> (x </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">100</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">x</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>有多个循环语句时候，算法的时间复杂度是由嵌套层数最多的循环语句中最内层语句的方法决定的。</li></ul><p>在 👇 <code>for</code>循环当中，外层循环每执行一次，内层循环要执行<code>n</code>次，执行次数是根据<code>n</code>所决定的，时间复杂度是<code>O(n^2)</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#BABED8;"> (i </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> n</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">j</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">j</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">n</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">j</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...code</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>循环不仅与<code>n</code>有关，还与执行循环判断条件有关。</li></ul><p>🌰 在 👇 代码中，如果<code>arr[i]</code>不等于<code>1</code>的话，时间复杂度是<code>O(n)</code>。如果<code>arr[i]</code>等于<code>1</code>的话，循环不执行，时间复杂度是<code>O(0)</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#BABED8;"> (</span><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> n </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#BABED8;"> arr[i] </span><span style="color:#89DDFF;">!=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...code</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="空间复杂度" tabindex="-1">空间复杂度 <a class="header-anchor" href="#空间复杂度" aria-label="Permalink to &quot;空间复杂度&quot;">​</a></h2><p>空间复杂度用于描述算法在运行过程中所需的存储空间与输入规模之间的关系。</p><p>它通常表示为一个函数 ( <code>S(n)</code> )，其中 ( <code>n</code> ) 是输入的规模。空间复杂度评估算法所需的内存量，包括输入数据的大小、辅助空间和其他临时变量所需的空间。</p><h3 id="常见的空间复杂度" tabindex="-1"><strong>常见的空间复杂度</strong> <a class="header-anchor" href="#常见的空间复杂度" aria-label="Permalink to &quot;**常见的空间复杂度**&quot;">​</a></h3><ul><li><p><strong>常数空间复杂度 ( <code>O(1)</code> )</strong></p><ul><li><p>算法所需的空间不随输入规模的变化而变化。</p></li><li><p>例如：使用有限数量的变量。</p></li></ul></li><li><p><strong>线性空间复杂度 ( <code>O(n)</code> )</strong></p><ul><li><p>所需的空间与输入规模成正比。</p></li><li><p>例如：存储输入数组的副本或创建与输入数组同样大小的数组。</p></li></ul></li><li><p><strong>平方空间复杂度 ( <code>O(n^2)</code> )</strong></p><ul><li>在某些情况下，如使用二维数组（例如动态规划的表格）时可能会出现。</li></ul></li><li><p><strong>递归空间复杂度</strong></p><ul><li>递归调用时会消耗栈空间，通常与递归深度有关。例如，深度为 ( <code>n</code> ) 的递归调用通常会有 ( <code>O(n)</code> ) 的空间复杂度。</li></ul></li></ul><h3 id="空间复杂度的计算" tabindex="-1"><strong>空间复杂度的计算</strong> <a class="header-anchor" href="#空间复杂度的计算" aria-label="Permalink to &quot;**空间复杂度的计算**&quot;">​</a></h3><p>在分析空间复杂度时，通常关注以下几点：</p><ul><li><p><strong>输入空间</strong>：算法需要存储的输入数据大小。</p></li><li><p><strong>辅助空间</strong>：额外的空间，用于存储中间变量或临时数据结构。</p></li><li><p><strong>递归栈空间</strong>：在递归算法中，栈的深度直接影响空间复杂度。</p></li></ul><blockquote><p>举个 🌰</p><p>递归实现，调用<code>fun</code>函数，每次都创建<code>1</code>个变量<code>k</code>。调用<code>n</code>次，空间复杂度<code>O(n*1) = O(n)</code></p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">fun</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">n</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">k</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">k</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">n</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fun</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">++</span><span style="color:#BABED8;">n</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,30)]))}const D=n(p,[["render",e]]);export{F as __pageData,D as default};
