import{_ as t,B as i,o as c,c as n,D as s,z as r,x as a,Q as l,a as e}from"./chunks/framework.a5035e6c.js";const p="/assets/cache.6f82399d.jpg",h="/assets/server_worker.cd04f871.png",d="/assets/memory_cache.8d236083.png",m="/assets/304.50c6a7ee.png",M=JSON.parse('{"title":"浏览器缓存机制","description":"","frontmatter":{},"headers":[],"relativePath":"base/browser/cache.md","lastUpdated":1696917066000}'),u={name:"base/browser/cache.md"},_=l('<h1 id="浏览器缓存机制" tabindex="-1">浏览器缓存机制 <a class="header-anchor" href="#浏览器缓存机制" aria-label="Permalink to &quot;浏览器缓存机制&quot;">​</a></h1><p><img src="'+p+'" alt="cache"></p><h2 id="介绍一下浏览器缓存位置和优先级" tabindex="-1">介绍一下浏览器缓存位置和优先级 <a class="header-anchor" href="#介绍一下浏览器缓存位置和优先级" aria-label="Permalink to &quot;介绍一下浏览器缓存位置和优先级&quot;">​</a></h2><ol><li>Service Worker</li><li>Memory Cache（内存缓存）</li><li>Disk Cache（硬盘缓存）</li><li>Push Cache（推送缓存）</li><li>以上缓存都没命中就会进行网络请求</li></ol><h2 id="不同缓存间的差别" tabindex="-1">不同缓存间的差别 <a class="header-anchor" href="#不同缓存间的差别" aria-label="Permalink to &quot;不同缓存间的差别&quot;">​</a></h2><h3 id="service-worker" tabindex="-1">Service Worker <a class="header-anchor" href="#service-worker" aria-label="Permalink to &quot;Service Worker&quot;">​</a></h3><p>和 Web Worker 类似，是独立的线程，我们可以在这个线程中缓存文件，在主线程需要的时候读取这里的文件，Service Worker 使我们可以自由选择缓存哪些文件以及文件的匹配、读取规则，并且缓存是持续性的。</p><p>ServiceWorker 是运行在浏览器后台进程里的一段 JS，它可以做许多事情，比如拦截客户端的请求、向客户端发送消息、向服务器发起请求等等，其中最重要的作用之一就是离线资源缓存。</p><p>ServiceWorker 拥有对缓存流程丰富灵活的控制能力，当页面请求到 ServiceWorker 时，ServiceWorker 同时请求缓存和网络，把缓存的内容直接给用户，而后覆盖缓存。</p><p><img src="'+h+'" alt="server_worker"></p><p><strong>注意：需要 HTTPS 才可以使用 ServiceWorker</strong></p><h3 id="memory-cache" tabindex="-1">Memory Cache <a class="header-anchor" href="#memory-cache" aria-label="Permalink to &quot;Memory Cache&quot;">​</a></h3><p>即内存缓存，内存缓存不是持续性的，缓存会随着进程释放而释放。</p><p>内存缓存：读取快、持续时间短、容量小。</p><h3 id="disk-cache" tabindex="-1">Disk Cache <a class="header-anchor" href="#disk-cache" aria-label="Permalink to &quot;Disk Cache&quot;">​</a></h3><p>即硬盘缓存，相较于内存缓存，硬盘缓存的持续性和容量更优，它会根据 HTTP header 的字段判断哪些资源需要缓存。</p><p>硬盘缓存：读取慢、持续时间长、容量大。</p><h3 id="push-cache" tabindex="-1">Push Cache <a class="header-anchor" href="#push-cache" aria-label="Permalink to &quot;Push Cache&quot;">​</a></h3><p>即推送缓存，是 HTTP/2 的内容，目前应用较少。</p><h2 id="浏览器缓存策略" tabindex="-1">浏览器缓存策略 <a class="header-anchor" href="#浏览器缓存策略" aria-label="Permalink to &quot;浏览器缓存策略&quot;">​</a></h2><p>HTTP 缓存一般分为两类：强缓存（也称本地缓存）  和   协商缓存（也称 304 缓存）。</p><p>普通刷新会启用协商缓存，忽略强缓存。只有在地址栏或收藏夹输入网址、通过链接引用资源等情况下，浏览器才会启用强缓存。</p><p>强缓存(不要向服务器询问的缓存)（200）</p><p>本地缓存是最快速的一种缓存方式，只要资源还在缓存有效期内，浏览器就会直接在本地读取，不会请求服务端。</p><p>from disk cache 和 from memory cache 吗，什么时候会触发？</p><ol><li>先查找内存，如果内存中存在，从内存中加载；</li><li>如果内存中未查找到，选择硬盘获取，如果硬盘中有，从硬盘中加载；</li><li>如果硬盘中未查找到，那就进行网络请求；</li><li>加载到的资源缓存到硬盘和内存；</li></ol><p><img src="'+d+'" alt="memory_cache"></p><h3 id="设置-expires-http1-0" tabindex="-1">设置 Expires(HTTP1.0) <a class="header-anchor" href="#设置-expires-http1-0" aria-label="Permalink to &quot;设置 Expires(HTTP1.0)&quot;">​</a></h3><p>即过期时间，例如「Expires: Thu, 26 Dec 2019 10:30:42 GMT」表示缓存会在这个时间后失效，这个过期日期是绝对日期，如果修改了本地日期，或者本地日期与服务器日期不一致，那么将导致缓存过期时间错误。</p><p>Expires 是 HTTP1.0 的产物，故现在大多数使用 Cache-Control 替代。</p><h3 id="设置-cache-control" tabindex="-1">设置 Cache-Control <a class="header-anchor" href="#设置-cache-control" aria-label="Permalink to &quot;设置 Cache-Control&quot;">​</a></h3><p>HTTP/1.1 新增字段，Cache-Control 可以通过 max-age 字段来设置过期时间，例如「Cache-Control:max-age=3600」除此之外 Cache-Control 还能设置 private/no-cache 等多种字段:</p><ul><li>private：客户端可以缓存</li><li>public：客户端和代理服务器都可以缓存</li><li>max-age=t：缓存内容将在 t 秒后失效</li><li>no-cache：需要使用协商缓存来验证缓存数据</li><li>no-store：所有内容都不会缓存。</li></ul>',33),f=a("br",null,null,-1),b=l('<h3 id="协商缓存-需要向服务器询问缓存是否已经过期-304" tabindex="-1">协商缓存(需要向服务器询问缓存是否已经过期)（304） <a class="header-anchor" href="#协商缓存-需要向服务器询问缓存是否已经过期-304" aria-label="Permalink to &quot;协商缓存(需要向服务器询问缓存是否已经过期)（304）&quot;">​</a></h3><p>协商缓存，顾名思义是经过浏览器与服务器之间协商过之后，在决定是否读取本地缓存，如果服务器通知浏览器可以读取本地缓存，会返回 304 状态码，并且协商过程很简单，只会发送头信息，不会发送响应体</p><p><img src="'+m+`" alt="304"></p><h4 id="last-modified-http1-0" tabindex="-1">Last-Modified(HTTP1.0) <a class="header-anchor" href="#last-modified-http1-0" aria-label="Permalink to &quot;Last-Modified(HTTP1.0)&quot;">​</a></h4><p>即最后修改时间，浏览器第一次请求资源时，服务器会在响应头上加上 Last-Modified 。</p><p>当浏览器再次请求该资源时，浏览器会在请求头中带上 If-Modified-Since 字段，字段的值就是之前服务器返回的最后修改时间，服务器对比这两个时间，若相同则返回 304，否则返回新资源，并更新 Last-Modified</p><h4 id="etag" tabindex="-1">ETag <a class="header-anchor" href="#etag" aria-label="Permalink to &quot;ETag&quot;">​</a></h4><p>HTTP/1.1 新增字段，表示文件唯一标识，只要文件内容改动，ETag 就会重新计算。</p><p>缓存流程和 Last-Modified 一样：服务器发送 ETag 字段 -&gt; 浏览器再次请求时发送 If-None-Match -&gt; 如果 ETag 值不匹配，说明文件已经改变，返回新资源并更新 ETag，若匹配则返回 304。</p><ul><li><p>If-Match：条件请求，携带上一次请求中资源的 ETag，服务器根据这个字段判断文件是否有新的修改。</p></li><li><p>If-None-Match： 再次请求服务器时，浏览器的请求报文头部会包含此字段，后面的值为在缓存中获取的标识。服务器接收到次报文后发现 。</p></li></ul><p>If-None-Match 则与被请求资源的唯一标识进行对比。</p><ul><li>不同，说明资源被改动过，则响应整个资源内容，返回状态码 200。</li><li>相同，说明资源无心修改，则响应 header，浏览器直接从缓存中获取数据信息。返回状态码 304.</li></ul><p>但是实际应用中由于 Etag 的计算是使用算法来得出的，而算法会占用服务端计算的资源，所有服务端的资源都是宝贵的，所以就很少使用 Etag 了。</p><p>两者对比：</p><ul><li><p>ETag 比 Last-Modified 更准确：如果我们打开文件但并没有修改，Last-Modified 也会改变，并且 Last-Modified 的单位时间为一秒，如果一秒内修改完了文件，那么还是会命中缓存。</p></li><li><p>如果什么缓存策略都没有设置，那么浏览器会取响应头中的 Date 减去 Last-Modified 值的 10% 作为缓存时间。</p></li></ul><h2 id="缓存场景" tabindex="-1">缓存场景 <a class="header-anchor" href="#缓存场景" aria-label="Permalink to &quot;缓存场景&quot;">​</a></h2><p>对于大部分的场景都可以使用强缓存配合协商缓存解决，但是在一些特殊的地方可能需要选择特殊的缓存策略。</p><p>对于某些不需要缓存的资源，可以使用 Cache-control: no-store ，表示该资源不需要缓存</p><p>对于频繁变动的资源，可以使用 Cache-Control: no-cache 并配合 ETag 使用，表示该资源已被缓存，但是每次都会发送请求询问资源是否更新。</p><p>对于代码文件来说，通常使用 Cache-Control: max-age=31536000 并配合策略缓存使用，然后对文件进行指纹处理，一旦文件名变动就会立刻下载新的文件</p><h2 id="启发式缓存" tabindex="-1">启发式缓存 <a class="header-anchor" href="#启发式缓存" aria-label="Permalink to &quot;启发式缓存&quot;">​</a></h2><p>如果响应中未显示 Expires，Cache-Control：max-age 或 Cache-Control：s-maxage，并且响应中不包含其他有关缓存的限制，缓存可以使用启发式方法计算新鲜度寿命。</p><p>通常会根据响应头中的 2 个时间字段 Date 减去 Last-Modified 值的 10% 作为缓存时间。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Date 减去 Last-Modified 值的 10% 作为缓存时间。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Date：创建报文的日期时间, Last-Modified 服务器声明文档最后被修改时间</span></span>
<span class="line"><span style="color:#BABED8;">response_is_fresh </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;">  </span><span style="color:#82AAFF;">max</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">（Date </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">  Last</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">Modified)) </span><span style="color:#89DDFF;">%</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,24),C=a("h3",{id:"启发式缓存会引起什么问题",tabindex:"-1"},[e("启发式缓存会引起什么问题 "),a("a",{class:"header-anchor",href:"#启发式缓存会引起什么问题","aria-label":'Permalink to "启发式缓存会引起什么问题"'},"​")],-1),T=a("p",null,"考虑一个情况，假设你有一个文件没有设置缓存时间，在一个月前你更新了上个版本。这次发版后，你可能得等到 3 天后用户才看到新的内容了。如果这个资源还在 CDN 也缓存了，则问题会更严重。",-1),k=a("p",null,"所以，要给资源设置合理的缓存时间。不要不设置缓存，也不要设置过长时间的缓存。强缓存时间过长，则内容要很久才会覆盖新版本，缓存时间过短，服务器可能背不住。一般带 hash 的文件缓存时间可以长一点。",-1);function x(g,P,D,q,y,E){const o=i("font");return c(),n("div",null,[_,s(o,{color:"#FF4229"},{default:r(()=>[e("请注意 no-cache 指令很多人误以为是不缓存，这是不准确的，no-cache 的意思是可以缓存，但每次用应该去想服务器验证缓存是否可用。"),f]),_:1}),s(o,{color:"#FF9D00"},{default:r(()=>[e("no-store 才是不缓存内容。当在首部字段 Cache-Control 有指定 max-age 指令时，比起首部字段 Expires，会优先处理 max-age 指令。命中强缓存的表现形式：Firefox 浏览器表现为一个灰色的 200 状态码。Chrome 浏览器状态码表现为 200 (from disk cache)或是 200 OK (from memory cache)")]),_:1}),b,a("p",null,[a("strong",null,[s(o,{color:"FF9D00"},{default:r(()=>[e("注：只有在服务端没有返回明确的缓存策略时才会激活浏览器的启发式缓存策略。")]),_:1})])]),C,T,k])}const F=t(u,[["render",x]]);export{M as __pageData,F as default};
