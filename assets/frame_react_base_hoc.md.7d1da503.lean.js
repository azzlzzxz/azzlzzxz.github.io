import{_ as n,B as c,o as d,c as p,N as a,x as s,a as o,D as r,z as l}from"./chunks/framework.5873b8fd.js";const B=JSON.parse('{"title":"HOC 高阶组件","description":"","frontmatter":{},"headers":[],"relativePath":"frame/react/base/hoc.md","lastUpdated":1727449175000}'),i={name:"frame/react/base/hoc.md"};function m(u,e,h,C,f,b){const t=c("font");return d(),p("div",null,[e[3]||(e[3]=a('<h1 id="hoc-高阶组件" tabindex="-1">HOC 高阶组件 <a class="header-anchor" href="#hoc-高阶组件" aria-label="Permalink to &quot;HOC 高阶组件&quot;">​</a></h1><p><code>高阶组件（HOC）</code>是 <code>React</code> 中用于复用组件逻辑的一种高级技巧。<code>HOC</code> 自身不是 <code>React API</code> 的一部分，它是一种基于 <code>React</code> 的组合特性而形成的设计模式。</p>',2)),s("p",null,[e[1]||(e[1]=o("具体而言，")),s("strong",null,[r(t,{color:"#FF9D00"},{default:l(()=>e[0]||(e[0]=[o("高阶组件是参数为组件，返回值为新组件的函数")])),_:1})]),e[2]||(e[2]=o("。"))]),e[4]||(e[4]=a(`<p>组件是将 <code>props</code> 转换为 <code>UI</code>，而高阶组件是将组件转换为另一个组件。</p><p>你也可以把它理解成，就是一个高阶函数。</p><p>语法结构：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> EnhancedComponent </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">higherOrderComponent</span><span style="color:#BABED8;">(WrappedComponent)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="高阶组件的作用" tabindex="-1">高阶组件的作用 <a class="header-anchor" href="#高阶组件的作用" aria-label="Permalink to &quot;高阶组件的作用&quot;">​</a></h2><ul><li><p><code>代码复用、逻辑抽象</code>： <code>HOC</code> 可以将一些通用的业务逻辑抽取出来，在多个组件中重用，避免重复代码。例如权限控制、数据获取、条件渲染等。</p></li><li><p><code>跨组件操作</code>： 通过 <code>HOC</code> 可以在多个不相关的组件间共享功能或者行为。例如，某个全局的状态或者布局风格的注入。</p></li><li><p><code>渲染劫持</code>： <code>HOC</code> 可以通过在渲染时对组件进行包裹，来决定某个组件是否要渲染，以及渲染什么内容。</p></li><li><p><code>修改组件的 Props</code>： <code>HOC</code> 可以通过操控 <code>props</code> 来增强组件的行为。例如，在渲染某个组件之前为它传递一些特定的 <code>props</code>。</p></li></ul><h2 id="实现高阶组件的方式及其功能" tabindex="-1">实现高阶组件的方式及其功能 <a class="header-anchor" href="#实现高阶组件的方式及其功能" aria-label="Permalink to &quot;实现高阶组件的方式及其功能&quot;">​</a></h2>`,7))])}const x=n(i,[["render",m]]);export{B as __pageData,x as default};
