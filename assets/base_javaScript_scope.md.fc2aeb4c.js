import{_ as a,o,c as e,N as l}from"./chunks/framework.6198c6ab.js";const F=JSON.parse('{"title":"作用域","description":"","frontmatter":{},"headers":[],"relativePath":"base/javaScript/scope.md","lastUpdated":1726113057000}'),n={name:"base/javaScript/scope.md"};function c(p,s,t,r,i,d){return o(),e("div",null,s[0]||(s[0]=[l(`<h1 id="作用域" tabindex="-1">作用域 <a class="header-anchor" href="#作用域" aria-label="Permalink to &quot;作用域&quot;">​</a></h1><h2 id="作用域-1" tabindex="-1">作用域 <a class="header-anchor" href="#作用域-1" aria-label="Permalink to &quot;作用域&quot;">​</a></h2><p>作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。</p><p>执行上下文中还包含作用域链。理解作用域之前，先介绍下作用域。作用域其实可理解为该上下文中声明的 变量和声明的作用范围。可分为 块级作用域 和 函数作用域</p><p>特性:</p><ul><li>声明提前: 一个声明在函数体内都是可见的, 函数优先于变量</li><li>非匿名自执行函数，函数变量为 只读 状态，无法修改</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">(</span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">foo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 由于 foo 在函数中只为可读，因此赋值无效</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">foo</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)()</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#BABED8;">(){ foo </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10</span><span style="color:#BABED8;"> ; console.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(foo)}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol><li>全局作⽤域 在 <code>&lt;script&gt;</code> 标签中定义的变量——全局变量 不使⽤ <code>var</code> 声明直接使⽤的变量——全局变量。</li><li>局部作⽤域 只有在函数内部使⽤ <code>var</code> 定义的变量才是局部变量超出函数的作⽤范围后，局部变量被销毁。</li><li>块级作⽤域 使⽤代码块限定的作⽤域<code>（let、const）</code>。<code>JavaScript</code> 中没有块级作⽤域 <code>if</code> 、 <code>for</code> 中使⽤ <code>var</code> 定义的变量都是全局变量。</li></ol><p><strong><code>JavaScript</code> 变量生命周期：</strong></p><ol><li><code>JavaScript</code> 变量生命周期在它声明时初始化。</li><li>局部变量在函数执行完毕后销毁。</li><li>全局变量在页面关闭后销毁</li></ol><h2 id="作用域链" tabindex="-1">作用域链 <a class="header-anchor" href="#作用域链" aria-label="Permalink to &quot;作用域链&quot;">​</a></h2><p>当代码在一个环境中创建时，会创建变量对象的一个作用域链<code>（scope chain）</code>来保证对执行环境有权访问的变量和函数。作用域第一个对象始终是当前执行代码所在环境的变量对象<code>（VO）</code>。如果是函数执行阶段，那么将其<code> activation object（AO）</code>作为作用域链第一个对象，第二个对象是上级函数的执行上下文 <code>AO</code>，下一个对象依次类推。</p><p>在《<code>JavaScript </code>深入之变量对象》中讲到，当查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级(词法层面上的父级)执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做作用域链。</p><p>函数中所能访问的变量按照层级关系所组成的一条有着先后顺序的链子，所以每个函数最先能访问的变量（也就是在这条链子上最先能接触到的）是当前函数的活动对象（就是在函数当中定义或重新赋值的变量），其次下一个能访问的变量就是当前的函数所在的包含环境。（其包含环境一般是指外部函数或全局执行环境。但在 <code>ES6</code> 当中块级代码语句也有可能生成包含环境。）然后是下下个包含环境。这样一层层的找下去，直到找到全局执行环境为止</p><ul><li>函数的生命周期</li><li>变量和函数的声明</li><li><code>Activetion Object（AO）</code>、<code>Variable Object（VO）</code></li></ul><h3 id="函数的生命周期" tabindex="-1">函数的生命周期 <a class="header-anchor" href="#函数的生命周期" aria-label="Permalink to &quot;函数的生命周期&quot;">​</a></h3><p>创建：<code>JS</code> 解析引擎进行预解析，会将函数声明提前，同时将该函数放到全局作用域中或当前函数的上一级函数的局部作用域中。</p><p>执行：<code>JS</code> 引擎会将当前函数的局部变量和内部函数进行声明提前，然后再执行业务代码，当函数执行完退出时，释放该函数的执行上下文，并注销该函数的局部变量。</p><p>变量和函数的声明：如果变量名和函数名声明时相同，函数优先声明。</p><p><code>Activetion Object（AO）</code>、<code>Variable Object（VO）</code>：</p><ul><li><code>AO：Activetion Object（活动对象）</code></li><li><code>VO：Variable Object（变量对象）</code></li></ul><p><code>VO</code> 对应的是函数创建阶段，<code>JS</code> 解析引擎进行预解析时，所有的变量和函数的声明，统称为 <code>Variable Object</code>。该变量与执行上下文相关，知道自己的数据存储在哪里，并且知道如何访问。<code>VO </code>是一个与执行上下文相关的特殊对象，它存储着在上下文中声明的以下内容：</p><ul><li>变量 (<code>var</code>, 变量声明);</li><li>函数声明 (<code>FunctionDeclaration</code>, 缩写为 <code>FD</code>);</li><li>函数的形参</li></ul><p><code>AO</code> 对应的是函数执行阶段，当函数被调用执行时，会建立一个执行上下文，该执行上下文包含了函数所需的所有变量，该变量共同组成了一个新的对象就是 <code>Activetion Object</code>。该对象包含了：</p><ul><li>函数的所有局部变量</li><li>函数的所有命名参数</li><li>函数的参数集合</li><li>函数的 <code>this</code> 指向</li></ul>`,26)]))}const u=a(n,[["render",c]]);export{F as __pageData,u as default};
