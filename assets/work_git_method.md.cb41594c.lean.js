import{_ as a,o as e,c as n,N as l}from"./chunks/framework.2673bc46.js";const u=JSON.parse('{"title":"Git 工作中常用到的","description":"","frontmatter":{},"headers":[],"relativePath":"work/git/method.md","lastUpdated":1727687371000}'),p={name:"work/git/method.md"};function o(t,s,i,c,r,d){return e(),n("div",null,s[0]||(s[0]=[l(`<h1 id="git-工作中常用到的" tabindex="-1">Git 工作中常用到的 <a class="header-anchor" href="#git-工作中常用到的" aria-label="Permalink to &quot;Git 工作中常用到的&quot;">​</a></h1><h2 id="如何把在一个分支的修改在未提交的情况下-移到另一个分支上" tabindex="-1">如何把在一个分支的修改在未提交的情况下，移到另一个分支上 <a class="header-anchor" href="#如何把在一个分支的修改在未提交的情况下-移到另一个分支上" aria-label="Permalink to &quot;如何把在一个分支的修改在未提交的情况下，移到另一个分支上&quot;">​</a></h2><p>如果您在一个分支上做了修改但尚未提交，并希望将这些修改移动到另一个分支上</p><ol><li><p>确保你的工作目录是干净的（没有未提交的修改）。你可以使用 <code>git status</code> 命令来查看工作目录的状态。</p></li><li><p>使用 <code>git stash</code> 命令将当前分支的修改保存到一个临时存储区。这将使您的工作目录恢复到干净状态，以便您可以切换到目标分支。</p></li></ol><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">stash</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li>使用 <code>git checkout</code> 命令切换到目标分支</li></ol><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">目标分支</span><span style="color:#BABED8;">名</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="4"><li>使用 <code>git stash apply</code> 命令将之前保存的修改应用到目标分支</li></ol><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">stash</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">apply</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>现在，你的修改已经移动到目标分支上。你可以继续进行其他操作，例如提交修改或进一步的开发工作。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>使用 <code>git stash</code> 命令将修改保存到临时存储区后，您可以使用 <code>git stash list</code> 命令查看存储的修改列表，并使用相应的 <code>git stash apply</code> 或 <code>git stash drop</code> 命令对存储的修改进行操作。</p><p>在执行上述操作时，请确保你在正确的分支上进行，并小心处理可能存在的冲突。如果在应用修改时遇到冲突，您你手动解决冲突并进行适当的提交。</p></div><h2 id="git仓库-里面有几个个完整的项目-如果修改其中的项目-产生的提交记录在根目录下-如何操作" tabindex="-1"><code>git</code>仓库，里面有几个个完整的项目，如果修改其中的项目，产生的提交记录在根目录下，如何操作 <a class="header-anchor" href="#git仓库-里面有几个个完整的项目-如果修改其中的项目-产生的提交记录在根目录下-如何操作" aria-label="Permalink to &quot;\`git\`仓库，里面有几个个完整的项目，如果修改其中的项目，产生的提交记录在根目录下，如何操作&quot;">​</a></h2><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 进入子项目</span></span>
<span class="line"><span style="color:#FFCB6B;">ls</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-a</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">检查到有</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">.git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">文件夹</span></span>
<span class="line"><span style="color:#FFCB6B;">rm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-r</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">.git</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="git设置大小写敏感" tabindex="-1"><code>Git</code>设置大小写敏感 <a class="header-anchor" href="#git设置大小写敏感" aria-label="Permalink to &quot;\`Git\`设置大小写敏感&quot;">​</a></h2><ul><li>查看<code>git</code>的设置</li></ul><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">config</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--get</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">core.ignorecase</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>发现默认是不区分大小的，因此当你修改了文件名的大小写后，<code>git</code>并不会认为你有修改</p><ul><li>设置大小写敏感</li></ul><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">config</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">core.ignorecase</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,19)]))}const y=a(p,[["render",o]]);export{u as __pageData,y as default};
