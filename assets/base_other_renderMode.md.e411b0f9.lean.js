import{_ as a,o as n,c as l,N as o}from"./chunks/framework.2f525601.js";const p="/assets/next_render_flow.02a0fc10.png",D=JSON.parse('{"title":"前端页面渲染方式","description":"","frontmatter":{},"headers":[],"relativePath":"base/other/renderMode.md","lastUpdated":1728901331000}'),e={name:"base/other/renderMode.md"};function c(t,s,r,i,F,y){return n(),l("div",null,s[0]||(s[0]=[o(`<h1 id="前端页面渲染方式" tabindex="-1">前端页面渲染方式 <a class="header-anchor" href="#前端页面渲染方式" aria-label="Permalink to &quot;前端页面渲染方式&quot;">​</a></h1><h2 id="客户端渲染-csr" tabindex="-1">客户端渲染（CSR） <a class="header-anchor" href="#客户端渲染-csr" aria-label="Permalink to &quot;客户端渲染（CSR）&quot;">​</a></h2><blockquote><p>CSR 客户端渲染（Client Side Rendering）</p></blockquote><p>客户端渲染是指浏览器在请求页面 <code>URL</code> 后，服务端直接返回一个空的静态 <code>HTML</code> 文件，这个 <code>HTML</code> 文件需要再加载 <code>JavaScript</code> 脚本和 <code>CSS</code> 样式表，浏览器加载和执行这些文件去动态改变 <code>DOM</code> 树的结构，使页面渲染成用户所需要的界面，这种动态渲染的方式就是客户端渲染 <code>（CSR）</code></p><blockquote><p>客户端渲染（CSR）是 React 应用程序的默认渲染策略。</p></blockquote><div class="tip custom-block"><p class="custom-block-title">举个 🌰</p><ul><li>在 <code>useEffect()</code> 中请求数据就属于 <code>CSR</code></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> React</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">useState</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">useEffect</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Page</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">setData</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">useEffect</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">fetchData</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">async</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">response</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://xxx/data</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">setData</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">result</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> [])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;{</span><span style="color:#BABED8;">data </span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Your data: </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;">}\`</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Loading...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></div><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li><p><strong>局部刷新</strong>：无需每次都进行完整页面请求</p></li><li><p><strong>懒加载</strong>：首次加载时可以只加载可视区域内的数据</p></li><li><p><strong>减轻服务器压力</strong>：服务器负载较轻，因为大部分工作都在客户端完成</p></li><li><p><strong>适用于高度交互的应用</strong>：如 <code>SPA</code> (单页应用)</p></li></ul><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li><p><strong>首屏渲染慢</strong>：首次加载时间可能较长，因为需要下载、解析和执行大量 <code>JavaScript</code> 完毕后才开始渲染页面</p></li><li><p><strong>不利于 <code>SEO</code></strong>：因为搜索引擎可能只看到空的 <code>HTML</code>，而不是实际内容。</p><ul><li><code>SEO（Search Engine Optimization）</code>：搜索引擎优化，利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。目的是让其在行业内占据领先地位，获得品牌收益。</li></ul></li><li><p><strong>增加了客户端的计算负担</strong>：可能导致手机等低功耗设备的性能问题。</p></li></ul><h2 id="服务端渲染-ssr" tabindex="-1">服务端渲染（SSR） <a class="header-anchor" href="#服务端渲染-ssr" aria-label="Permalink to &quot;服务端渲染（SSR）&quot;">​</a></h2><blockquote><p>SSR 服务端渲染（Server Side Rendering）</p></blockquote><h3 id="为什么要服务端渲染" tabindex="-1">为什么要服务端渲染 <a class="header-anchor" href="#为什么要服务端渲染" aria-label="Permalink to &quot;为什么要服务端渲染&quot;">​</a></h3><ul><li><p><strong>避免首屏等待，即<code>TTFP</code>，首屏等待时间</strong>：在 <code>SPA</code> 模式下，所有的数据请求和 <code>DOM</code> 渲染都在浏览器端完成，所以当我们第一次访问页面的时候很可能会存在<code>“白屏”</code>等待，而服务端渲染所有数据请求和 <code>HTML</code>内容已在服务端处理完成，浏览器收到的是完整的 <code>HTML</code> 内容，可以更快的看到渲染内容，在服务端完成数据请求肯定是要比在浏览器端效率要高的多。</p></li><li><p><strong>更好支持<code>SEO</code></strong>：有些网站的流量来源主要还是靠搜索引擎，所以网站的 <code>SEO</code> 还是很重要的，而 <code>SPA</code> 模式对搜索引擎不够友好，要想彻底解决这个问题只能采用服务端直出。</p></li></ul><div class="tip custom-block"><p class="custom-block-title">主流的<code>SSR</code>框架</p><ul><li><p><a href="https://www.nextjs.cn/" target="_blank" rel="noreferrer"><u>Next.js</u></a>，<code>React</code>应用框架</p></li><li><p><a href="https://www.nuxtjs.cn/" target="_blank" rel="noreferrer"><u>Nuxt.js</u></a>，<code>Vue</code>应用框架</p></li></ul></div><h3 id="什么是-ssr" tabindex="-1">什么是 <code>SSR</code> <a class="header-anchor" href="#什么是-ssr" aria-label="Permalink to &quot;什么是 \`SSR\`&quot;">​</a></h3><p>服务端渲染是指浏览器在请求页面 <code>URL</code> 时，服务端将我们需要的 <code>HTML</code> 文本组装好，并返回给浏览器，这个 <code>HTML</code> 文本被浏览器解析之后，不需要经过 <code>JavaScript</code> 脚本的下载过程，就能直接构建出我们所希望的 <code>DOM</code> 树并展示到页面中。这个服务端组装 <code>HTML</code> 的过程就叫做服务端渲染<code>（SSR）</code></p><h3 id="优点-1" tabindex="-1">优点 <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li><p><strong>首屏渲染快</strong>：首次加载速度快，因为浏览器立即获得完整的页面内容。</p></li><li><p><strong>有利于 SEO</strong>：因为搜索引擎可以直接爬取和索引完整的页面内容</p></li></ul><h3 id="缺点-1" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li><strong>占用服务器资源</strong>：服务器压力较大，尤其是在高流量情况下</li><li><strong>用户体验不好</strong>：新页面都需要在服务端重新渲染整个页面，不能局部渲染，并且总体延迟可能增加，因为每次页面请求都需要服务器处理</li></ul><h2 id="同构渲染-ssr-csr" tabindex="-1">同构渲染（SSR + CSR） <a class="header-anchor" href="#同构渲染-ssr-csr" aria-label="Permalink to &quot;同构渲染（SSR + CSR）&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">前端同构应用</p><ul><li><p>第一次访问页面是服务端渲染，基于第一次访问，后续的交互就是 <code>SPA</code> 的效果和体验，还不影响<code>SEO</code>。</p></li><li><p>简单说就是一个前端项目里的组件，部分服务端渲染后输出，部分由客户端异步渲染，既保障网页渲染速度，也有利于搜索引擎 <code>SEO</code>。</p></li></ul></div><div class="tip custom-block"><p class="custom-block-title">同构是什么意思</p><ul><li><p>服务端和前端使用同一套渲染层代码，在服务端执行虚拟<code>DOM</code>(一般用<code>Node.js</code>)，此时服务端使用和前端相同的虚拟<code>DOM</code>的原理来拼接<code>HTML</code>模板。</p></li><li><p>也就是采用一套代码，构建双端（<code>server</code> 和 <code>client</code>）逻辑，最大限度的重用代码，不用维护两套代码。</p></li></ul></div><h3 id="_3-种同构" tabindex="-1">3 种同构 <a class="header-anchor" href="#_3-种同构" aria-label="Permalink to &quot;3 种同构&quot;">​</a></h3><ul><li><p><strong>路由同构</strong>：例如 <code>Next</code> 的文件路由系统</p></li><li><p><strong>数据同构</strong>：例如 <code>Next</code> 的 <code>getInitialProps</code> 用来获取数据并将其传递给页面</p></li><li><p><strong>渲染同构</strong>：为了保证服务端和客户端端渲染的组件具有相同的 <code>props</code> 和 <code>DOM</code> 结构，组件才能只渲染一次，这时就需要脱水和注水了</p><ul><li><p><strong>脱水</strong>：对组件进行脱水，变成<code>HTML</code>字符串，脱去动态数据，成为风干标本快照</p></li><li><p><strong>注水</strong>：发送到客户端后，重新注入数据(水)，重新变成可交互组件</p></li></ul></li></ul><blockquote><p>Next 渲染流程图</p></blockquote><p><img src="`+p+`" alt="next_render_flow"></p><h2 id="静态网站生成-ssg" tabindex="-1">静态网站生成 (SSG) <a class="header-anchor" href="#静态网站生成-ssg" aria-label="Permalink to &quot;静态网站生成 (SSG)&quot;">​</a></h2><blockquote><p>SSG 静态网站生成（Static Site Generation）</p></blockquote><p>静态站点生成是指在构建时就会为每个页面生成包含内容的 <code>HTML</code> 文件，当浏览器在请求页面 <code>URL</code> 时，服务端直接返回 <code>HTML</code> 即可。</p><h3 id="优点-2" tabindex="-1">优点 <a class="header-anchor" href="#优点-2" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li><p>有利于 <code>SEO</code></p></li><li><p>极快的加载速度，因为服务器仅提供预生成的文件。</p></li><li><p>减轻了服务器压力，因为不需要实时渲染。</p></li><li><p>非常适合内容不经常变动的网站或应用。</p></li></ul><h3 id="缺点-2" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-2" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li><p>每次更改内容时都需要重新构建和部署应用程序</p></li><li><p>无法生成用户相关内容</p></li></ul><h2 id="增量静态生成-isr" tabindex="-1">增量静态生成 (ISR) <a class="header-anchor" href="#增量静态生成-isr" aria-label="Permalink to &quot;增量静态生成 (ISR)&quot;">​</a></h2><blockquote><p>ISR 增量静态生成（Incremental Static Regeneration）</p></blockquote><p>增量静态再生<code>（ISR）</code>建立在 <code>SSG</code> 的基础上，同时又有 <code>SSR</code> 的优点，<code>ISR</code> 允许页面的某些部分是静态的，而其他部分则可以在数据发生变化时动态渲染。<code>ISR</code> 在性能和内容更新之间取得了平衡，因此适用于内容经常更新的站点。</p><blockquote><p>举个 🌰</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Blog</span><span style="color:#89DDFF;">({</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">posts</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">})</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">posts</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">post</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> (</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">key</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;">post</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">id</span><span style="color:#89DDFF;">}&gt;{</span><span style="color:#BABED8;">post</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">title</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">      ))</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">async</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">getStaticProps</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://.../posts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">posts</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#F07178;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    props</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">posts</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    revalidate</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">60</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">async</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">getStaticPaths</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://.../posts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">posts</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#F07178;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">paths</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">posts</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">post</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    params</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">post</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">id</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">paths</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> fallback</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">blocking</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#BABED8;"> Blog</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>这个 🌰 和 <code>SSG</code> 的示例大同小异，为什么能做到增量渲染呢？</p><p>核心就在于<code>revalidate</code>和<code>fallback</code></p><ul><li><p>当我们使用 <code>revalidate</code>选项时，<code>Next.js</code> 会在 <code>build</code> 时调用一次<code>getStaticProps</code>，部署生产后，<code>Next.js</code> 还会在达到<code>revalidate</code>设置的时间间隔后再次运行<code>getStaticProps</code>，以此更新内容</p></li><li><p><code>fallback</code>则是用来决定当用户请求一个在构建时未被预渲染的路径时，<code>Next.js</code> 应当怎么处理。它有三种可选值：<code>false</code>、<code>true</code> 和 <code>blocking</code></p><ul><li><p><code>fallback: false</code></p><p>当用户请求一个在构建时未被预渲染的路径时，将立即返回 <code>404</code> 页面。</p><p>这意味着如果路径不在<code>getStaticPaths</code>返回的列表中，用户会看到一个 <code>404</code> 错误。</p></li><li><p><code>fallback: true</code></p><p>当用户请求一个未被预渲染的路径时，<code>Next.js</code> 会立即提供一个<code>“fallback”</code>版本的页面。这通常是一个空页面或一个加载状态。</p><p>然后，<code>Next.js</code> 会在后台异步地运行<code>getStaticProps</code>来获取页面的数据，并重新渲染页面。一旦页面准备好，它将替换<code>“fallback”</code>版本。</p><p>这允许页面几乎立即可用，但可能不显示任何实际内容，直到数据被加载并页面被渲染。</p></li><li><p><code>fallback: &#39;blocking&#39;</code></p><p>当用户请求一个未被预渲染的路径时，<code>Next.js</code> 会等待<code>getStaticProps</code>完成并生成该页面，然后再提供给用户。</p><p>这意味着用户会等待，直到页面准备好，但他们会立即看到完整的页面内容，而不是一个空页面或加载状态。</p></li></ul></li></ul><h3 id="优点-3" tabindex="-1">优点 <a class="header-anchor" href="#优点-3" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li><p>结合了 <code>SSR</code> 的实时性和 <code>SSG</code> 的速度优势。</p></li><li><p>适合内容经常变动但不需要实时更新的应用。</p></li><li><p>减轻了服务器的压力，同时提供了实时内容。</p></li></ul><h3 id="缺点-3" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-3" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li>相比于 <code>SSG</code>，初次请求可能需要更长的加载时间。</li></ul><h2 id="如何选择合适的渲染策略" tabindex="-1">如何选择合适的渲染策略 <a class="header-anchor" href="#如何选择合适的渲染策略" aria-label="Permalink to &quot;如何选择合适的渲染策略&quot;">​</a></h2><ul><li>高度交互的应用</li></ul><p>如果你正在开发一个如单页应用<code>（SPA）</code>那样高度交互的应用，<code>CSR</code> 可能是最佳选择。一旦页面加载，用户的任何交互都将非常迅速，无需再次从服务器加载内容。</p><ul><li>需要 <code>SEO</code> 优化的应用</li></ul><p>如果你的应用依赖于搜索引擎优化，<code>SSR</code> 或 <code>SSG</code> 是更好的选择。这两种方法都会提供完整的 <code>HTML</code>，有助于搜索引擎索引。</p><ul><li>内容静态但更新频繁的网站</li></ul><p>例如博客网站，<code>ISR</code> 是一个很好的选择。它允许内容在背景中更新，而用户仍然可以快速访问页面。</p><ul><li>内容基本不变的网站</li></ul><p>对于内容很少或根本不更改的网站，<code>SSG</code> 是最佳选择。一次生成，无需再次渲染，提供了最快的加载速度。</p><ul><li>混合内容的应用</li></ul><p><code>Next.js</code> 允许你在同一个应用中混合使用不同的渲染策略。例如，你可以使用 <code>SSR</code> 渲染首页，使用 <code>SSG</code> 渲染博客部分，而使用 <code>CSR</code> 渲染用户交互部分。</p><div class="info custom-block"><p class="custom-block-title">相关资料</p><ul><li><p><a href="https://weijunext.com/article/nextjs-csr-ssr-ssg-isr" target="_blank" rel="noreferrer"><u>讲清楚 Next.js 里的 CSR, SSR, SSG 和 ISR</u></a></p></li><li><p><a href="https://johninch.github.io/Roundtable/Question-Bank/Engineering/SSR.html" target="_blank" rel="noreferrer"><u>SSR 服务端渲染和同构原理</u></a></p></li></ul></div>`,59)]))}const u=a(e,[["render",c]]);export{D as __pageData,u as default};
