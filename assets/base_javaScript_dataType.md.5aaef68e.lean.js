import{_ as o,o as a,c as s,N as l}from"./chunks/framework.2f525601.js";const y=JSON.parse('{"title":"数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"base/javaScript/dataType.md","lastUpdated":1729133130000}'),n={name:"base/javaScript/dataType.md"};function c(p,e,d,t,r,i){return a(),s("div",null,e[0]||(e[0]=[l('<h1 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h1><h2 id="javascript-的-8-种数据类型" tabindex="-1"><code>javaScript</code> 的 <code>8</code> 种数据类型 <a class="header-anchor" href="#javascript-的-8-种数据类型" aria-label="Permalink to &quot;`javaScript` 的 `8` 种数据类型&quot;">​</a></h2><h3 id="_7-种基本数据类型" tabindex="-1"><code>7</code> 种基本数据类型 <a class="header-anchor" href="#_7-种基本数据类型" aria-label="Permalink to &quot;`7` 种基本数据类型&quot;">​</a></h3><p><code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Undefined</code>、<code>Null</code>、<code>Symbol（es6 新增）</code>、<code>Biglent（es10 新增）</code></p><p>在内存中占据固定大小，保存在栈内存中</p><h3 id="_1-种引用数据类型" tabindex="-1"><code>1</code> 种引用数据类型 <a class="header-anchor" href="#_1-种引用数据类型" aria-label="Permalink to &quot;`1` 种引用数据类型&quot;">​</a></h3><p><code>Object</code></p><p>里面包含 <code>Function(函数)</code>，其他还有<code>Array(数组)</code>、<code>Date(日期)</code>、<code>RegExp(正则表达式)</code>等。</p><p>特殊的基本包装类型(<code>String</code>、<code>Number</code>、<code>Boolean</code>) 以及单体内置对象(<code>Global</code>、<code>Math</code>)等。</p><p>引用类型的值是对象，保存在堆内存中，而栈内存存储的是对象的变量标识符以及对象在堆内存中的存储地址。</p><h3 id="null-与-undefined-的区别" tabindex="-1"><code>null</code> 与 <code>undefined</code> 的区别 <a class="header-anchor" href="#null-与-undefined-的区别" aria-label="Permalink to &quot;`null` 与 `undefined` 的区别&quot;">​</a></h3><ul><li><p><code>null</code> 是表示一个<code>&#39;无&#39;</code>的对象，转为数值是 <code>0</code>。</p></li><li><p><code>undefined</code> 是表示一个<code>&#39;无&#39;</code>的原始值，转为数值是 <code>NAN</code>。</p></li><li><p><code>null</code> 用来表示尚未存在的对象，常用来表示函数企图返回一个不存在的对象</p></li><li><p><code>undefined</code> 表示<code>”缺少值”</code>，就是此处应该有一个值,但是还没有定义，典型用法是：</p><ul><li><p>变量被声明了，但没有赋值时，就等于 <code>undefined</code></p></li><li><p>调用函数时，应该提供的参数没有提供，该参数等于 <code>undefined</code></p></li><li><p>对象没有赋值属性，该属性的值为 <code>undefined</code></p></li><li><p>函数没有返回值时，默认返回 <code>undefined</code></p></li></ul></li><li><p><code>null</code> 表示<code>”没有对象”</code>，即该处不应该有值，典型用法是：</p><ul><li><p>作为函数的参数，表示该函数的参数不是对象</p></li><li><p>作为对象原型链的终点</p></li></ul></li></ul><h3 id="和-的区别" tabindex="-1"><code>===</code> 和 <code>==</code> 的区别 <a class="header-anchor" href="#和-的区别" aria-label="Permalink to &quot;`===` 和 `==` 的区别&quot;">​</a></h3><p>前者会⾃动转换类型，再判断是否相等，后者不会⾃动类型转换，直接去⽐较。</p><h3 id="_0-1-0-2-0-3" tabindex="-1"><code>0.1 + 0.2 !== 0.3</code> <a class="header-anchor" href="#_0-1-0-2-0-3" aria-label="Permalink to &quot;`0.1 + 0.2 !== 0.3`&quot;">​</a></h3><ul><li><p>浮点数在计算机中无法精确表示，这些值在被存储时会被 截断，导致它们在内存中存储的值与它们的真实值之间有微小的差异。</p></li><li><p>运算时的精度丢失，由于 <code>0.1</code> 和 <code>0.2</code> 不能被精确表示，运算时也会产生一定的误差。因此，当你计算 <code>0.1 + 0.2</code> 时，结果并不是精确的 <code>0.3</code>，而是接近 <code>0.3</code> 的一个值</p></li></ul><div class="tip custom-block"><p class="custom-block-title">解决</p><ul><li>使用四舍五入：将结果舍入到一定的小数位数，通常可以通过设置小数点后的位数来减少误差。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">((</span><span style="color:#F78C6C;">0.1</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0.2</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toFixed</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">)) </span><span style="color:#676E95;font-style:italic;">// &quot;0.3&quot;</span></span>\n<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#82AAFF;">Number</span><span style="color:#BABED8;">((</span><span style="color:#F78C6C;">0.1</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0.2</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toFixed</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">10</span><span style="color:#BABED8;">))) </span><span style="color:#676E95;font-style:italic;">// 0.3</span></span>\n<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>使用整数运算： 你可以通过将小数放大为整数进行运算，然后再除以相应的倍数。比如把 <code>0.1</code> 和 <code>0.2</code> 乘以 <code>10</code> 变成整数 <code>1</code> 和 <code>2</code>，再进行运算，最后除以 <code>10</code></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">((</span><span style="color:#F78C6C;">0.1</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">*</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0.2</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">*</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// 0.3</span></span>\n<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>使用第三方库：<a href="https://www.npmjs.com/package/number-precision" target="_blank" rel="noreferrer"><u>number-precision</u></a></li></ul></div>',17)]))}const B=o(n,[["render",c]]);export{y as __pageData,B as default};
