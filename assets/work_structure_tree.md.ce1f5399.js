import{_ as a,o as e,c as t,Q as r}from"./chunks/framework.a5035e6c.js";const s="/assets/DFS.696014ea.jpg",o="/assets/BFS.44138f64.jpg",S=JSON.parse('{"title":"树 🌲","description":"","frontmatter":{},"headers":[],"relativePath":"work/structure/tree.md","lastUpdated":1694939501000}'),i={name:"work/structure/tree.md"},c=r('<h1 id="树-🌲" tabindex="-1">树 🌲 <a class="header-anchor" href="#树-🌲" aria-label="Permalink to &quot;树 🌲&quot;">​</a></h1><h2 id="数的遍历" tabindex="-1">数的遍历 <a class="header-anchor" href="#数的遍历" aria-label="Permalink to &quot;数的遍历&quot;">​</a></h2><h3 id="深度优先-dfs" tabindex="-1">深度优先（DFS） <a class="header-anchor" href="#深度优先-dfs" aria-label="Permalink to &quot;深度优先（DFS）&quot;">​</a></h3><p>深度优先搜索英文缩写为 DFS 即 Depth First Search。 其过程简要来说是对每一个可能的分支路径深入到不能再深入为止，而且每个节点只能访问一次。 应用场景：</p><ul><li>React 虚拟 DOM 的构建</li><li>React 的 fiber 树构建</li></ul><p><img src="'+s+'" alt="DFS"></p><h3 id="广度优先-bfs" tabindex="-1">广度优先（BFS） <a class="header-anchor" href="#广度优先-bfs" aria-label="Permalink to &quot;广度优先（BFS）&quot;">​</a></h3><p>宽度优先搜索算法（又称广度优先搜索），其英文全称是 Breadth First Search。 算法首先搜索距离为 k 的所有顶点，然后再去搜索距离为 k+l 的其他顶点。</p><p><img src="'+o+'" alt="BFS"></p>',9),l=[c];function n(_,d,h,p,u,f){return e(),t("div",null,l)}const b=a(i,[["render",n]]);export{S as __pageData,b as default};
