import{_ as a,o,c as l,N as c}from"./chunks/framework.b71846ef.js";const u=JSON.parse('{"title":"执行上下文","description":"","frontmatter":{},"headers":[],"relativePath":"base/javaScript/context.md","lastUpdated":1728455051000}'),i={name:"base/javaScript/context.md"};function d(t,e,r,n,s,h){return o(),l("div",null,e[0]||(e[0]=[c('<h1 id="执行上下文" tabindex="-1">执行上下文 <a class="header-anchor" href="#执行上下文" aria-label="Permalink to &quot;执行上下文&quot;">​</a></h1><h2 id="什么是执行上下文" tabindex="-1">什么是执行上下文？ <a class="header-anchor" href="#什么是执行上下文" aria-label="Permalink to &quot;什么是执行上下文？&quot;">​</a></h2><p>执行上下文是评估和执行 <code>JavaScript</code> 代码的环境的抽象概念。每当 <code>Javascript</code> 代码在运行的时候，它都是在执行上下文中运行。</p><h2 id="执行上下文的理解" tabindex="-1">执行上下文的理解： <a class="header-anchor" href="#执行上下文的理解" aria-label="Permalink to &quot;执行上下文的理解：&quot;">​</a></h2><p>执行上下文可以简单理解为一个对象:</p><ul><li>它包含三个部分: <ul><li>变量对象<code>(VO)</code></li><li>作用域链(词法作用域)</li><li><code>this</code> 指向</li></ul></li><li>它的类型: <ul><li>全局执行上下文：这是默认或者说基础的上下文，任何不在函数内部的代码都在全局上下文中。它会执行两件事：创建一个全局的 <code>window</code> 对象（浏览器的情况下），并且设置 <code> this </code> 的值等于这个全局对象。一个程序中只会有一个全局执行上下文。</li><li>函数执行上下文：每当一个函数被调用时, 都会为该函数创建一个新的上下文。每个函数都有它自己的执行上下文，不过是在函数被调用时创建的。</li><li><code>eval</code> 执行上下文</li></ul></li><li>代码执行过程: <ul><li>创建 全局上下文 <code>(global EC)</code></li><li>全局执行上下文 <code>(caller)</code> 逐行 自上而下 执行。遇到函数时，函数执行上下文 <code>(callee)</code> 被 <code>push</code> 到执行栈顶层</li><li>函数执行上下文被激活，成为 <code>active EC</code>, 开始执行函数中的代码，<code>caller </code>被挂起</li><li>函数执行完后，<code>callee</code> 被 <code>pop</code> 移除出执行栈，控制权交还全局上下文 <code>(caller)</code>，继续执行</li></ul></li></ul><h3 id="变量对象" tabindex="-1">变量对象 <a class="header-anchor" href="#变量对象" aria-label="Permalink to &quot;变量对象&quot;">​</a></h3><p>变量对象，是执行上下文中的一部分，可以抽象为一种   数据作用域，其实也可以理解为就是一个简单的对象，它存储着该执行上下文中的所有   变量和函数声明(不包含函数表达式)。</p><h3 id="活动对象-ao" tabindex="-1">活动对象 <code>(AO)</code> <a class="header-anchor" href="#活动对象-ao" aria-label="Permalink to &quot;活动对象 `(AO)`&quot;">​</a></h3><p>当变量对象所处的上下文为 <code>active EC</code> 时，称为活动对象。</p><h2 id="执行栈" tabindex="-1">执行栈 <a class="header-anchor" href="#执行栈" aria-label="Permalink to &quot;执行栈&quot;">​</a></h2>',11)]))}const b=a(i,[["render",d]]);export{u as __pageData,b as default};
