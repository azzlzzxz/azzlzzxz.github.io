import{_ as a,B as l,o as n,c as i,x as o,D as d,z as t,a as e,Q as r}from"./chunks/framework.a5035e6c.js";const s="/assets/electron.1903aecb.png",p="/assets/electron_detail.416b0c0a.png",_="/assets/process.ceb11bc3.png",h="/assets/electron_api.732b8de2.png",V=JSON.parse('{"title":"Electron","description":"","frontmatter":{},"headers":[],"relativePath":"frame/electron/introduce.md","lastUpdated":1723107688000}'),u={name:"frame/electron/introduce.md"},m=r("",18),b=o("code",null,"Electron",-1),E=o("code",null,"Electron",-1),f=o("code",null,"Chromium",-1),P=o("code",null,"UI",-1),I=o("code",null,"BrowserWindow",-1),q=o("code",null,"Chromium",-1),T=o("code",null,"BrowserWindow",-1),w=o("code",null,"Electron",-1),g=o("code",null,"Web",-1),x=r("",14);function S(k,C,A,U,N,B){const c=l("font");return n(),i("div",null,[m,o("p",null,[o("strong",null,[d(c,{color:"FF9D00"},{default:t(()=>[e("一个 "),b,e(" 只会存在一个主进程，但它可以存在多个渲染进程，")]),_:1})]),e(" 由于 "),E,e(" 使用了 "),f,e(" 来展示 "),P,e(" 界面 (应用程序中被称为 "),I,e(")，自然而然地，"),q,e(" 的多进程架构也被引入。")]),o("p",null,[o("strong",null,[d(c,{color:"FF9D00"},{default:t(()=>[e("当主进程每创建一个独立的 "),T,e(" 实例，"),w,e(" 都会初始化一个独立的渲染进程，隔离了不同窗口之间的环境，")]),_:1})]),e(" 每一个渲染进程，只需要关心自己内部的 "),g,e(" 页面。")]),x])}const W=a(u,[["render",S]]);export{V as __pageData,W as default};
