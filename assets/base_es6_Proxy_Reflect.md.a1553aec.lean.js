import{_ as c,B as t,o as r,c as y,N as l,x as n,D as p,z as o,a}from"./chunks/framework.b71846ef.js";const u=JSON.parse('{"title":"Proxy & Reflect","description":"","frontmatter":{},"headers":[],"relativePath":"base/es6/Proxy&Reflect.md","lastUpdated":1728390289000}'),D={name:"base/es6/Proxy&Reflect.md"};function i(F,s,d,B,b,A){const e=t("font");return r(),y("div",null,[s[3]||(s[3]=l(`<h1 id="proxy-reflect" tabindex="-1">Proxy &amp; Reflect <a class="header-anchor" href="#proxy-reflect" aria-label="Permalink to &quot;Proxy &amp; Reflect&quot;">​</a></h1><p><code>Proxy</code> 和 <code>Reflect</code> 是 <code>ES6</code> <code>中引入的两个强大的工具，专门用于拦截对象的操作（如属性访问、赋值、删除等）以及更方便的操作对象。Proxy</code> 可以看作是<code>“代理”</code>一个对象的行为，而 <code>Reflect</code> 则提供了与 <code>Proxy</code> 拦截方法一致的工具函数。</p><h2 id="proxy-代理" tabindex="-1"><code>Proxy</code> 代理 <a class="header-anchor" href="#proxy-代理" aria-label="Permalink to &quot;\`Proxy\` 代理&quot;">​</a></h2><p><code>Proxy</code> 是用来创建一个对象的代理，从而可以拦截和自定义对该对象的基本操作（如属性读取、赋值、枚举、函数调用等）。</p><blockquote><p>举个 🌰</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> target </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">steins gate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> proxy </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#BABED8;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">get</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">receiver</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">getting </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">target[key]</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">!</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">set</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">receiver</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">setting </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">target[key]</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">!</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(proxy</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name) </span><span style="color:#676E95;font-style:italic;">// getting steins gate!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">proxy</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">age </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">19</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(proxy</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">age) </span><span style="color:#676E95;font-style:italic;">// setting 19!</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="参数与实例方法" tabindex="-1">参数与实例方法 <a class="header-anchor" href="#参数与实例方法" aria-label="Permalink to &quot;参数与实例方法&quot;">​</a></h3><p><code>Proxy</code> 接受两个参数</p><ul><li><code>target</code>：要代理的目标对象</li><li><code>handler</code>：代理处理器，用来拦截和定义代理行为，如果<code>handler</code>没有设置任何拦截，那就等同于直接通向原对象(访问<code>proxy</code>即访问<code>target</code>)</li></ul><p><code>Proxy</code>的常用操作拦截器</p><ul><li><code>get(target, prop, receiver)</code>：拦截对象属性的读取，如<code>proxy.name</code></li><li><code>set(target, prop, value, receiver)</code>：拦截对象属性的设置，如<code>proxy.name = &#39;steins gate&#39;</code></li><li><code>has(target, prop)</code>：拦截<code>prop in proxy</code>的操作，如<code>&#39;name&#39; in proxy</code></li><li><code>deleteProperty(target, prop)</code>：拦截<code>delete proxy.name</code>的操作</li><li><code>ownKeys(target)</code>：拦截<code>Object.getOwnPropertyNames(proxy)</code>、<code>Object.getOwnPropertySymbols(proxy)</code>、<code>Object.keys(proxy)</code>、<code>for...in</code>循环等操作</li><li><code>apply(target, ctx, args)</code>：拦截函数的调用，如<code>proxy(...args)</code>、<code>new proxy(...args)</code></li><li><code>construct(target, args, newTarget)</code>：拦截<code>new proxy(...args)</code>的操作</li></ul><p><a href="https://es6.ruanyifeng.com/#docs/proxy" target="_blank" rel="noreferrer"><u>这里只列举了一些常用操作拦截器，其他 Proxy 的拦截器可以看 阮一峰 的 ES6 入门教程</u></a></p><h3 id="proxy-revocable" tabindex="-1"><code>Proxy.revocable()</code> <a class="header-anchor" href="#proxy-revocable" aria-label="Permalink to &quot;\`Proxy.revocable()\`&quot;">​</a></h3><p><code>Proxy.revocable()</code>方法返回一个可取消的 <code>Proxy</code> 实例</p><blockquote><p>举个 🌰</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> target </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> handler </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> proxy</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> revoke </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> Proxy</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">revocable</span><span style="color:#BABED8;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> handler)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">proxy</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">foo </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">123</span></span>
<span class="line"><span style="color:#BABED8;">proxy</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">foo </span><span style="color:#676E95;font-style:italic;">// 123</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">revoke</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#BABED8;">proxy</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">foo </span><span style="color:#676E95;font-style:italic;">// TypeError: Revoked</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>上面代码中，当执行<code>revoke</code>函数之后，再访问<code>Proxy</code>实例，就会抛出一个错误。</p><ul><li><p><code>Proxy.revocable()</code>方法返回一个对象，该对象的<code>proxy</code>属性是<code>Proxy</code>实例，<code>revoke</code>属性是一个函数，可以取消<code>Proxy</code>实例。</p></li><li><p><code>Proxy.revocable()</code>的一个使用场景是，目标对象不允许直接访问，必须通过代理访问，一旦访问结束，就收回代理权，不允许再次访问。</p></li></ul><h3 id="this" tabindex="-1"><code>this</code> <a class="header-anchor" href="#this" aria-label="Permalink to &quot;\`this\`&quot;">​</a></h3><p>虽然 <code>Proxy</code> 可以代理针对目标对象的访问，但它不是目标对象的透明代理，即不做任何拦截的情况下，也无法保证与目标对象的行为一致。</p>`,20)),n("p",null,[n("strong",null,[p(e,{color:"FF9D00"},{default:o(()=>s[0]||(s[0]=[a("主要原因就是在 "),n("code",null,"Proxy",-1),a(" 代理的情况下，目标对象内部的"),n("code",null,"this",-1),a("关键字会指向 "),n("code",null,"Proxy",-1),a(" 代理。")])),_:1})])]),s[4]||(s[4]=l(`<blockquote><p>举个 🌰</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> target </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#82AAFF;">m</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">proxy</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> handler </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> proxy </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#BABED8;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> handler)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">m</span><span style="color:#BABED8;">() </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#BABED8;">proxy</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">m</span><span style="color:#BABED8;">() </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">注意 ⚠️</p><ul><li>有些原生对象的内部属性，只有通过正确的 this 才能拿到，所以 Proxy 也无法代理这些原生对象的属性</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> target </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> handler </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> proxy </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#BABED8;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> handler)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">proxy</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDate</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// TypeError: this is not a Date object.</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>getDate()</code>方法只能在<code>Date</code>对象实例上面拿到，如果<code>this</code>不是<code>Date</code>对象实例就会报错。</p><p>这时，<code>this</code>绑定原始对象，就可以解决这个问题。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> target </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2015-01-01</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> handler </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">get</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">prop</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">prop</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">getDate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">getDate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">prop</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> proxy </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#BABED8;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> handler)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">proxy</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDate</span><span style="color:#BABED8;">() </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li><code>Proxy</code> 拦截函数内部的<code>this</code>，指向的是<code>handler</code>对象</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> handler </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">receiver</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">handler</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">key</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#82AAFF;">set</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">handler</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">target</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">value</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> proxy </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{},</span><span style="color:#BABED8;"> handler)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">proxy</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">foo</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Hello, foo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">proxy</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">foo </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div></div><h2 id="reflect" tabindex="-1"><code>Reflect</code> <a class="header-anchor" href="#reflect" aria-label="Permalink to &quot;\`Reflect\`&quot;">​</a></h2><p>设计<code>Reflect</code>对象的目的</p><ul><li><p>将<code>Object</code>对象的一些明显属于语言内部的方法（比如<code>Object.defineProperty</code>），放到<code>Reflect</code>对象上。</p></li><li><p>修改某些<code>Object</code>方法的返回结果，让其变得更合理，比如，<code>Object.defineProperty(obj, name, desc)</code>在无法定义属性时，会抛出一个错误，而<code>Reflect.defineProperty(obj, name, desc)</code>则会返回<code>false</code>。</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 老写法</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">property</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">attributes</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// success</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#BABED8;"> (e) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// failure</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 新写法</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> (Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#BABED8;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> property</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> attributes)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// success</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// failure</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ul><li>让<code>Object</code>操作都变成函数行为，增加可读性，方便使用</li></ul><p>某些<code>Object</code>操作是命令式，比如<code>name in obj</code>和<code>delete obj[name]</code>，而<code>Reflect.has(obj, name)</code>和<code>Reflect.deleteProperty(obj, name)</code>让它们变成了函数行为</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 老写法</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">assign</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">in</span><span style="color:#BABED8;"> Object </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 新写法</span></span>
<span class="line"><span style="color:#BABED8;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">has</span><span style="color:#BABED8;">(Object</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">assign</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><code>Reflect</code>对象的方法与<code>Proxy</code>对象的方法一一对应，只要是<code>Proxy</code>对象的方法，就能在<code>Reflect</code>对象上找到对应的方法。</li></ul>`,11)),n("p",null,[n("strong",null,[p(e,{color:"FF9D00"},{default:o(()=>s[1]||(s[1]=[a("这就让"),n("code",null,"Proxy",-1),a("对象可以方便地调用对应的"),n("code",null,"Reflect",-1),a("方法，完成默认行为，作为修改行为的基础。也就是说，不管"),n("code",null,"Proxy",-1),a("怎么修改默认行为，你总可以在"),n("code",null,"Reflect",-1),a("上获取默认行为")])),_:1})])]),s[5]||(s[5]=l(`<blockquote><p>举个 🌰</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> target </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">steins gate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> handler </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">prop</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Getting property </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">prop</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">prop</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 调用 Reflect 来执行默认行为</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> proxy </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#BABED8;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> handler)</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(proxy</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name) </span><span style="color:#676E95;font-style:italic;">// 输出 &quot;Getting property name steins gate&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>`,2)),n("p",null,[n("strong",null,[p(e,{color:"FF9D00"},{default:o(()=>s[2]||(s[2]=[n("code",null,"Reflect.get",-1),a(" 可以用于保持原有的对象行为，只是在执行前添加一些自定义逻辑")])),_:1})])]),s[6]||(s[6]=l('<h3 id="reflect的静态方法" tabindex="-1"><code>Reflect</code>的静态方法 <a class="header-anchor" href="#reflect的静态方法" aria-label="Permalink to &quot;`Reflect`的静态方法&quot;">​</a></h3><ul><li><p><code>Reflect.get(target, prop, receiver)</code>：<code>Reflect.get</code>方法用于读取一个对象的属性。它接受三个参数： <code>target</code>（目标对象）、<code>prop</code>（属性）、<code>receiver</code>（代理对象）。</p></li><li><p><code>Reflect.set(target, prop, value, receiver)</code>：<code>Reflect.set</code>方法用于设置一个对象的属性。它接受四个参数： <code>target</code>（目标对象）、<code>prop</code>（属性）、<code>value</code>（值）、<code>receiver</code>（代理对象）。</p></li><li><p><code>Reflect.has(target, prop)</code>：<code>Reflect.has</code>方法用于判断一个对象是否具有某个属性。它接受两个参数： <code>target</code>（目标对象）、<code>prop</code>（属性）。</p></li><li><p><code>Reflect.deleteProperty(target, prop)</code>：<code>Reflect.deleteProperty</code>方法用于删除一个对象的属性。它接受两个参数： <code>target</code>（目标对象）、<code>prop</code>（属性）。</p></li><li><p><code>Reflect.construct(target, args)</code>：<code>Reflect.construct</code>方法用于构造函数的调用。它接受两个参数： <code>target</code>（目标对象）、<code>args</code>（参数数组）。</p></li><li><p><code>Reflect.apply(target, thisArg, args)</code>：<code>Reflect.apply</code>方法用于调用函数。它接受三个参数： <code>target</code>（目标函数）、<code>thisArg</code>（函数的 this 上下文）、<code>args</code>（参数数组）。</p></li><li><p><code>Reflect.defineProperty(target, prop, attributes)</code>：<code>Reflect.defineProperty</code>方法用于定义一个对象的属性。它接受三个参数： <code>target</code>（目标对象）、<code>prop</code>（属性）、<code>attributes</code>（属性描述符）。</p></li><li><p><code>Reflect.getOwnPropertyDescriptor(target, prop)</code>：<code>Reflect.getOwnPropertyDescriptor</code>方法用于获取一个对象的属性描述符。它接受两个参数： <code>target</code>（目标对象）、<code>prop</code>（属性）。</p></li><li><p><code>Reflect.isExtensible(target)</code>：<code>Reflect.isExtensible</code>方法用于判断一个对象是否是可扩展的。它接受一个参数： <code>target</code>（目标对象）。</p></li><li><p><code>Reflect.preventExtensions(target)</code>：<code>Reflect.preventExtensions</code>方法用于阻止一个对象被扩展。它接受一个参数： <code>target</code>（目标对象）。</p></li><li><p><code>Reflect.ownKeys(target)</code>：<code>Reflect.ownKeys</code>方法用于返回一个对象的所有属性，包括自身的属性和继承的属性。它接受一个参数： <code>target</code>（目标对象）。</p></li><li><p><code>Reflect.setPrototypeOf(target, prototype)</code>：<code>Reflect.setPrototypeOf</code>方法用于设置一个对象的原型。它接受两个参数： <code>target</code>（目标对象）、<code>prototype</code>（原型对象）。</p></li><li><p><code>Reflect.getPrototypeOf(target)</code>：<code>Reflect.getPrototypeOf</code>方法用于获取一个对象的原型。它接受一个参数： <code>target</code>（目标对象）。</p></li></ul><h2 id="proxy-与-reflect-的关系" tabindex="-1"><code>Proxy</code> 与 <code>Reflect</code> 的关系 <a class="header-anchor" href="#proxy-与-reflect-的关系" aria-label="Permalink to &quot;`Proxy` 与 `Reflect` 的关系&quot;">​</a></h2><ul><li><p><code>Proxy</code> 提供了对象操作的拦截能力，而 <code>Reflect</code> 提供了对应的默认行为。两者结合可以很方便地对对象行为进行增强或修改。</p></li><li><p>使用 <code>Proxy</code> 可以拦截对象的操作，而使用 <code>Reflect</code> 可以调用对象的默认操作，从而确保对象行为不会被完全修改。</p></li><li><p><code>Reflect</code> 可以作为 <code>Proxy</code> 捕获器中的默认处理器，当我们想在自定义行为中保留对象的某些默认行为时，可以直接调用 <code>Reflect</code>。</p></li></ul>',4))])}const m=c(D,[["render",i]]);export{u as __pageData,m as default};
