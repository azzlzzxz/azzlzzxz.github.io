import{_ as a,o as n,c as l,N as o}from"./chunks/framework.2f525601.js";const F=JSON.parse('{"title":"浏览器相关的 API","description":"","frontmatter":{},"headers":[],"relativePath":"base/browser/api.md","lastUpdated":1729591560000}'),p={name:"base/browser/api.md"};function e(c,s,t,r,i,y){return n(),l("div",null,s[0]||(s[0]=[o(`<h1 id="浏览器相关的-api" tabindex="-1">浏览器相关的 API <a class="header-anchor" href="#浏览器相关的-api" aria-label="Permalink to &quot;浏览器相关的 API&quot;">​</a></h1><h2 id="history-api" tabindex="-1">History API <a class="header-anchor" href="#history-api" aria-label="Permalink to &quot;History API&quot;">​</a></h2><p><code>History API</code> 通过 <code>history</code> 全局对象提供了对浏览器会话的历史记录，你可以在用户的历史记录中来回导航，而且可以操作历史记录栈中的内容。</p><div class="tip custom-block"><p class="custom-block-title">注意 ⚠️</p><p><code>History API</code> 仅在主线程<code>（Window）</code>中可用。无法在 <code>Worker</code> 上下文中访问它。</p></div><ul><li><code>history.back()</code></li></ul><p>在历史记录中向后跳转，这和用户点击浏览器的回退<code>（Back）</code>按钮的效果相同。</p><ul><li><code>history.forward()</code></li></ul><p>在历史记录中向前跳转，这和用户点击浏览器的回退<code>（Forward）</code>按钮的效果相同。</p><ul><li><code>history.go()</code></li></ul><p>可以用 <code>go()</code>方法从会话历史记录中加载某一特定页面，该页面使用与当前页面的相对位置来标识（当前页面的相对位置为 0）。</p><blockquote><p>举个 🌰</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">history</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">go</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">history</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">go</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 以下语句都具有刷新页面的效果</span></span>
<span class="line"><span style="color:#BABED8;">history</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">go</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">history</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">go</span><span style="color:#BABED8;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><code>history.length</code></li></ul><p>可以通过查看 <code>length</code> 属性的值来确定历史记录栈中的页面数量。</p><ul><li><code>history.pushState()</code></li></ul><p>向浏览器的会话历史栈增加了一个条目。</p><ul><li><code>history.replaceState()</code></li></ul><p>用新的条目替换当前的历史记录条目。</p><ul><li><code>popstate</code></li></ul><p><code>popstate</code> 事件只会在浏览器某些行为下触发，比如点击后退按钮（或者在 <code>JavaScript</code> 中调用 <code>history.back()</code> 方法）。在同一文档的两个历史记录条目之间导航会触发该事件。</p><blockquote><p>举个 🌰</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">popstate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">位置：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">location</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">，状态：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#BABED8;">(event</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">state)</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">history</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pushState</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">page</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">},</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">标题 1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">?page=1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">history</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pushState</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">page</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">},</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">标题 2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">?page=2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">history</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replaceState</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">page</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">},</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">标题 3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">?page=3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">history</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">back</span><span style="color:#BABED8;">() </span><span style="color:#676E95;font-style:italic;">// http://example.com/example.html?page=1，状态：{&quot;page&quot;:1}”</span></span>
<span class="line"><span style="color:#BABED8;">history</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">back</span><span style="color:#BABED8;">() </span><span style="color:#676E95;font-style:italic;">// http://example.com/example.html，状态：null”</span></span>
<span class="line"><span style="color:#BABED8;">history</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">go</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">2</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// http://example.com/example.html?page=3，状态：{&quot;page&quot;:3}”</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li><code>hashchange</code></li></ul><p>当 <code>URL</code> 的片段标识符（以 <code>#</code> 符号开头和之后的 <code>URL</code> 部分）更改时，将触发 <code>hashchange</code> 事件。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><ul><li><code>history.pushState</code>、<code>history.replaceState</code> 这种并不会触发 <code>popstate</code>，只有在 <code>history</code> 之间导航才会触发。</li></ul></div><div class="info custom-block"><p class="custom-block-title">相关资料</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History_API" target="_blank" rel="noreferrer"><u>MDN | History_API</u></a></li></ul></div><h2 id="requestidlecallback" tabindex="-1">requestIdleCallback <a class="header-anchor" href="#requestidlecallback" aria-label="Permalink to &quot;requestIdleCallback&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback" target="_blank" rel="noreferrer"><u>MDN requestIdleCallback API 🚀</u></a></p><ul><li>我们希望快速响应用户，让用户觉得够快，不能阻塞用户的交互。</li><li><code>requestIdleCallback</code> 使开发者能够在主事件循环上执行后台和低优先级工作，而不会影响延迟关键事件，如动画和输入响应。</li><li>正常帧任务完成后没超过 <code>16.6 ms</code>，说明时间有富余，此时就会执行 <code>requestIdleCallback</code> 里注册的任务。</li></ul><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/requestIdleCallback.jpeg" alt="requestIdleCallback"></p><div class="tip custom-block"><p class="custom-block-title">缺点</p><ol><li>兼容性问题 <a href="https://caniuse.com/?search=requestIdleCallback" target="_blank" rel="noreferrer"><u>requestIdleCallback 的兼容性 🚀</u></a>。</li><li>执行任务的帧空闲时间不可控（<code>React</code> 自己实现了一个 <code>requestIdleCallback</code>）。</li><li>一个任务就是最小的执行单位，不能被打断，所以有可能会被卡住。</li></ol></div><blockquote><p>举个例子 🌰</p></blockquote><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;!</span><span style="color:#F07178;">DOCTYPE</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">en</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">charset</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">UTF-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">http-equiv</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">X-UA-Compatible</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">IE=edge</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">viewport</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">width=device-width, initial-scale=1.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">requestIdleCallback</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">duration</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">duration</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> ) </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> works </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">第1个任务开始</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">// 任务执行时间少过当前帧的空余时间，就会等待当前任务执行完毕，当前帧才会结束</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#82AAFF;">sleep</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">第1个任务结束</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">第2个任务开始</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#82AAFF;">sleep</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">20</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">第2个任务结束</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">第3个任务开始</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#82AAFF;">sleep</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">20</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">第3个任务结束</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">      ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#82AAFF;">requestIdleCallback</span><span style="color:#BABED8;">(workLoop)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">workLoop</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">deadline</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//因为一帧是16.6ms，浏览器执行完高优先级之后，如果还有时间，会执行workLoop,timeRemaining获取此帧剩下的时间</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">本帧的剩余时间是</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">deadline</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">timeRemaining</span><span style="color:#F07178;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//如果没有剩余时间了，就会跳出循环</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">deadline</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">timeRemaining</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">works</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">// 还有空闲时间 &amp;&amp; 还有任务没执行</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#82AAFF;">performUnitOfWork</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//如果还有剩余任务</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">works</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">只剩下</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">deadline</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">timeRemaining</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">ms，不够了，等待浏览器下次空闲 的时候再帮我调用</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          )</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#82AAFF;">requestIdleCallback</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">workLoop</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">performUnitOfWork</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//取出任务数组中的第一个任务，并移除第一个任务</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">work</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">works</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">shift</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">work</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br></div></div><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> 本帧的剩余时间是 </span><span style="color:#F78C6C;">5.4</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> 第1个任务开始</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> 第1个任务结束</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> 只剩下0ms，不够了，等待浏览器下次空闲 的时候再帮我调用</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> 本帧的剩余时间是 </span><span style="color:#F78C6C;">3.3</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> 第2个任务开始</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> 第2个任务结束</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> 只剩下0ms，不够了，等待浏览器下次空闲 的时候再帮我调用</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> 本帧的剩余时间是 </span><span style="color:#F78C6C;">50</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> 第3个任务开始</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> 第3个任务结束</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="requestanimationframe" tabindex="-1">requestAnimationFrame <a class="header-anchor" href="#requestanimationframe" aria-label="Permalink to &quot;requestAnimationFrame&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/window/requestAnimationFrame" target="_blank" rel="noreferrer"><u>MDN requestAnimationFrame API 🚀</u></a></p><p><code>requestAnimationFrame</code> 是 HTML5 提供的一种 API，用于在浏览器的下一次重绘之前执行回调函数。它是用于优化动画效果的工具，能够帮助你实现更加流畅、高效的动画。相比于传统的 <code>setTimeout</code> 或 <code>setInterval</code> 来控制动画帧的更新，<code>requestAnimationFrame</code> 更加精确，因为它可以根据浏览器的刷新频率来调整动画的节奏，从而避免掉帧或者卡顿。</p><blockquote><p>举个例子 🌰</p></blockquote><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> start</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">step</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">timestamp</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">start</span><span style="color:#F07178;">) </span><span style="color:#BABED8;">start</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">timestamp</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 记录起始时间</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">progress</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">timestamp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">start</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 计算已经过去的时间</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">element</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">box</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 控制 box 的水平移动，随着时间前进</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">element</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">style</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">transform</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">translateX(</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">min</span><span style="color:#BABED8;">(progress </span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">200</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">px)</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 如果动画未完成，继续调用 requestAnimationFrame</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">progress</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2000</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">requestAnimationFrame</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">step</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 启动动画</span></span>
<span class="line"><span style="color:#82AAFF;">requestAnimationFrame</span><span style="color:#BABED8;">(step)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><ul><li><strong><code>timestamp</code></strong>：<code>requestAnimationFrame</code> 的回调函数接收一个参数 <code>timestamp</code>，这个参数是浏览器传递的当前回调函数执行的时间点。它表示自页面加载完成以来的毫秒数，可以用来计算动画进行的时间。</li></ul><h3 id="如何取消-requestanimationframe" tabindex="-1">如何取消 <code>requestAnimationFrame</code> <a class="header-anchor" href="#如何取消-requestanimationframe" aria-label="Permalink to &quot;如何取消 \`requestAnimationFrame\`&quot;">​</a></h3><p>你可以使用 <code>cancelAnimationFrame</code> 来停止动画的执行：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> animationId </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">requestAnimationFrame</span><span style="color:#BABED8;">(step)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">stopAnimation</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">cancelAnimationFrame</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">animationId</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 停止动画</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="主要特点" tabindex="-1">主要特点 <a class="header-anchor" href="#主要特点" aria-label="Permalink to &quot;主要特点&quot;">​</a></h3><ul><li><p><strong>节能高效</strong>： <code>requestAnimationFrame</code> 是由浏览器来决定回调函数的执行时机，通常与显示器的刷新频率相匹配（例如每秒 60 帧，60Hz 显示器）。这避免了不必要的重绘，降低了 CPU 和 GPU 的开销。</p></li><li><p><strong>避免多余的重绘</strong>： 如果页面当前处于后台标签页或未显示状态，<code>requestAnimationFrame</code> 会暂停回调，从而节省系统资源。而 <code>setTimeout</code> 或 <code>setInterval</code> 则会继续执行动画，即使用户看不到变化。</p></li><li><p><strong>帧同步</strong>：<code>requestAnimationFrame</code> 允许动画与浏览器的刷新频率保持同步，从而使动画更加平滑。</p></li></ul><h3 id="requestanimationframe-vs-settimeout-setinterval" tabindex="-1"><code>requestAnimationFrame</code> vs <code>setTimeout</code>/<code>setInterval</code> <a class="header-anchor" href="#requestanimationframe-vs-settimeout-setinterval" aria-label="Permalink to &quot;\`requestAnimationFrame\` vs \`setTimeout\`/\`setInterval\`&quot;">​</a></h3><ul><li><p><strong>精度</strong>：<code>requestAnimationFrame</code> 能够根据浏览器的刷新率精确同步动画帧，而 <code>setTimeout</code>/<code>setInterval</code> 依赖于 <code>JavaScript</code> 引擎的定时机制，可能会不够精确。</p></li><li><p><strong>节能</strong>：当页面不在前台显示时，<code>requestAnimationFrame</code> 会自动暂停执行，从而节省 <code>CPU</code> 资源；而 <code>setTimeout</code> 和 <code>setInterval</code> 仍然会继续运行。</p></li><li><p><strong>性能优化</strong>：<code>requestAnimationFrame</code> 内置性能优化机制，与浏览器的渲染周期紧密结合，避免了不必要的渲染和计算，从而提高了性能和动画流畅度。</p></li></ul><h2 id="messagechannel" tabindex="-1"><code>MessageChannel</code> <a class="header-anchor" href="#messagechannel" aria-label="Permalink to &quot;\`MessageChannel\`&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MessageChannel" target="_blank" rel="noreferrer"><u>MDN MessageChannel API 🚀</u></a></p><p><code>MessageChannel</code> 是 <code>Web API</code> 中的一部分，提供了一种在不同的浏览上下文（如不同的 <code>window</code>、<code>iframe</code>、<code>worker</code> 等）之间传递消息的方式。它允许两个独立的环境之间建立一个双向通信通道，使用 <code>MessageChannel</code> 的两个 <code>MessagePort</code> 对象来发送和接收消息。</p><h3 id="messagechannel-的构成" tabindex="-1"><code>MessageChannel</code> 的构成 <a class="header-anchor" href="#messagechannel-的构成" aria-label="Permalink to &quot;\`MessageChannel\` 的构成&quot;">​</a></h3><ul><li><p><strong><code>MessageChannel</code></strong>：这是主要的对象，用来创建一个新的消息通道。</p></li><li><p><strong><code>MessagePort</code></strong>：当你创建一个 <code>MessageChannel</code> 对象时，它会生成两个 <code>MessagePort</code> 对象。两个端口对象可以分别发送和接收消息。它们通过 <code>postMessage</code> 方法发送消息，使用 <code>onmessage</code> 事件处理程序接收消息。</p></li><li><p><strong><code>postMessage</code></strong>：使用 <code>postMessage</code> 方法发送消息到另一端的 <code>MessagePort</code>。</p></li><li><p><strong><code>onmessage</code></strong>：用于接收消息的事件处理程序。</p></li></ul><blockquote><p>举个例子 🌰</p></blockquote><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 创建一个新的 MessageChannel 实例</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> channel </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">MessageChannel</span><span style="color:#BABED8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取两个 MessagePort</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> port1 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> channel</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">port1</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> port2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> channel</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">port2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 监听 port1 的消息</span></span>
<span class="line"><span style="color:#BABED8;">port1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onmessage</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Message received at port1:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">event</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">data</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 监听 port2 的消息</span></span>
<span class="line"><span style="color:#BABED8;">port2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onmessage</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Message received at port2:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">event</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">data</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用 postMessage 发送消息</span></span>
<span class="line"><span style="color:#BABED8;">port1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">postMessage</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello from port1!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">port2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">postMessage</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello from port2!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><blockquote><p>输出</p></blockquote><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Message</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">received</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">at</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">port1:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Hello</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">from</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">port2!</span></span>
<span class="line"><span style="color:#FFCB6B;">Message</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">received</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">at</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">port2:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Hello</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">from</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">port1!</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="主要特点-1" tabindex="-1">主要特点 <a class="header-anchor" href="#主要特点-1" aria-label="Permalink to &quot;主要特点&quot;">​</a></h3><ul><li><strong>双向通信</strong>：每个 <code>MessagePort</code> 可以同时发送和接收消息。</li><li><strong>跨上下文</strong>：可以在不同的浏览器上下文之间（如 <code>window</code>、<code>iframe</code>、<code>web worker</code>）进行通信。</li><li><strong>无副作用的通信</strong>：与 <code>DOM</code> 没有直接的关系，消息传递机制是独立的，避免了性能开销。</li></ul><h3 id="messagechannel-和-postmessage-的区别" tabindex="-1"><code>MessageChannel</code> 和 <code>postMessage</code> 的区别 <a class="header-anchor" href="#messagechannel-和-postmessage-的区别" aria-label="Permalink to &quot;\`MessageChannel\` 和 \`postMessage\` 的区别&quot;">​</a></h3><ul><li><code>postMessage</code> 是全局的跨上下文通信方式，允许页面与同源或跨域的 <code>iframe</code> 以及同域的 worker 之间通信。</li><li><code>MessageChannel</code> 提供的是独立的、基于 <code>MessagePort</code> 的双向通信通道，可以通过传递 <code>MessagePort</code> 对象，在多个上下文中使用。</li></ul><h2 id="localstorage" tabindex="-1"><code>LocalStorage</code> <a class="header-anchor" href="#localstorage" aria-label="Permalink to &quot;\`LocalStorage\`&quot;">​</a></h2><p>生命周期：除非被手动清除，否则将会永久保存</p><p>大小：可以保存<code>5MB</code>的信息</p><div class="tip custom-block"><p class="custom-block-title">注意</p><ul><li><p><code>localStorage</code> 写入的时候，如果超出容量会报错，但之前保存的数据不会丢失。</p></li><li><p><code>localStorage</code> 存储容量快要满的时候，<code>getItem</code> 方法性能会急剧下降。</p></li></ul></div><div class="tip custom-block"><p class="custom-block-title">为什么同域下多窗口间<code>localStorage</code>能共享</p><ul><li>同源策略</li></ul><p>由于同源策略，来自同一个源的多个窗口或标签页可以访问同一份 <code>localStorage</code> 数据</p><ul><li>持久性存储</li></ul><p><code>localStorage</code> 数据是持久的，意味着它不会在浏览器关闭时被清除。相同源的多个窗口或标签页在访问 <code>localStorage</code> 时，它们实际上都在访问同一份存储数据。</p><p>因此，如果一个窗口或标签页对 <code>localStorage</code> 进行了写入，其他窗口或标签页可以立即读取到这些数据。</p><ul><li>事件通知</li></ul><p>当某个窗口或标签页对 <code>localStorage</code> 进行了更改，其他同源的窗口或标签页会收到 <code>storage</code> 事件通知。这使得它们能够及时更新自己对 <code>localStorage</code> 的读取，保持数据的一致性。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 在一个窗口中对 localStorage 进行更改</span></span>
<span class="line"><span style="color:#BABED8;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setItem</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在其他窗口中监听 storage 事件</span></span>
<span class="line"><span style="color:#BABED8;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">storage</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">event</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">New value: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">event</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">newValue</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></div><div class="info custom-block"><p class="custom-block-title">相关资料</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage" target="_blank" rel="noreferrer"><u><code>LocalStorage | MDN</code></u></a></li></ul></div><h2 id="sessionstorage" tabindex="-1"><code>SessionStorage</code> <a class="header-anchor" href="#sessionstorage" aria-label="Permalink to &quot;\`SessionStorage\`&quot;">​</a></h2><p>生命周期：仅在当前网页会话下有效，关闭页面或浏览器后就会被清除</p><p>大小：可以保存<code>5MB</code>的信息</p><div class="tip custom-block"><p class="custom-block-title">多窗口之间<code>sessionStorage</code>不能共享状态吗？</p><p>答案：<strong>多窗口之间<code>sessionStorage</code>不可以共享状态！！！但是在特定场景下新开的页面会复制之前页面的<code>sessionStorage</code>！！</strong></p></div><blockquote><p>举个 🌰</p></blockquote><ul><li>现有页面<code>A</code>，在页面<code>A</code>中执行</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">window</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">sessionStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setItem</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pageA_1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>在页面中有个<code>button</code>按钮，点击按钮触发 <code>window.open(&quot;同源页面&quot;)</code>，现得到新开的页面<code>B</code>，在<code>B</code>中执行</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">window</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">sessionStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getItem</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pageA_1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">//拿到的结果是 &quot;123&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>在页面<code>A</code>中继续执行</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">window</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">sessionStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setItem</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pageA_1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">456</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">) (之前的pageA_1设置的值是 ‘</span><span style="color:#F78C6C;">123</span><span style="color:#BABED8;">’ )</span></span>
<span class="line"><span style="color:#BABED8;">window</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">sessionStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setItem</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pageA_2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">789</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>在页面<code>B</code>中再次尝试获取</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">window</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">sessionStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getItem</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pageA_1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">//拿到的结果还是 &quot;123&quot;</span></span>
<span class="line"><span style="color:#BABED8;">window</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">sessionStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getItem</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pageA_2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">//拿到的结果是 null</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>在该标签或窗口打开一个新页面时会复制顶级浏览会话的上下文作为新会话的上下文，所以，在打开新的同源页面时，会复制之前页面的<code>sessionStorage</code></strong></p><div class="tip custom-block"><p class="custom-block-title">对于<code>a</code>标签，新打开的页面</p><p>在<code>Chrome 89</code>的版本，<code>Stop cloning sessionStorage for windows opened with noopener</code>，而<code>a</code>标签<code>_blank</code>默认 <code>rel=&quot;noopener&quot;</code> 。</p><p>所以<code>a</code>标签需要加入<code>rel=&quot;opener&quot;</code> 而才能像<code>window.open(&quot;同源页面&quot;)\`\`这种方式新开的页面会复制之前的sessionStorage</code></p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://...</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">target</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">_blank</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">opener</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Link</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><a href="https://stackoverflow.com/questions/57330335/why-is-sessionstorage-preserved-across-multiple-tabs" target="_blank" rel="noreferrer"><u>Why is sessionStorage preserved across multiple tabs | stackoverflow</u></a></li></ul></div><div class="tip custom-block"><p class="custom-block-title">总结</p><ul><li><p>页面会话在浏览器打开期间一直保持，并且重新加载或恢复页面仍会保持原来的页面会话。</p></li><li><p>在新标签或窗口打开一个页面时会复制顶级浏览会话的上下文作为新会话的上下文。</p></li><li><p>打开多个相同的 <code>URL</code> 的 <code>Tabs</code> 页面，会创建各自的  <code>sessionStorage</code>。</p></li><li><p>关闭对应浏览器标签或窗口，会清除对应的  <code>sessionStorage</code>。</p></li></ul></div><div class="info custom-block"><p class="custom-block-title">相关资料</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage" target="_blank" rel="noreferrer"><u><code>SessionStorage | MDN</code></u></a></li></ul></div><h2 id="web-storage" tabindex="-1"><code>Web Storage</code> <a class="header-anchor" href="#web-storage" aria-label="Permalink to &quot;\`Web Storage\`&quot;">​</a></h2><p><code>localStorage</code> 与 <code>sessionStorage</code>两者其实都拥有一个相同的原型对象 <code>Storage</code>。</p><p><code>Web Storage</code> 包含如下两种机制：</p><ul><li><code>sessionStorage</code>  为每一个给定的源维持一个独立的存储区域，该存储区域在页面会话期间可用（即只要浏览器处于打开状态，包括页面重新加载和恢复）。</li><li><code>localStorage</code>  同样的功能，但是在浏览器关闭，然后重新打开后数据仍然存在。</li></ul><p>作为 <code>Web Storage API</code> 的接口，<code>Storage</code> 提供了访问特定域名下的会话存储或本地存储的功能。</p><p>例如，可以添加、修改或删除存储的数据项。</p><h3 id="属性-方法" tabindex="-1">属性 &amp; 方法 <a class="header-anchor" href="#属性-方法" aria-label="Permalink to &quot;属性 &amp; 方法&quot;">​</a></h3><ul><li><code>Storage.length</code>  只读</li></ul><p>返回一个整数，表示存储在  <code>Storage</code>  对象中的数据项数量。</p><ul><li><code>Storage.key()</code></li></ul><p>该方法接受一个数值 <code>n</code> 作为参数，并返回存储中的第 <code>n</code> 个键名。</p><ul><li><code>Storage.getItem()</code></li></ul><p>该方法接受一个键名作为参数，返回键名对应的值。</p><ul><li><code>Storage.setItem()</code></li></ul><p>该方法接受一个键名和值作为参数，将会把键值对添加到存储中，如果键名存在，则更新其对应的值。</p><ul><li><code>Storage.removeItem()</code></li></ul><p>该方法接受一个键名作为参数，并把该键名从存储中删除。</p><ul><li><code>Storage.clear()</code></li></ul><p>调用该方法会清空存储中的所有键名。</p><div class="info custom-block"><p class="custom-block-title">相关资料</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Storage_API" target="_blank" rel="noreferrer"><u>Web Storage API | MDN</u></a></li></ul></div><h2 id="indexeddb" tabindex="-1"><code>indexedDB</code> <a class="header-anchor" href="#indexeddb" aria-label="Permalink to &quot;\`indexedDB\`&quot;">​</a></h2><p><code>IndexedDB</code> 是一种底层 <code>API</code>，用于在客户端存储大量的结构化数据（也包括文件/二进制大型对象（<code>blobs</code>））。该 <code>API</code> 使用索引实现对数据的高性能搜索。</p><p>使用 <code>IndexedDB</code> 执行的操作是异步执行的，以免阻塞应用程序。</p><p>应用场景：适合存储大量结构化数据，如离线数据、文件缓存等。</p><p>存储大小：浏览器不同，但通常是 <code>50MB</code> 到<code>几百 MB</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> request </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> indexedDB</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">MyDatabase</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="info custom-block"><p class="custom-block-title">相关资料</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API" target="_blank" rel="noreferrer"><u>MDN indexDB API 🚀</u></a></li></ul></div>`,110)]))}const d=a(p,[["render",e]]);export{F as __pageData,d as default};
