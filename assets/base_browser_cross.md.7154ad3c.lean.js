import{_ as a,o as n,c as l,N as o}from"./chunks/framework.6198c6ab.js";const D=JSON.parse('{"title":"浏览器的跨域","description":"","frontmatter":{},"headers":[],"relativePath":"base/browser/cross.md","lastUpdated":1726148341000}'),e={name:"base/browser/cross.md"};function p(c,s,t,r,i,d){return n(),l("div",null,s[0]||(s[0]=[o(`<h1 id="浏览器的跨域" tabindex="-1">浏览器的跨域 <a class="header-anchor" href="#浏览器的跨域" aria-label="Permalink to &quot;浏览器的跨域&quot;">​</a></h1><p>当请求<code>URL</code>的协议、域名、端口三者之间任意一个与当前页面<code>url</code>不同即为跨域</p><div class="tip custom-block"><p class="custom-block-title">前置知识 URL</p><p><code>URL（Uniform Resource Locator）</code>是互联网上的一种资源的简洁标识。它是一种特定格式的字符串，可以指向互联网上的任何资源。</p><p>以下是一个 URL 的完整示例：<code>http://username:password@www.example.com:80/path/to/myfile.html?key1=value1&amp;key2=value2#SomewhereInTheDocument</code></p><p>这个<code>URL</code>的各个部分具有以下含义：</p><ul><li><code>http:</code> 这部分被称为协议或者方案。它定义了如何访问和互动资源。常见的协议有<code>HTTP</code>, <code>HTTPS</code>, <code>FTP</code>, <code>FILE</code>等。</li><li><code>user:pass</code> 这是可选部分，用于需要身份验证的服务。</li><li><code>site.com</code> 这部分被称为主机名或者域名。它定义了我们想要访问的服务器的地址。这可以是一个<code>IP</code>地址或者一个注册的域名。</li><li><code>:80</code> 这部分是可选的，称为端口号。它定义了服务器上的哪个服务我们要访问。如果未指定，那么默认端口是协议的标准端口（例如，对于<code>HTTP</code>是<code>80</code>，<code>HTTPS</code>是<code>443</code>）。</li><li><code>/pa/th</code> 这部分是路径，它指定了服务器上的哪个具体资源我们想要访问。</li><li><code>?q=val</code> 这部分是查询字符串，用于发送参数到服务器。它以问号开始，参数以键值对的形式存在，并用<code>&amp;</code>符号分隔。</li><li><code>#hash</code> 这部分被称为片段或者锚点，它指定了网页中的一个位置。当你访问一个<code>URL</code>时，浏览器会尝试滚动到这个位置。</li></ul><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/url_cross.webp" alt="url_cross"></p></div><div class="tip custom-block"><p class="custom-block-title">为什么会产生跨域 - 浏览器的同源策略</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="noreferrer"><u>同源策略</u></a>是浏览器一个重要的安全策略，它用于限制一个<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Origin" target="_blank" rel="noreferrer"><u>源</u></a> <code>(origin)</code> 的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介</p><p>同源是指两个 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/URL" target="_blank" rel="noreferrer"><u><code>URL</code></u></a> 的 协议、域名(子域名 + 主域名)、端口号 都相同，否则就会出现跨域</p></div><h2 id="同源策略的限制" tabindex="-1">同源策略的限制 <a class="header-anchor" href="#同源策略的限制" aria-label="Permalink to &quot;同源策略的限制&quot;">​</a></h2><ul><li>限制向非同源地址发送<code>Ajax</code>请求</li><li>限制读取非同源网页的<code>cookie</code>、<code>localStorage</code>、<code>indexedDB</code></li><li>限制跨源脚本 <code>API</code> 访问，无法获取 <code>DOM</code></li></ul><h2 id="跨域解决方案" tabindex="-1">跨域解决方案 <a class="header-anchor" href="#跨域解决方案" aria-label="Permalink to &quot;跨域解决方案&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">常用的跨域解决方案</p><ul><li><code>CORS</code></li><li><code>JSONP</code></li><li><code>Nginx</code>反向代理</li><li><code>Node</code>中间件</li><li><code>WebSocket</code></li><li><code>window.postMesssage</code></li><li><code>window.name</code></li><li><code>document.domain</code></li></ul></div><h3 id="cors跨源资源共享" tabindex="-1"><code>CORS</code>跨源资源共享 <a class="header-anchor" href="#cors跨源资源共享" aria-label="Permalink to &quot;\`CORS\`跨源资源共享&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS" target="_blank" rel="noreferrer"><u><code>CORS</code></u></a>是一种基于 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/HTTP" target="_blank" rel="noreferrer"><u>HTTP</u></a> 头的机制，该机制允许浏览器向跨源服务器发出 <code>XMLHttpRequest</code> 请求，从而解决了 <code>AJAX</code> 只能同源使用的限制。</p><blockquote><p><code>CORS</code> 需要浏览器和服务器同时支持，目前所有浏览器均已支持，只需服务器配置即可使用</p></blockquote><p>浏览器将<code>CORS</code>请求分成两类：简单请求<code>（simple request）</code>和非简单请求<code>（not-simple-request）</code></p><h4 id="简单请求" tabindex="-1">简单请求 <a class="header-anchor" href="#简单请求" aria-label="Permalink to &quot;简单请求&quot;">​</a></h4><div class="tip custom-block"><p class="custom-block-title">同时满足下列三大条件，就属于简单请求</p><ul><li>请求方式只能是： <ul><li><code>GET</code></li><li><code>POST</code></li><li><code>HEAD</code></li></ul></li><li><code>HTTP</code> 请求头限制这几种字段： <ul><li><code>Accept</code></li><li><code>Accept-Language</code></li><li><code>Content-Language</code></li><li><code>Content-Type</code></li><li><code>Last-Event-ID</code></li></ul></li><li><code>Content-type</code> 只能取： <ul><li><code>application/x-www-form-urlencoded</code></li><li><code>multipart/form-data</code></li><li><code>text/plain</code></li></ul></li><li>请求中的任意 <code>XMLHttpRequestUpload</code> 对象均没有注册任何事件监听器(使用 <code>XMLHttpRequest.upload</code> <code>属性访问XMLHttpRequestUpload</code> 对象)</li><li>请求中没有使用 <code>ReadableStream</code> 对象</li></ul></div><p><strong>简单请求基本流程</strong></p><ol><li><p>对于简单请求，浏览器直接请求，会在请求头信息中，增加一个 <code>origin</code> 字段，来说明本次请求来自哪个源（协议 + 域名 + 端口）。</p></li><li><p>服务器根据<code>origin</code>这个值，来决定是否同意该请求，服务器返回的响应会多几个头信息字段，三个与 <code>CORS</code> 请求相关，都是以 <code>Access-Control-</code>开头。</p></li></ol><div class="tip custom-block"><p class="custom-block-title">简单请求响应头中的 <code>CORS</code> 字段</p><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Origin" target="_blank" rel="noreferrer"><u><code>Access-Control-Allow-Origin</code></u></a>：（必须），<code>*</code> (表示接受任意域名的请求)，还可以指定域名。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials" target="_blank" rel="noreferrer"><u><code>Access-Control-Allow-Credentials</code></u></a>：（可选），是个布尔值，表示响应标头告诉浏览器服务器是否允许 HTTP 跨源请求携带凭据，例如： <code>cookie</code>、<code>TLS</code>客户端证书、包含用户名和密码的认证标头，（注意：如果 <code>Access-Control-Allow-Origin</code> 字段设置<code>*</code>，此字段设为 <code>true</code> 无效）。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Headers" target="_blank" rel="noreferrer"><u><code>Access-Control-Allow-Headers</code></u></a>：（可选）， 用于响应包含了 <code>Access-Control-Request-Headers</code> 的预检请求，以指示在实际请求中可以使用哪些 <code>HTTP</code> 标头，里面可以获取 <code>Cache-Control</code>、<code>Content-Type</code>、<code>Content-Language</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code>，如果想要拿到其他字段，就必须在 <code>Access-Control-Expose-Headers</code>里面指定。</li></ol></div><p><code>CORS</code> 请求默认不发送 <code>Cookie</code>，如果需要发送需要满足如下条件：</p><ul><li>服务器必须设置 <code>Access-Control-Allow-Credentials</code>: <code>true</code></li><li><code>Access-Control-Allow-Origin</code> 字段不能为 <code>*</code></li><li><code>AJAX</code> 请求的配置项需设置 <code>withCredentials = true</code></li></ul><h4 id="非简单请求" tabindex="-1">非简单请求 <a class="header-anchor" href="#非简单请求" aria-label="Permalink to &quot;非简单请求&quot;">​</a></h4><p>非简单请求是对那种对服务器有特殊要求的请求，比如请求方式是 <code>PUT</code> 或者 <code>DELETE</code>，或者 <code>Content-Type</code> 字段类型是 <code>application/json</code>，都会在正式通信之前，增加一次 <code>HTTP</code> 请求，称之为<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Preflight_request" target="_blank" rel="noreferrer"><u>预检请求</u></a>，用于获取服务器是否允许该实际请求，同时避免跨域请求对服务器的用户数据产生预期之外的影响。</p><div class="tip custom-block"><p class="custom-block-title">预检请求</p><p>浏览器会先询问服务器，当前网页所在域名是否在服务器的许可名单之中，服务器允许之后，浏览器会发出正式的 <code>XMLHttpRequest</code> 请求，否则会报错。（备注：如果预检请求没有通过，就不会发正式请求，需要服务器设置）。</p><p>预检请求用的请求方法是 <code>OPTIONS</code> 表示这个请求是用来询问的</p><ul><li>在预检请求请求头信息里会包含如下字段 <ul><li><code>Origin</code>: 表示本次请求来自哪个源</li><li><code>Access-Control-Request-Method</code>: 用于列出浏览器的 <code>CORS</code> 请求会用到哪些 <code>HTTP</code> 方法</li><li><code>Access-Control-Request-Headers</code>(可选): 指定浏览器 <code>CORS</code> 请求会额外发送的头信息字段</li></ul></li><li>服务器通过后会在预检请求响应头中设置如下字段 <ul><li><code>Access-Control-Allow-Origin</code></li><li><code>Access-Control-Allow-Credentials</code>(可选)</li><li><code>Access-Control-Allow-Methods</code>: 表示服务器支持的所有跨域请求的方法(为了避免多次预检请求)</li><li><code>Access-Control-Allow-Headers</code>: 表示服务器支持的所有头信息字段，不限于浏览器在预检中请求的字段</li><li><code>Access-Control-Max-Age</code>(可选): 用来指定本次预检请求的有效期单位为秒，在有效期内将不发出另一条预检请求</li></ul></li></ul></div><p>一旦服务器通过了预检请求，以后每次浏览器正常的 <code>CORS</code> 请求，就都跟简单请求一样会有一个 <code>Origin</code> 头信息字段。服务器的回应也都会有一个 <code>Access-Control-Allow-Origin</code> 头信息字段</p><h3 id="jsonp" tabindex="-1"><code>JSONP</code> <a class="header-anchor" href="#jsonp" aria-label="Permalink to &quot;\`JSONP\`&quot;">​</a></h3><p><code>JSONP</code> 是利用 <code>&lt;script&gt;</code> 标签没有跨域限制的漏洞，当前源可以得到从其他来源动态产生的 <code>JSON</code> 数据</p><p><strong><code>JSONP</code> 请求过程流程</strong></p><ol><li>前端定义一个解析的回调函数</li><li>创建 <code>script</code> 标签，其 <code>src</code> 指向接口地址并拼接好参数和回调函数名</li><li>后端处理数据并将其拼接到前端传入的回调函数中(拼接好的数据必须是一个合法的 <code>JavaScript</code> 脚本 )</li><li>浏览器执行后端返回的 <code>JavaScript</code> 脚本代码(调用定义好的回调函数)并删除刚创建的 <code>script</code> 标签</li></ol><div class="tip custom-block"><p class="custom-block-title">JSONP 跨域优缺点</p><ul><li>优点: 实现简单，兼容性好</li><li>缺点 <ul><li>只支持 <code>GET</code> 请求</li><li>容易遭受 <code>XSS</code> 攻击</li></ul></li></ul></div><h3 id="nginx反向代理" tabindex="-1"><code>Nginx</code>反向代理 <a class="header-anchor" href="#nginx反向代理" aria-label="Permalink to &quot;\`Nginx\`反向代理&quot;">​</a></h3><p><a href="https://nginx.org/en/docs/njs/" target="_blank" rel="noreferrer"><u><code>Nginx</code></u></a>是一个开源的、高性能的、可扩展的 <code>HTTP</code> 和反向代理服务器。它也可以用作邮件代理服务器和通用的 <code>TCP/UDP</code> 代理服务器。</p><p><code>Nginx</code>可以作为一个<code>HTTP</code>服务器，提供静态资源服务，也可以作为应用服务器（例如<code>PHP</code>, <code>Python</code>等）的前端服务器。</p><p>要使用 <code>Nginx</code> 来处理跨域问题，你需要配置一些响应头。你可以在 <code>Nginx</code> 的配置文件中进行配置，通常这个配置文件位于 <code>/etc/nginx/nginx.conf</code> 或 <code>/etc/nginx/sites-available/default</code>，大部分情况只需要配置 <code>http</code> 模块下的 <code>server</code> 即可，一般初始文件，只有一个 <code>server</code>，如果你需要 <code>Nginx</code> 同时开启不同的端口或域名，就需要写多个 <code>server</code>。</p><h4 id="server" tabindex="-1"><code>server</code> <a class="header-anchor" href="#server" aria-label="Permalink to &quot;\`server\`&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">server</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#FFCB6B;">listen</span><span style="color:#BABED8;">       </span><span style="color:#F78C6C;">80</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">   </span><span style="color:#676E95;font-style:italic;"># 端口号</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#FFCB6B;">server_name</span><span style="color:#BABED8;">  </span><span style="color:#C3E88D;">localhost</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">   </span><span style="color:#676E95;font-style:italic;"># server name 默认 localhost</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;">#access_log  logs/host.access.log  main;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#FFCB6B;">location</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">/</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">{</span><span style="color:#BABED8;">   </span><span style="color:#676E95;font-style:italic;"># 访问路径匹配规则</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#FFCB6B;">root</span><span style="color:#BABED8;">   </span><span style="color:#C3E88D;">html</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#FFCB6B;">index</span><span style="color:#BABED8;">  </span><span style="color:#C3E88D;">index.html</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">index.htm</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#FFCB6B;">error_page</span><span style="color:#BABED8;">   </span><span style="color:#F78C6C;">500</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">502</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">503</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">504</span><span style="color:#BABED8;">  </span><span style="color:#C3E88D;">/50x.html</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;"># 错误处理</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#FFCB6B;">location</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">=</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">/50x.html</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#FFCB6B;">root</span><span style="color:#BABED8;">   </span><span style="color:#C3E88D;">html</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  }</span></span>
<span class="line"><span style="color:#BABED8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>里面比较重要的是 <code>location</code> 模块，反向代理的主要工作也是配置 <code>location</code></p><h4 id="location" tabindex="-1"><code>location</code> <a class="header-anchor" href="#location" aria-label="Permalink to &quot;\`location\`&quot;">​</a></h4><p><code>location</code> 配置项定义了一条访问 <code>Nginx</code> 服务某一路径时的匹配规则，<code>location</code> 后面紧跟的是匹配的路径，这个路径可以直接写绝对路径，可以写正则匹配。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 当访问 http://localhost/api1 时命中</span></span>
<span class="line"><span style="color:#FFCB6B;">location</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">/api1</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;"># ...</span></span>
<span class="line"><span style="color:#BABED8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 当访问 http://localhost/api2 和 http://localhost/api 3 时命中</span></span>
<span class="line"><span style="color:#FFCB6B;">location</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">~</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">^/</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">api2/api3</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;"># ...</span></span>
<span class="line"><span style="color:#BABED8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># ~ 符号表示接下来的是一个正则表达式。Nginx 会使用这个正则表达式来匹配请求的 URL 路径</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># .json$ 是一个正则表达式，它匹配任何以 .json 结尾的 URL 路径</span></span>
<span class="line"><span style="color:#FFCB6B;">location</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">~</span><span style="color:#BABED8;"> \\.</span><span style="color:#C3E88D;">json</span><span style="color:#BABED8;">$ </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;"># ...</span></span>
<span class="line"><span style="color:#BABED8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="proxy-pass" tabindex="-1"><code>proxy_pass</code> <a class="header-anchor" href="#proxy-pass" aria-label="Permalink to &quot;\`proxy_pass\`&quot;">​</a></h4><p><code>location</code> 里有多个配置项，其中一个是 <code>proxy_pass</code>，意思是将当前命中的 <code>Nginx</code> 接口（例如：<code>http://localhost/api</code>）代理到其他 <code>server</code> 的接口，如下例子就是将 <code>http://localhost/api</code> 代理到 <code>https://azzlzzxz.com/api</code></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">location</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">/api</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#FFCB6B;">proxy_pass</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">https://azzlzzxz.com</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">注意 ⚠️</p><ul><li>在写 <code>proxy_pass</code> 不能随便在目标地址后加 <code>/</code>，如果你在地址末尾加了 <code>/</code>，则最终代理是这样的：</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">location</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">/api</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#FFCB6B;">proxy_pass</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">https://azzlzzxz.com/</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;"># 将会被代理到 https://azzlzzxz.com/，后面没有 /api</span></span>
<span class="line"><span style="color:#BABED8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>不加 <code>/</code>，则最终代理是这样的，访问 <code>Nginx</code> 命中的 <code>/api</code>，<code>Nginx</code> 也会自动帮你拼接上去</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">location</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">/api</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#FFCB6B;">proxy_pass</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">https://azzlzzxz.com</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;"># 将会代理到 https://azzlzzxz.com/api</span></span>
<span class="line"><span style="color:#BABED8;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></div><h4 id="add-header" tabindex="-1"><code>add_header</code> <a class="header-anchor" href="#add-header" aria-label="Permalink to &quot;\`add_header\`&quot;">​</a></h4><p><code>location</code> 配置中的 <code>add_header</code>选项，表示 <code>Nginx</code> 将在 <code>response</code> 中添加一些额外的响应头信息给客户端。众所周知，开启跨域支持是需要服务端配置 <code>Access-Control-Allow-Origin</code>、<code>Access-Control-Allow-Methods</code>、<code>Access-Control-Allow-Headers</code> 这些请求头的，那么既然有了 <code>Nginx</code> 做了中间层代理服务，就算 <code>server</code> 不给我们开启这些，我们完全也能够自给自足：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">location</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">/api</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#FFCB6B;">add_header</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Access-Control-Allow-Origin</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;">*</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">always</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#FFCB6B;">add_header</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Access-Control-Allow-Headers</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;">*</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#FFCB6B;">add_header</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Access-Control-Allow-Methods</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">GET, POST, PUT, OPTIONS</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#FFCB6B;">proxy_pass</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">https://azzlzzxz.com</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>一般来说，如果请求过程中出现 <code>40X</code> 、<code>50X</code>的错误，<code>Nginx</code>将不会设置 <code>Access-Control-Allow-Origin</code> 继而导致跨域失败，所以需要在后面再加个 <code>always</code> 告诉 <code>Nginx</code> 不管怎样，都给我设置这个响应头。</p><h3 id="node中间件" tabindex="-1"><code>Node</code>中间件 <a class="header-anchor" href="#node中间件" aria-label="Permalink to &quot;\`Node\`中间件&quot;">​</a></h3><p><a href="https://github.com/chimurai/http-proxy-middleware#readme" target="_blank" rel="noreferrer"><u><code>http-proxy-middleware</code></u></a> 是一个用于 <code>Node.js</code> 的中间件，它可以在你的应用中创建一个反向代理。这在处理跨域请求、添加负载均衡、或者在开发环境中连接到不同的服务等场景中非常有用。</p><p>你可以使用 <code>createProxyMiddleware</code> 函数来创建一个代理。这个函数接收一个配置对象，你可以在这个对象中指定代理的目标、路径重写规则等选项：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> createProxyMiddleware </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http-proxy-middleware</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/api</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#82AAFF;">createProxyMiddleware</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">target</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://localhost:4000</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">changeOrigin</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">pathRewrite</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">^/api</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在 👆 例子中，所有以 <code>/api</code> 开头的请求都会被代理到 <code>http://localhost:4000，并且路径中的</code> <code>/api</code> 会被去掉。</p><p>👇 是 <code>createProxyMiddleware</code> 配置对象的一些常用选项：</p><ul><li><p><code>target</code>：这是代理的目标服务器的 <code>URL</code>。</p></li><li><p><code>changeOrigin</code>：如果设置为 <code>true</code>，代理服务器会在请求转发时修改请求头中的 <code>host</code> 为目标服务器的 <code>host</code>。</p></li><li><p><code>pathRewrite</code>：这是一个对象，它定义了如何重写路径。例如，你可以将路径中的 <code>/api</code> 替换为 <code>/</code>。</p></li></ul><h3 id="webscoket" tabindex="-1"><code>WebScoket</code> <a class="header-anchor" href="#webscoket" aria-label="Permalink to &quot;\`WebScoket\`&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="noreferrer"><u><code>WebSocket</code></u></a>： 一种浏览器与服务器进行全双工通讯的网络技术，也就是客户端和服务器之间存在持久的连接，而且双方都可以随时开始发送数据。</p><p>这种方式本质没有使用了 <code>HTTP</code> 的响应头, 因此也没有跨域的限制。</p><h3 id="window-postmessage" tabindex="-1"><code>window.postMessage</code> <a class="header-anchor" href="#window-postmessage" aria-label="Permalink to &quot;\`window.postMessage\`&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage" target="_blank" rel="noreferrer"><u><code>window.postMessage()</code></u></a> 方法可以安全地实现跨源通信。通常，对于两个不同页面的脚本，只有当执行它们的页面位于具有相同的协议（通常为 <code>https）</code>，端口号（<code>443</code> 为 <code>https</code> 的默认值），以及主机 (两个页面的模数 <code>Document.domain</code>设置为相同的值) 时，这两个脚本才能相互通信。<code>window.postMessage()</code> 方法提供了一种受控机制来规避此限制。</p><p>它可用于解决以下方面的问题：</p><ul><li>页面和其打开的新窗口的数据传递</li><li>多窗口之间消息传递</li><li>页面与嵌套的<code>iframe</code>消息传递</li></ul><h3 id="window-name" tabindex="-1"><code>window.name</code> <a class="header-anchor" href="#window-name" aria-label="Permalink to &quot;\`window.name\`&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/name" target="_blank" rel="noreferrer"><u><code>window.name</code></u></a>是一个旧的<code>HTML</code>属性，它允许在同一浏览器窗口或者<code>Tab</code>中的不同页面之间传递数据。它有一个非常有趣的特性：当你改变窗口的<code>URL</code>时，<code>window.name</code>的值会保持不变。这个特性使得<code>window.name</code>可以被用于跨域通信。</p><h3 id="document-domain" tabindex="-1"><code>document.domain</code> <a class="header-anchor" href="#document-domain" aria-label="Permalink to &quot;\`document.domain\`&quot;">​</a></h3><p><code>document.domain</code>是一种在同一主域名下的不同子域之间实现跨域通信的方法。这种方法的基本思想是通过将每个子域的 <code>document.domain</code> 设置为相同的主域名，使得这些子域在 <code>JavaScript</code> 中被认为是同源的。</p><p>举个 🌰</p><blockquote><p><code>a.html</code></p></blockquote><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;!</span><span style="color:#F07178;">DOCTYPE</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">en</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">charset</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">UTF-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">viewport</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">width=device-width, initial-scale=1.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">origin</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">iframe</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myIframe</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://test.azzlzzxz.com:4000/b.html</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">style</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">display: none;</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    &gt;&lt;/</span><span style="color:#F07178;">iframe</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">      document</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">domain </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">azzlzzxz.com</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#BABED8;">      window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onload</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">iframe</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myIframe</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">iframe</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">contentWindow</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">container</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">innerHTML</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><blockquote><p><code>b.html</code></p></blockquote><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;!</span><span style="color:#F07178;">DOCTYPE</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">en</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">charset</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">UTF-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">viewport</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">width=device-width, initial-scale=1.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">origin</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">container</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">container</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">      document</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">domain </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">azzlzzxz.com</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>`,71)]))}const F=a(e,[["render",p]]);export{D as __pageData,F as default};
