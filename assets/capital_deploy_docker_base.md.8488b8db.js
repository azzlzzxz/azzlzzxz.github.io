import{_ as e,o,c,Q as d}from"./chunks/framework.a5035e6c.js";const r="/assets/docker.158511b4.png",u=JSON.parse('{"title":"Docker","description":"","frontmatter":{},"headers":[],"relativePath":"capital/deploy/docker/base.md","lastUpdated":1703224094000}'),a={name:"capital/deploy/docker/base.md"},t=d('<h1 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-label="Permalink to &quot;Docker&quot;">​</a></h1><p><code>Docker</code> 是一个开源的应用容器引擎，让开发者打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 <code>Linux</code> 机器上，也可以实现虚拟化。</p><p><code>Docker</code> 容器是完全使用沙箱机制，相互之间不会有任何接口。更重要的是，容器性能开销极低。</p><p><img src="'+r+'" alt="docker"></p><h2 id="docker-的应用场景" tabindex="-1">Docker 的应用场景 <a class="header-anchor" href="#docker-的应用场景" aria-label="Permalink to &quot;Docker 的应用场景&quot;">​</a></h2><ul><li><p><code>Web</code> 应用的自动化打包和发布。</p></li><li><p>自动化测试和持续集成、发布。</p></li><li><p>在服务型环境中部署和调整数据库或其他的后台应用。</p></li><li><p>从头编译或者扩展现有的 <code>OpenShift</code> 或 <code>Cloud Foundry</code> 平台来搭建自己的 <code>PaaS</code> 环境。</p></li></ul><h2 id="docker-组件" tabindex="-1">Docker 组件 <a class="header-anchor" href="#docker-组件" aria-label="Permalink to &quot;Docker 组件&quot;">​</a></h2><ul><li><code> Docker Client：</code> <code>Docker </code> 客户端，通过命令行或者其他工具使用 <code>Docker API</code> 进行操作。</li><li><code> Docker Image：</code> <code>Docker </code> 镜像，用来打包应用程序及其依赖。</li><li><code> Docker Container：</code> <code>Docker </code> 容器，是 <code>Docker</code> 运行时环境中的一个进程，是应用运行的环境。</li><li><code> Docker Compose：</code> <code>Docker </code> 编排，用于定义和运行多容器 <code>Docker</code> 应用程序。</li><li><code> Docker File：</code> <code>Docker</code> 镜像构建文件，用来定义 <code>Docker</code> 镜像的内容。</li></ul><h2 id="通过-docker-destop-直观学习-docker" tabindex="-1">通过 Docker Destop 直观学习 Docker <a class="header-anchor" href="#通过-docker-destop-直观学习-docker" aria-label="Permalink to &quot;通过 Docker Destop 直观学习 Docker&quot;">​</a></h2>',9),i=[t];function l(k,s,n,p,D,_){return o(),c("div",null,i)}const m=e(a,[["render",l]]);export{u as __pageData,m as default};
