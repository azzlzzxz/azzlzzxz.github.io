import{_ as c,B as r,o as t,c as i,N as l,x as n,D as o,z as p,a}from"./chunks/framework.87264d68.js";const B=JSON.parse('{"title":"Fiber","description":"","frontmatter":{},"headers":[],"relativePath":"rsource/react/introduce.md","lastUpdated":1726681308000}'),F={name:"rsource/react/introduce.md"};function y(d,s,b,D,u,m){const e=r("font");return t(),i("div",null,[s[2]||(s[2]=l('<h1 id="fiber" tabindex="-1">Fiber <a class="header-anchor" href="#fiber" aria-label="Permalink to &quot;Fiber&quot;">​</a></h1><h2 id="为什么要有fiber" tabindex="-1">为什么要有<code>Fiber</code>？ <a class="header-anchor" href="#为什么要有fiber" aria-label="Permalink to &quot;为什么要有`Fiber`？&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">前置知识</p><ul><li><code>JavaScript</code>是单线程的，而浏览器是多进程的（每个进程有可能包含多个线程）</li></ul><p>浏览器是多进程的，其中的渲染进程要处理包括 <code>事件系统</code>、<code>定时器/延时器</code>、<code>网络请求</code>、<code>GUI 渲染线程</code>（<code>GUI</code> 负责页面的布局和绘制） 等各种线程任务，而<code>JavaScript</code>的线程是可以操作<code>DOM</code>的，这就使得<code>JavaScript</code>线程和浏览器的<code>GUI 渲染线程</code>存在互斥的问题。</p><p>如果 <code>GUI 渲染线程</code> 和 <code>JavaScript</code> 线程同时工作，会导致页面的渲染难以预测，例如：染线程刚绘制好的一段文字，<code>JavaScript</code> 线程可能会将其修改为其他文字，这样页面可能会渲染混乱、样式错乱、甚至导致页面崩溃</p><ul><li><code>JavaScript</code> 线程会阻塞浏览器渲染</li></ul><p>当下主流浏览器的刷新频率为 <code>60Hz</code>，即每 <code>16.6ms（1000ms / 60Hz）</code>浏览器就会刷新一次，而在这 <code>16.6ms</code> 内，需要执行<code>JavaScript</code> 脚本、渲染线程也会执行，同时在互斥的机制下，如果 <code>JavaScript</code> 长时间的占据主线程，就会导致 <strong>渲染层面的更新就不得不长时间地等待，界面长时间不更新，带给用户的体验就是所谓的“卡顿”</strong>。</p></div><p>在 <code>React 16</code> 之前，<code>React</code> 使用的是基于 <code>栈递归</code> 的协调算法，这种算法会在一次渲染过程中递归遍历整个组件树，并且<code>不会被打断</code>，这种递归的方式会带来性能上的瓶颈，尤其是在组件树很大时，渲染时间就会变长，导致浏览器出现卡顿。</p><p><code>Fiber</code> 是 <code>React 16</code> 引入的一种新的协调算法，用于解决 <code>React</code> 在复杂 <code>UI</code> 渲染时的性能问题。</p>',5)),n("p",null,[n("strong",null,[o(e,{color:"FF9D00"},{default:p(()=>s[0]||(s[0]=[a("将递归的无法中断的更新重构为异步的可中断更新")])),_:1})])]),s[3]||(s[3]=l(`<h2 id="什么是-fiber" tabindex="-1">什么是 <code>Fiber</code>？ <a class="header-anchor" href="#什么是-fiber" aria-label="Permalink to &quot;什么是 \`Fiber\`？&quot;">​</a></h2><ul><li><code>Fiber</code> 作为架构</li></ul><p>在旧的架构中，<code>Reconciler（协调器）</code> 采用递归的方式执行，无法中断，节点数据保存在递归的调用栈中，被称为 <code>stack reconciler</code>。</p><p>在新的架构中，<code>Reconciler</code> 是基于 <code>Fiber</code> 实现的，节点数据保存在 <code>Fiber</code> 中，被称为 <code>Fiber reconciler</code>。</p><ul><li><code>Fiber</code> 作为静态数据结构</li></ul><p>每个<code>Fiber 节点</code> 对应一个 <code>React.element</code>，保存了该组件的类型<code>（函数组件 / 类组件 / 原生组件）</code>、对应的<code>DOM</code>节点等信息。</p><div class="info custom-block"><p class="custom-block-title"><code>Fiber</code> 作为静态数据结构</p><ul><li>React 目前的做法是使用链表, 每个虚拟节点内部表示为一个 <code>Fiber</code></li><li>从顶点开始遍历</li><li>如果有第一个儿子，先遍历第一个儿子</li><li>如果没有第一个儿子，标志着此节点遍历完成</li><li>如果有弟弟遍历弟弟</li><li>如果有没有下一个弟弟，返回父节点标识完成父节点遍历，如果有叔叔遍历叔叔</li><li>没有父节点遍历结束</li></ul></div><ul><li><code>Fiber</code> 作为动态工作单元</li></ul><p><code>Fiber</code> 保存着节点的动态信息，包括本次更新中改变的状态、节点更新信息、节点更新优先级、副作用标签等。</p><p>每次执行完一个执行单元, <code>React</code> 就会检查现在还剩多少时间，如果没有时间就将控制权让出去。</p><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/fiber_task.jpeg" alt="fiber_task"></p><div class="tip custom-block"><p class="custom-block-title"><code>Fiber Reconciler</code> 的作用</p><ul><li>能够把可中断的任务切片处理。</li><li>能够调整优先级，重置并复用任务。</li><li>能够在父元素与子元素之间交错处理，以支持 React 中的布局。</li><li>能够在 <code>render()</code> 中返回多个元素。</li><li>更好地支持错误边界。</li></ul><p><a href="https://zh-hans.legacy.reactjs.org/docs/codebase-overview.html#fiber-reconciler" target="_blank" rel="noreferrer"><u>Fiber Reconciler - React 官网</u></a></p></div><h2 id="fiber的数据结构" tabindex="-1"><code>Fiber</code>的数据结构 <a class="header-anchor" href="#fiber的数据结构" aria-label="Permalink to &quot;\`Fiber\`的数据结构&quot;">​</a></h2><p><code>Fiber</code> 上有 <code>DOM</code>、状态数据、副作用等标识</p><blockquote><p>源码地址 <a href="https://github.com/azzlzzxz/react-source-code/blob/main/packages/react-reconciler/src/ReactFiber.js#L136" target="_blank" rel="noreferrer"><u><code>function FiberNode</code></u></a></p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">*</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#BABED8;font-style:italic;">tag</span><span style="color:#676E95;font-style:italic;">  fiber 类型：函数组件（0）、类组件（1）、原生标签（5）</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">*</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#BABED8;font-style:italic;">pendingProps</span><span style="color:#676E95;font-style:italic;"> 新属性，等待处理或生效的属性</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">*</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#676E95;font-style:italic;"> 唯一标识</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">FiberNode</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#BABED8;font-style:italic;">tag</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">WorkTag</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#BABED8;font-style:italic;">pendingProps</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">mixed</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#BABED8;font-style:italic;">mode</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">TypeOfMode</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">fiber</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/*! --------------- 作为静态数据结构 --------------- */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">tag</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// Fiber 对应组件的类型</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// key</span></span>
<span class="line"><span style="color:#F07178;">    elementType</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 大部分情况同type，某些情况不同，比如FunctionComponent使用React.memo包裹</span></span>
<span class="line"><span style="color:#F07178;">    type</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// fiber类型，来自于虚拟DOM节点的type：div、span、p</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 每个虚拟DOM --&gt; fiber节点 --&gt; 真实DOM</span></span>
<span class="line"><span style="color:#F07178;">    stateNode</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// // 此fiber对应的真实DOM节点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 用于连接其他Fiber节点形成Fiber树</span></span>
<span class="line"><span style="color:#F07178;">    return</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 指向父级 Fiber 节点</span></span>
<span class="line"><span style="color:#F07178;">    child</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 指向第一个子 Fiber 节点</span></span>
<span class="line"><span style="color:#F07178;">    sibling</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 指向下一个兄弟 Fiber 节点</span></span>
<span class="line"><span style="color:#F07178;">    index</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    ref</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span></span>
<span class="line"><span style="color:#F07178;">    refCleanup</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/*! --------------- 作为动态工作单元 --------------- */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 虚拟DOM会提供pendingProps，用来创建Fiber节点的属性</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">pendingProps</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 等待生效的属性</span></span>
<span class="line"><span style="color:#F07178;">    memoizedProps</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 已经生效的属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 每个Fiber 身上可能还有更新队列</span></span>
<span class="line"><span style="color:#F07178;">    updateQueue</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    memoizedState</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// Fiber 状态</span></span>
<span class="line"><span style="color:#F07178;">    dependencies</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">mode</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Effects 副作用相关属性</span></span>
<span class="line"><span style="color:#F07178;">    flags</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">NoFlags</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 副作用的标识，标识对此Fiber节点进行何种操作（二进制增删改操作）</span></span>
<span class="line"><span style="color:#F07178;">    subtreeFlags</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">NoFlags</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 子节点对应的副作用标识</span></span>
<span class="line"><span style="color:#F07178;">    deletions</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 调度优先级相关</span></span>
<span class="line"><span style="color:#F07178;">    lanes</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">NoLanes</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    childLanes</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">NoLanes</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 指向该 Fiber 节点对应的双缓存 Fiber 节点</span></span>
<span class="line"><span style="color:#F07178;">    alternate</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">fiber</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div><h2 id="fiber-双缓存" tabindex="-1"><code>Fiber</code> 双缓存 <a class="header-anchor" href="#fiber-双缓存" aria-label="Permalink to &quot;\`Fiber\` 双缓存&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">双缓存</p><p>当我们用 <code>canvas</code> 绘制动画时，每一帧绘制前都会调用 <code>ctx.clearRect</code> 清除上一帧的画面，如果当前帧画面计算量比较大，导致清除上一帧画面到绘制当前帧画面之间有较长间隙，就会出现白屏。</p><p>为了解决这个问题，我们可以在内存中绘制当前帧动画，绘制完毕后直接用当前帧替换上一帧画面，由于省去了两帧替换间的计算时间，不会出现从白屏到出现画面的闪烁情况。</p><p>双缓存技术是在内存或显存中开辟一块与屏幕一样大小的储存空间，作为缓存屏幕。将下一帧要显示的图像绘制到这个缓存屏幕上，在显示的时候将虚拟屏幕中的数据复制到可见区域里去。</p><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/double_buffering.jpg" alt="double_buffering"></p></div>`,18)),n("p",null,[n("strong",null,[o(e,{color:"#FF9D00"},{default:p(()=>s[1]||(s[1]=[n("code",null,"React",-1),a(" 使用双缓存来完成 "),n("code",null,"Fiber",-1),a(" 树的构建和替换 ---> 对应着 "),n("code",null,"DOM",-1),a(" 树的创建和更新")])),_:1})])]),s[4]||(s[4]=l('<h3 id="双缓存-fiber-树" tabindex="-1">双缓存 <code>Fiber</code> 树 <a class="header-anchor" href="#双缓存-fiber-树" aria-label="Permalink to &quot;双缓存 `Fiber` 树&quot;">​</a></h3><p>在 <code>React</code> 中最多会同时存在两个 <code>Fiber树</code></p><ul><li><p>当前屏幕上显示内容对应的 <code>Fiber树</code>称为 <code>current Fiber树</code></p></li><li><p>正在内存中构建的 <code>Fiber树</code>称为 <code>workInProgress Fiber树</code></p></li></ul><p><code>React</code> 应用的根节点通过使 <code>current</code> 指针在不同 <code>Fiber树</code> 的 <code>rootFiber</code>间切换来完成 <code>current Fiber树</code>指向的切换</p><p>当 <code>workInProgress Fiber树</code>构建完成交给 <code>Renderer</code> 渲染在页面上后，应用跟节点的 <code>current</code> 指针指向 <code>workInProgress Fiber树</code>，此时 <code>workInProgress Fiber树</code> 就变成 current Fiber 树。</p><p>每次状态更新都会产生新的 <code>workInProgress Fiber树</code>，通过<code>current</code> 与 <code>workInProgress</code> 的替换，完成<code>DOM</code>更新。</p><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/fiber_tree_double.jpg" alt="fiber_tree_double"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><code>current Fiber 树</code> 中的 <code>Fiber 节点</code> 被称为 <code>current fiber</code></li><li><code>workInProgress Fiber 树</code> 中的 <code>Fiber 节点</code> 被称为 <code>workInProgress fiber</code></li><li><code>current Fiber 树</code> 中的 <code>Fiber 节点</code> 都有 <code>alternate</code> 属性指向 <code>workInProgress Fiber 树</code> 中对应的 <code>Fiber 节点</code></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">currentFiber</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">alternate </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> workInProgressFiber</span></span>\n<span class="line"><span style="color:#BABED8;">workInProgressFiber</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">alternate </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> currentFiber</span></span>\n<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></div><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/react/react_fiber_%E5%8F%8C%E7%BC%93%E5%AD%98.jpg" alt="双缓存"></p><div class="tip custom-block"><p class="custom-block-title">相关资料</p><ul><li><a href="https://react.iamkasong.com/process/doubleBuffer.html" target="_blank" rel="noreferrer"><u>React 技术揭秘</u></a></li></ul></div>',10))])}const E=c(F,[["render",y]]);export{B as __pageData,E as default};
