import{_ as l,o as n,c as a,N as o}from"./chunks/framework.2673bc46.js";const F=JSON.parse('{"title":"浏览器渲染原理","description":"","frontmatter":{},"headers":[],"relativePath":"base/browser/browser.md","lastUpdated":1727687371000}'),e={name:"base/browser/browser.md"};function p(c,s,t,r,i,d){return n(),a("div",null,s[0]||(s[0]=[o(`<h1 id="浏览器渲染原理" tabindex="-1">浏览器渲染原理 <a class="header-anchor" href="#浏览器渲染原理" aria-label="Permalink to &quot;浏览器渲染原理&quot;">​</a></h1><h2 id="浏览器中的主要的-5-个进程" tabindex="-1">浏览器中的主要的 5 个进程 <a class="header-anchor" href="#浏览器中的主要的-5-个进程" aria-label="Permalink to &quot;浏览器中的主要的 5 个进程&quot;">​</a></h2><ul><li>浏览器进程</li></ul><p>负责显示浏览器的用户界面元素（如地址栏、前进/后退按钮等），管理用户交互、创建和管理其他进程，以及负责持久化存储（如 <code>Cookie</code>、<code>LocalStorage</code> 等）。</p><ul><li>渲染进程</li></ul><p>每个标签页通常都有独立的渲染进程，负责解析 <code>HTML</code>、<code>CSS</code> 和 <code>JavaScript</code>，生成 <code>DOM</code> 树、<code>CSSOM</code> 树、渲染树，并执行布局、绘制操作。渲染进程还负责页面的 <code>JavaScript</code> 代码执行。</p><ul><li>网络进程</li></ul><p>负责网络资源的加载，包括发起 <code>HTTP</code> 请求、接收响应并处理资源缓存，最终将 <code>HTML</code>、<code>CSS</code>、<code>JavaScript</code> 等传递给渲染进程进行解析。</p><ul><li><code>GPU</code> 进程</li></ul><p>负责加速页面的 <code>2D</code> 和 <code>3D</code> 绘制，帮助提升渲染性能，同时加速页面合成、动画和视频的硬件加速处理。</p><ul><li>插件进程</li></ul><p>用于处理浏览器中的插件，每个插件通常在独立的进程中运行，以保证浏览器的安全性和稳定性。</p><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/browser.png" alt="browser"></p><h2 id="渲染流程" tabindex="-1">渲染流程 <a class="header-anchor" href="#渲染流程" aria-label="Permalink to &quot;渲染流程&quot;">​</a></h2><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/render.png" alt="render"></p><ol><li>浏览器无法直接使用<code>HTML</code>，需要将<code>HTML</code>转化成<code>DOM</code>树<code>（document）</code>。</li><li>浏览器无法解析纯文本的<code>CSS</code>样式，需要对<code>CSS</code>进行解析，解析成<code>CSSDOM（Object Model）</code>，浏览器通过 <code>DOM</code> 和 <code>CSSOM</code> 来计算页面的样式信息</li><li>样式计算<code>（Style Calculation）</code>：浏览器根据 <code>CSS</code> 规则和继承机制，计算出 <code>DOM</code> 树中每个节点的具体样式。</li><li>构建渲染（布局）树，将 <code>DOM</code> 树中可见节点（不包括不可见节点，如 <code>display: none</code>），添加到渲染树中，并开始布局<code>（Layout）</code>计算，每个节点的大小和位置会被计算出来。</li><li>根据页面的需要，渲染树会被分成多个图层<code>（Layer）</code>，每个图层可能对应一个特定的 <code>DOM</code> 元素或由某些 <code>CSS</code> 特性（如 <code>position: fixed</code>、<code>z-index</code>、<code>transform</code>等属性）触发。</li><li>绘制<code>（Painting）</code>：浏览器将渲染树中的每个节点进行绘制。</li><li>合成<code>（Compositing）</code>：浏览器将多个图层合成为一个完整的页面，并在屏幕上展示。</li></ol><h2 id="dom-如何生成的" tabindex="-1"><code>DOM</code> 如何生成的 <a class="header-anchor" href="#dom-如何生成的" aria-label="Permalink to &quot;\`DOM\` 如何生成的&quot;">​</a></h2><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/dom.png" alt="dom"></p><p>当服务端返回的类型是 <code>text/html</code> 时，浏览器会将收到的数据通过 <code>HTML</code> 解析器<code>（HTMLParser）</code>进行解析，整个过程可以分为以下几个步骤：</p><ol><li><p><strong>数据下载</strong>：</p><ul><li>浏览器在接收到 <code>text/html</code> 类型的响应后，开始下载 <code>HTML</code> 内容。</li></ul></li><li><p><strong>预解析操作</strong>：</p><ul><li>在解析 <code>HTML</code> 之前，浏览器会预先加载并解析 <code>CSS</code> 和 <code>JavaScript</code> 文件，这些文件会在 <code>HTML</code> 中通过 <code>&lt;link&gt;</code> 和 <code>&lt;script&gt;</code> 标签引用。</li></ul></li><li><p><strong>解析流程</strong>：</p><ul><li>字节流被传递到解析器，解析器将其转化为词法单元<code>（tokens）</code>。</li><li>根据这些词法单元生成节点，并将这些节点插入到 <code>DOM</code> 树中。</li><li>解析过程中，浏览器会处理各种 <code>HTML</code> 标签，包括文本节点、元素节点等。</li></ul></li><li><p><strong>处理 <code>&lt;script&gt;</code> 标签</strong>：</p><ul><li>当解析器遇到 <code>&lt;script&gt;</code> 标签时，它会停止当前的解析过程。</li><li>这时，浏览器会下载和执行对应的 <code>JavaScript</code> 代码。在执行 <code>JavaScript</code> 之前，必须确保当前脚本之前的所有 <code>CSS</code> 文件都已加载和解析完毕，因为 <code>JavaScript</code> 可能会依赖于 <code>CSS</code> 的样式。</li></ul></li><li><p><strong>异步脚本</strong>：</p><ul><li>对于带有 <code>async</code> 或 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 标签，浏览器将根据这些属性的设置决定是否在解析过程中停止并执行脚本。</li></ul></li><li><p><strong>继续解析</strong>：</p><ul><li>在执行完 <code>JavaScript</code> 后，解析器将继续之前的解析过程，继续生成和插入 <code>DOM</code> 节点。</li></ul></li></ol><p>通过这种方式，浏览器逐步构建出完整的 <code>DOM</code> 树，并在完成后开始进行渲染和布局。</p><div class="tip custom-block"><p class="custom-block-title">注意 ⚠️</p><ul><li><p><code>CSS</code> 样式文件尽量放在页面头部，<code>CSS</code> 加载不会阻塞 <code>DOM tree</code> 解析,浏览器会用解析出的 <code>DOM TREE</code> 和 <code>CSSOM</code> 进行渲染，不会出现闪烁问题。如果 <code>CSS</code> 放在底部，浏览是边解析边渲染，渲染出的结果不包含样式，后续会发生重绘操作。</p></li><li><p><code>JS</code> 文件放在 <code>HTML</code> 底部，防止 <code>JS</code> 的加载、解析、执行堵塞页面后续的正常渲染。</p></li></ul></div><blockquote><p>举个 🌰</p></blockquote><ol><li>为什么 <code>css</code> 要放在头部、<code>js</code> 要放在底部</li></ol><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- 当html 渲染时 会先扫描js和css 渲染从上到下 边解析边渲染 --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;!</span><span style="color:#F07178;">DOCTYPE</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">en</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">charset</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">UTF-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">viewport</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">width=device-width, initial-scale=1.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Document</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;">&lt;!-- css不会阻塞html解析 --&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./index.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;">&lt;!-- css阻塞页面渲染 --&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;">&lt;!-- 浏览器可以部分渲染 --&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;">&lt;!-- 渲染dom时 要等待样式加载完毕 --&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;">&lt;!-- 需要cssom 和 dom tree =&gt; 布局树  --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;">&lt;!-- 样式放到底部,可能会导致重绘效果 ,二次渲染--&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./index.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- parserHTML -&gt; parserStylesheet -&gt; updateLayerTree =&gt; paint --&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p><strong>css 放在头部的渲染流程：</strong></p><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/ques1.png" alt="ques1"></p><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/ques2.png" alt="ques2"></p><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/ques3.png" alt="ques3"></p><p><strong>css 放在底部的渲染流程：</strong></p><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/css_b_1.png" alt="css_b_1"></p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;!</span><span style="color:#F07178;">DOCTYPE</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">en</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">charset</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">UTF-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">viewport</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">width=device-width, initial-scale=1.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Document</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./index.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    先渲染hello</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">hello</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;">&lt;!-- js会阻塞dom解析 ，需要暂停DOM解析去执行javascript </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         js可能会操作样式，所以需要等待样式加载完成 --&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;">&lt;!-- js阻塞html解析也阻塞渲染， js 要等上面的css加载完毕，保证页面js可以操作样式 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> s </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#BABED8;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10000</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">s</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">i</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    等script执行完再渲染world</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">world</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/css_b_2.png" alt="css_b_2"></p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;!</span><span style="color:#F07178;">DOCTYPE</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">en</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">charset</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">UTF-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">viewport</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">width=device-width, initial-scale=1.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Document</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./index.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">hello</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">world</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;">&lt;!-- js 和 css 可以并行加载 但是还是需要等待js执行完毕 继续解析剩余dom --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;">&lt;!-- 所以js放在页面的底部 防止阻塞DOM 渲染 --&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;">&lt;!-- css放顶部 防止页面重绘 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/css_b_3.png" alt="css_b_3"></p><h2 id="从输入-url-到浏览器显示页面发生了什么" tabindex="-1">从输入 <code>URL</code> 到浏览器显示页面发生了什么 <a class="header-anchor" href="#从输入-url-到浏览器显示页面发生了什么" aria-label="Permalink to &quot;从输入 \`URL\` 到浏览器显示页面发生了什么&quot;">​</a></h2><h3 id="_1-url-解析与域名解析-dns-lookup" tabindex="-1">1. <code>URL</code> 解析与域名解析<code>(DNS Lookup)</code> <a class="header-anchor" href="#_1-url-解析与域名解析-dns-lookup" aria-label="Permalink to &quot;1. \`URL\` 解析与域名解析\`(DNS Lookup)\`&quot;">​</a></h3><ul><li><p><strong>输入 <code>URL</code></strong>: 用户在地址栏输入一个 <code>URL</code>（例如 <code>https://www.xxx.com</code>）。</p></li><li><p><strong>检查缓存</strong>：</p><ul><li><strong>浏览器缓存</strong>：首先，浏览器会检查是否有这个 <code>URL</code> 的缓存数据。如果缓存有效（比如之前访问过且缓存未过期），会直接从缓存中读取页面内容并跳过后续的网络请求步骤。</li><li><strong>操作系统缓存</strong>：如果浏览器缓存中没有数据，浏览器会向操作系统询问域名 <code>www.xxx.com</code> 的 <code>IP</code> 地址。操作系统会检查其 <code>DNS</code> 缓存。</li><li><strong>路由器缓存</strong>：如果操作系统缓存中没有，操作系统会向配置的 <code>DNS</code> 服务器（通常是路由器）发出 <code>DNS</code> 查询请求。</li><li><strong><code>ISP</code> 缓存</strong>：路由器可能没有缓存记录，会继续向 <code>ISP</code> 的 <code>DNS</code> 服务器查询。</li><li><strong>递归查询</strong>：如果 <code>ISP</code> 的 <code>DNS</code> 服务器也没有记录，它会发起递归 <code>DNS</code> 查询，一直向 <code>DNS</code> 服务器查找，直到找到 <code>www.xxx.com</code> 对应的 <code>IP</code> 地址。</li></ul></li><li><p><strong>返回 <code>IP</code> 地址</strong>：<code>DNS</code> 解析完成后，浏览器获取到 <code>www.xxx.com</code> 对应的 <code>IP</code> 地址。</p></li></ul><h3 id="_2-建立-tcp-连接" tabindex="-1">2. 建立 <code>TCP</code> 连接 <a class="header-anchor" href="#_2-建立-tcp-连接" aria-label="Permalink to &quot;2. 建立 \`TCP\` 连接&quot;">​</a></h3><ul><li><strong><code>TCP</code> 三次握手</strong>： <ul><li>浏览器通过获取到的 <code>IP</code> 地址向服务器发起一个 <code>TCP</code> 连接请求（通常使用 <code>80</code> 端口进行 <code>HTTP</code> 请求，或 <code>443</code> 端口进行 <code>HTTPS</code> 请求）。</li><li><code>TCP</code> 连接通过三次握手完成： <ol><li>客户端向服务器发送 <code>SYN（同步）包</code>，表示请求建立连接。</li><li>服务器响应 <code>SYN-ACK 包</code>，确认收到请求，并表明服务器准备就绪。</li><li>客户端再发送 <code>ACK（确认）包</code>，表示确认建立连接。</li></ol></li><li>此时，客户端和服务器之间建立了一个可靠的 <code>TCP</code> 连接。</li></ul></li></ul><h3 id="_3-https-握手-可选步骤" tabindex="-1">3. <code>HTTPS</code> 握手 (可选步骤) <a class="header-anchor" href="#_3-https-握手-可选步骤" aria-label="Permalink to &quot;3. \`HTTPS\` 握手 (可选步骤)&quot;">​</a></h3><ul><li><strong><code>TLS/SSL</code>握手</strong>： <ul><li>如果是 <code>HTTPS</code> 请求，客户端和服务器会进行 <code>TLS/SSL</code> 握手，用于加密数据传输。</li><li>这个过程涉及公钥和私钥的交换、数字证书的验证等，确保数据安全和通信的私密性。</li></ul></li></ul><h3 id="_4-发送-http-请求" tabindex="-1">4. 发送 <code>HTTP</code> 请求 <a class="header-anchor" href="#_4-发送-http-请求" aria-label="Permalink to &quot;4. 发送 \`HTTP\` 请求&quot;">​</a></h3><ul><li><p><strong>构建 <code>HTTP</code> 请求</strong>：</p><ul><li>浏览器构建一个 <code>HTTP</code> 请求报文，包含请求方法（如 <code>GET</code>、<code>POST</code>）、<code>URL</code>、协议版本（<code>HTTP/1.1</code> 或 <code>HTTP/2</code>）、请求头等信息。请求头中包含 <code>Cookies</code>、浏览器信息等。</li></ul></li><li><p><strong>发送 <code>HTTP</code> 请求</strong>：</p><ul><li>浏览器将 <code>HTTP</code> 请求通过刚建立的 <code>TCP</code> 连接发送到服务器。</li></ul></li></ul><h3 id="_5-服务器处理请求" tabindex="-1">5. 服务器处理请求 <a class="header-anchor" href="#_5-服务器处理请求" aria-label="Permalink to &quot;5. 服务器处理请求&quot;">​</a></h3><ul><li><p><strong>服务器处理请求</strong>：</p><ul><li>服务器收到浏览器发送的 <code>HTTP</code> 请求后，会解析请求内容，识别请求的 <code>URL</code>，进而决定该如何处理。</li><li>服务器可能执行一系列操作，如查询数据库、读取文件、执行后台逻辑，最终生成响应数据。</li></ul></li><li><p><strong>生成响应</strong>：</p><ul><li>服务器构建一个 <code>HTTP</code> 响应报文，包含状态码（如 <code>200 OK</code>、<code>404 Not Found</code>）、响应头（如内容类型、缓存控制）以及响应体（如 <code>HTML</code> 文件、<code>CSS</code> 文件、图片、<code>JSON</code> 数据等）。</li></ul></li></ul><h3 id="_6-浏览器接收-http-响应" tabindex="-1">6. 浏览器接收 <code>HTTP</code> 响应 <a class="header-anchor" href="#_6-浏览器接收-http-响应" aria-label="Permalink to &quot;6. 浏览器接收 \`HTTP\` 响应&quot;">​</a></h3><ul><li><strong>接收响应数据</strong>： <ul><li>服务器将生成的 <code>HTTP</code> 响应报文通过 <code>TCP</code> 连接传输回浏览器，浏览器开始接收响应数据。</li><li>浏览器会检查响应的状态码，若状态码为 <code>200</code>，表示请求成功，接下来会处理响应体中的内容。</li></ul></li></ul><h3 id="_7-渲染页面" tabindex="-1">7. 渲染页面 <a class="header-anchor" href="#_7-渲染页面" aria-label="Permalink to &quot;7. 渲染页面&quot;">​</a></h3><p>浏览器在接收到 <code>HTML</code> 响应体后，会进行一系列操作来渲染页面，具体步骤如下：</p><ul><li><p><strong>HTML 解析</strong>：</p><ul><li>浏览器将 <code>HTML</code> 文件解析为一个 <code>DOM</code> 树。</li><li><code>DOM</code> 树是页面结构的内存表示，每一个 <code>HTML</code> 标签都会被解析成一个 <code>DOM</code> 节点，形成父子关系。</li></ul></li><li><p><strong>处理 CSS</strong>：</p><ul><li>浏览器根据 <code>HTML</code> 文件中包含的 <code>&lt;link&gt;</code> 标签（外部 <code>CSS</code>）或 <code>&lt;style&gt;</code> 标签（内嵌 <code>CSS</code>）来加载和解析 <code>CSS</code> 样式表，形成 <code>CSSOM</code> 树（<code>CSS</code> 对象模型）。</li><li>如果是外部 <code>CSS</code> 文件，浏览器会发起额外的请求来下载这些文件。</li></ul></li><li><p><strong>渲染树的构建</strong>：</p><ul><li><code>DOM</code> 树和 <code>CSSOM</code> 树结合在一起，生成一棵渲染树。这棵渲染树只包含可见的 <code>DOM</code> 节点，并且这些节点带有它们的样式信息。</li></ul></li><li><p><strong>布局 <code>(Layout)</code></strong>：</p><ul><li>浏览器根据渲染树计算每个节点的几何位置，即布局阶段。此时，浏览器会确定每个元素的尺寸、位置。</li></ul></li><li><p><strong>绘制 <code>(Paint)</code></strong>：</p><ul><li>布局完成后，浏览器将绘制页面的各个元素，包括文本、颜色、边框、阴影、图像等。</li></ul></li><li><p><strong>合成 <code>(Compositing)</code></strong>：</p><ul><li>如果页面有复杂的层次（例如 <code>z-index</code> 或者硬件加速的动画），浏览器会将页面分成多个图层并将它们合成，最终生成用户看到的页面。</li></ul></li></ul><h3 id="_8-执行-javascript" tabindex="-1">8. 执行 <code>JavaScript</code> <a class="header-anchor" href="#_8-执行-javascript" aria-label="Permalink to &quot;8. 执行 \`JavaScript\`&quot;">​</a></h3><ul><li><p><strong>解析与执行 <code>JavaScript</code></strong>：</p><ul><li>如果 HTML 文件中包含 <code>&lt;script&gt;</code> 标签，浏览器会解析并执行 <code>JavaScript</code> 代码。</li><li>如果 <code>&lt;script&gt;</code> 是同步的（没有 <code>async</code> 或 <code>defer</code>），浏览器会暂停其他解析，直到 <code>JavaScript</code> 执行完毕。这可能会阻塞页面的渲染。</li><li>如果 <code>JavaScript</code> 代码会动态修改 <code>DOM</code>（例如 <code>document.createElement</code>、<code>innerHTML</code>），浏览器会重新计算布局和绘制。</li></ul></li><li><p><strong>异步加载</strong>：</p><ul><li>如果 <code>JavaScript</code> 文件标记了 <code>async</code> 或 <code>defer</code>，则浏览器会继续解析 <code>HTML</code>，不会被阻塞。<code>async</code> 脚本在加载完成后立即执行，<code>defer</code> 脚本会在 <code>HTML</code> 解析完成后执行。</li></ul></li></ul><h3 id="_9-显示页面并交互" tabindex="-1">9. 显示页面并交互 <a class="header-anchor" href="#_9-显示页面并交互" aria-label="Permalink to &quot;9. 显示页面并交互&quot;">​</a></h3><ul><li><p><strong>页面渲染完成</strong>：</p><ul><li>当浏览器渲染完所有内容，页面会呈现在用户面前，用户可以与页面交互。</li></ul></li><li><p><strong>事件循环与交互</strong>：</p><ul><li>浏览器开始进入事件循环状态，监听用户的操作（如点击、输入等），处理用户交互。</li></ul></li></ul><h3 id="_10-后续资源加载" tabindex="-1">10. 后续资源加载 <a class="header-anchor" href="#_10-后续资源加载" aria-label="Permalink to &quot;10. 后续资源加载&quot;">​</a></h3><ul><li><p><strong>异步资源的加载</strong>：</p><ul><li>浏览器在加载和解析 <code>HTML</code> 的过程中，可能会发现额外的资源请求，例如图片、视频、字体等。这些资源将会继续通过 HTTP 请求下载，直到所有资源加载完毕。</li></ul></li><li><p><strong><code>Lazy Load</code></strong>:</p><ul><li>在开发中，一些图片或资源可能会使用懒加载<code>（Lazy Load）</code>技术，只有当用户滚动到视口时才开始加载资源，从而优化初始加载时间。</li></ul></li></ul><hr><blockquote><p>通过 <code>network Timing</code>  观察请求发出的流程：</p></blockquote><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/netWork_jd.png" alt="netWork_jd"></p><blockquote><p>蓝色：<code>DOMContentLoaded:</code>DOM 构建完成的时间。 红色：<code>Load:</code>浏览器所有资源加载完毕。 本质上，浏览器是方便一般互联网用户通过界面解析和发送 HTTP 协议的软件。</p></blockquote><ul><li><code>Queuing:</code>请求发送前会根据优先级进行排队，同时每个域名最多处理 6 个 <code>TCP</code> 链接，超过的也会进行排队，并且分配磁盘空间时也会消耗一定时间。</li><li><code>Stalled :</code>请求发出前的等待时间（处理代理，链接复用）</li><li><code>DNS lookup :</code>查找 <code>DNS</code> 的时间</li><li><code>initial Connection :</code>建立 <code>TCP</code> 链接时间</li><li><code>SSL:</code> <code>SSL</code> 握手时间（<code>SSL</code> 协商）</li><li><code>Request Sent :</code>请求发送时间（可忽略）</li><li><code>Waiting(TTFB) :</code>等待响应的时间，等待返回首个字符的时间</li><li><code>Content Dowloaded :</code>用于下载响应的时间</li></ul>`,62)]))}const y=l(e,[["render",p]]);export{F as __pageData,y as default};
