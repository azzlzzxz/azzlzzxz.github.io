import{_ as a,o as n,c as l,N as e}from"./chunks/framework.2673bc46.js";const p="/assets/webpack_split.d3a12450.png",o="/assets/webpack_hmr.e5463056.png",u=JSON.parse('{"title":"Webpack 优化相关知识","description":"","frontmatter":{},"headers":[],"relativePath":"capital/construct/webpack/optimize.md","lastUpdated":1727616268000}'),c={name:"capital/construct/webpack/optimize.md"};function r(t,s,i,D,d,y){return n(),l("div",null,s[0]||(s[0]=[e(`<h1 id="webpack-优化相关知识" tabindex="-1">Webpack 优化相关知识 <a class="header-anchor" href="#webpack-优化相关知识" aria-label="Permalink to &quot;Webpack 优化相关知识&quot;">​</a></h1><h2 id="压缩资源" tabindex="-1">压缩资源 <a class="header-anchor" href="#压缩资源" aria-label="Permalink to &quot;压缩资源&quot;">​</a></h2><ul><li><p><code>JavaScript压缩</code>：使用 <a href="https://webpack.docschina.org/plugins/terser-webpack-plugin/" target="_blank" rel="noreferrer"><u>TerserWebpackPlugin</u></a> 等工具压缩 JS 代码。</p></li><li><p><code>CSS压缩</code>：使用 <a href="https://www.npmjs.com/package/cssnano" target="_blank" rel="noreferrer"><u>cssnano</u></a> 等工具压缩 CSS 代码。</p></li><li><p><code>HTML压缩</code>：使用 <a href="https://webpack.docschina.org/plugins/html-webpack-plugin/" target="_blank" rel="noreferrer"><u>HtmlWebpackPlugin</u></a> 时配置压缩选项。</p></li><li><p><code>图片压缩</code>：使用 <a href="https://www.npmjs.com/package/image-webpack-loader" target="_blank" rel="noreferrer"><u>image-webpack-loader</u></a> 等工具减小图片体积。</p></li></ul><h2 id="引入外部库的-cdn" tabindex="-1">引入外部库的 CDN <a class="header-anchor" href="#引入外部库的-cdn" aria-label="Permalink to &quot;引入外部库的 CDN&quot;">​</a></h2><p>对于 React、Vue 等这种库不会经常变化，所以就没必要打包。这种方式可以减少打包体积，并利用 CDN 的缓存优势加快页面加载速度</p><blockquote><p>举个 🌰</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> path </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">path</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> HtmlWebpackPlugin </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">html-webpack-plugin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">entry</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src/index.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">output</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">filename</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bundle.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#BABED8;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dist</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 配置 externals，说明哪些模块是外部引入的，不打包到 bundle 中</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">externals</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">react</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">React</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">react-dom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ReactDOM</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">vue</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="忽略解析依赖" tabindex="-1">忽略解析依赖 <a class="header-anchor" href="#忽略解析依赖" aria-label="Permalink to &quot;忽略解析依赖&quot;">​</a></h2><ul><li><p><code>module.noParse</code>  字段，可以用于配置模块文件的内容不需要进行解析</p></li><li><p>不需要解析依赖（即无依赖） 的第三方大型类库等，可以通过这个字段来配置，以提高整体的构建速度</p></li></ul><blockquote><p>举个 🌰</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">module</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 不需要解析jquery和lodash</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">noParse</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">jquery</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">lodash</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 正则表达式</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 或者使用函数</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">noParse</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">content</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">jquery</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">lodash</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">content</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>使用 <code>noParse</code> 进行忽略的模块文件中不能使用 <code>import</code>、<code>require</code>、<code>define</code> 等导入机制。</strong></p><div class="tip custom-block"><p class="custom-block-title"><code>noParse</code>与<code>external</code>区别</p><ul><li><code>external</code>是外联：例如<code>lodash</code>，它的代码<code>module.exports = window._</code>，拿到这个代码会进一步分析依赖，找<code>require</code>、<code>import</code>。</li><li><code>noParse</code>是不会进一步分析依赖：代码还是会正常打包进去，但是不再进一步分析它的依赖，不再检查里面是不是有<code>require</code>、<code>important</code>。</li></ul></div><h2 id="代码分割-splitchunksplugin" tabindex="-1">代码分割 <code>SplitChunksPlugin</code> <a class="header-anchor" href="#代码分割-splitchunksplugin" aria-label="Permalink to &quot;代码分割 \`SplitChunksPlugin\`&quot;">​</a></h2><ul><li><p>用 <code>SplitChunksPlugin</code> 自动提取公共模块和第三方库，可以减少代码重复和减少编译时间。</p></li><li><p>提取公共模块：将多个 <code>chunk</code> 共享的模块提取到一个单独 <code>chunk</code> 中，减少代码重复和生成文件的大小。</p></li><li><p>分割大模块：将大的模块拆分成更小的块，提高加载速度和并行下载的效率。</p></li><li><p>按需加载：创建按需加载的代码块，提高应用的启动速度</p></li></ul><blockquote><p>依赖关系</p></blockquote><p><img src="`+p+`" alt="webpack_split"></p><h2 id="多进程打包" tabindex="-1">多进程打包 <a class="header-anchor" href="#多进程打包" aria-label="Permalink to &quot;多进程打包&quot;">​</a></h2><p>使用 <a href="https://webpack.docschina.org/loaders/thread-loader/#root" target="_blank" rel="noreferrer"><u>thread-loader</u></a> 可以将打包任务分配到多个进程，提高打包速度</p><p>把<code>thread-loader</code>放在其他<code>loader</code>之前，放在这个<code>loader</code>后的<code>loader</code>就会在单独的<code>worker</code>池里运行</p><h2 id="缓存" tabindex="-1">缓存 <a class="header-anchor" href="#缓存" aria-label="Permalink to &quot;缓存&quot;">​</a></h2><ul><li><p><code>Webpack 4</code></p><ul><li><p><code>babel-loader</code>自带的缓存功能，直接启用就好，<code>cacheDirectory:true</code></p></li><li><p>在所有<code>loader</code>之前使用<code>loader: &#39;cache-loader&#39;</code></p></li></ul></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">module</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">\\.</span><span style="color:#C3E88D;">js</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">include</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#BABED8;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">src</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">exclude</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">use</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#BABED8;">          </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#F07178;">loader</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cache-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">          </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">          </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#F07178;">loader</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">babel-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#F07178;">options</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">              </span><span style="color:#F07178;">cacheDirectory</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">//启用缓存</span></span>
<span class="line"><span style="color:#BABED8;">              </span><span style="color:#F07178;">presets</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@babel/preset-env</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">modules</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@babel/preset-react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">          </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">        ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">    ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><ul><li><p><code>Webpack 5</code> 引入了持久化缓存，通过配置<code>cache.type</code>属性缓存生成的 <code>chunk</code></p><ul><li><p><code>webpack</code>会缓存生成的<code>webpack</code>模块和<code>chunk</code>，来改善构建速度。</p></li><li><p>缓存在<code>webpack5</code>里是默认开启的，缓存是默认是在内存里，但可以对<code>cache</code>进行设置。</p></li><li><p><code>webpack</code>追踪了每个模块的依赖，并创建了文件系统快照，此快照会与真实文件系统进行比较，当检测到差异时，将触发对应模块的更新构建</p></li></ul></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">cache</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">type</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">memory</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">//&#39;memory&#39;（内存） | &#39;filesystem&#39;（使用文件系统级别的缓存）</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="tree-shaking" tabindex="-1"><code>Tree shaking</code> <a class="header-anchor" href="#tree-shaking" aria-label="Permalink to &quot;\`Tree shaking\`&quot;">​</a></h2><p><code>Tree Shaking</code> 是一种用于移除 <code>JavaScript</code> 中未使用代码的优化技术。可以减小打包文件的体积，提高加载性能。</p><p>它依赖于 <code>ES6</code> 模块的静态结构特性（<code>import</code> 和 <code>export</code>），使得构建工具能够在编译时确定哪些代码是未使用的，并将其移除。</p><h3 id="启动-tree-shaking" tabindex="-1">启动 <code>Tree Shaking</code> <a class="header-anchor" href="#启动-tree-shaking" aria-label="Permalink to &quot;启动 \`Tree Shaking\`&quot;">​</a></h3><p>在 <code>Webpack</code> 中，启动 <code>Tree Shaking</code> 功能必须同时满足三个条件：</p><ul><li><p>使用 <code>ESM</code> 规范编写模块代码</p></li><li><p>配置 <code>optimization.usedExports</code> 为 <code>true</code>，启动标记功能</p></li><li><p>启动代码优化功能，可以通过如下方式实现：</p><ul><li><p>配置 <code>mode = production</code></p></li><li><p>配置 <code>optimization.minimize = true</code></p></li><li><p>提供 <code>optimization.minimizer</code> 数组</p></li></ul></li></ul><h3 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h3><p><code>Webpack</code> 中，<code>Tree-shaking</code> 的实现，一是先标记出模块导出值中哪些没有被用过，二是使用 <code>Terser</code> 删掉这些没被用到的导出语句。标记过程大致可划分为三个步骤：</p><ul><li><p><code>Make 阶段</code>：收集模块导出变量并记录到模块依赖关系图 <code>ModuleGraph</code> 变量中</p></li><li><p><code>Seal 阶段</code>：遍历 <code>ModuleGraph</code> 标记模块导出变量有没有被使用</p></li><li><p><code>生成产物时</code>：若变量没有被其它模块使用则删除对应的导出语句</p></li></ul><div class="info custom-block"><p class="custom-block-title">相关资料</p><ul><li><a href="https://juejin.cn/post/7019104818568364069" target="_blank" rel="noreferrer"><u>Tree-Shaking 实现原理</u></a></li></ul></div><h2 id="hmr-热更新" tabindex="-1"><code>HMR</code> 热更新 <a class="header-anchor" href="#hmr-热更新" aria-label="Permalink to &quot;\`HMR\` 热更新&quot;">​</a></h2><p><code>HMR</code> 热更新，它能够在保持页面状态的情况下动态替换资源模块，提供丝滑顺畅的 <code>Web</code> 页面开发体验。</p><h3 id="启动-hmr" tabindex="-1">启动 <code>HMR</code> <a class="header-anchor" href="#启动-hmr" aria-label="Permalink to &quot;启动 \`HMR\`&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">devServer</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">hot</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="hmr-实现原理" tabindex="-1"><code>HMR</code> 实现原理 <a class="header-anchor" href="#hmr-实现原理" aria-label="Permalink to &quot;\`HMR\` 实现原理&quot;">​</a></h3><ul><li><p>使用 <code>WDS（webpack-dev-server）</code>托管静态资源，同时以 <code>Runtime</code> 方式注入 <code>HMR</code> 客户端代码</p></li><li><p>浏览器加载页面后，与 <code>WDS</code> 建立 <code>WebSocket</code> 连接</p></li><li><p><code>Webpack</code> 监听到文件变化后，增量构建发生变更的模块，并通过 <code>WebSocket</code> 发送 <code>hash</code> 事件</p></li><li><p>浏览器接收到 <code>hash</code> 事件后，请求 <code>manifest</code> 资源文件，确认增量变更范围</p></li><li><p>浏览器加载发生变更的增量模块</p></li><li><p><code>Webpack</code> 运行时触发变更模块的 <code>module.hot.accept</code> 回调，执行代码变更逻辑</p></li></ul><blockquote><p>流程图</p></blockquote><p><img src="`+o+`" alt="webpack_hmr"></p><div class="info custom-block"><p class="custom-block-title">相关资料</p><ul><li><a href="https://juejin.cn/post/7021729340945596424" target="_blank" rel="noreferrer"><u>HMR 原理全解析</u></a></li></ul></div><h2 id="mainfest-更新清单" tabindex="-1"><code>Mainfest</code> 更新清单 <a class="header-anchor" href="#mainfest-更新清单" aria-label="Permalink to &quot;\`Mainfest\` 更新清单&quot;">​</a></h2><p><a href="https://webpack.docschina.org/guides/output-management/#the-manifest" target="_blank" rel="noreferrer"><u><code>mainfest</code></u></a>（更新清单），通常是一个 <code>JSON</code> 文件。需要配置 <a href="https://www.npmjs.com/package/webpack-manifest-plugin" target="_blank" rel="noreferrer"><u>WebpackManifestPlugin</u></a> 插件。</p><p>在 <code>Webpack</code> 输出阶段生成，用于记录所有模块及其依赖关系的映射用来管理模块加载、优化浏览器缓存。 包含：</p><ul><li><p>模块标识符： 每个模块都有一个唯一标识符，这些标识符用于在运行时查找和加载模块。</p></li><li><p><code>Chunk</code> 映射关系：包含 <code>chunk</code> 与包含的模块之间的映射关系，以及 <code>chunk</code> 之间的依赖关系。这有助于运行时确定哪些 <code>chunk</code> 需要被加载。</p></li><li><p><code>Hash</code> 值： 每个输出文件的 <code>hash</code> 值。有助于浏览器判断文件是否有更新，从而决定是加载缓存中的资源还是重新请求新的资源</p></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">main.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">main.xxxxxx.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">vendor.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vendor.xxxxxx.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>manifest</code> 文件可以用于以下场景：</p><ul><li><p>服务端渲染: 在服务端渲染时，可以使用 <code>manifest</code> 文件来生成正确的脚本标签，确保引用最新的资源。</p></li><li><p>缓存管理: 通过记录文件的哈希值，确保在文件内容变化时，客户端能够获取到最新的文件，而不是使用缓存的旧文件。</p></li><li><p>动态加载: 在需要按需加载模块时，可以使用 <code>manifest</code> 文件来查找模块的路径。</p></li></ul><h2 id="按需加载" tabindex="-1">按需加载 <a class="header-anchor" href="#按需加载" aria-label="Permalink to &quot;按需加载&quot;">​</a></h2><p>按需加载是基于动态导入和代码分割实现的，允许应用将代码分割成多个 <code>chunk</code>，并在运行时按需动态加载这些<code>chunk</code>。按需加载可以减少应用的初始加载时间，提升用户体验。具体实现方式如下：</p><ul><li>使用<code>import()</code> 动态导入模块</li></ul><p><code>import</code> 将模块内容转换为 <code>ESM</code> 标准的数据结构后，通过 <code>Promise</code> 形式返回，加载完成后获取 <code>Module</code> 并在 <code>then</code> 中注册回调函数。</p><ul><li><code>Webpack</code> 自动代码分割</li></ul><p>当 <code>webpack</code> 检测到 <code>import()</code>存在时，将会自动进行代码分割，将动态<code>import</code>的模块打到一个新 <code>bundle</code> 中，此时这部分代码不包含在初始包中，而是在需要的时候动态加载。</p><ul><li>网络请求</li></ul><p>当<code>import()</code>被执行时，浏览器会发起一个网络请求来加载对应的 <code>chunk</code> 文件，加载完成后，模块中的代码就可以被执行了</p>`,59)]))}const b=a(c,[["render",r]]);export{u as __pageData,b as default};
