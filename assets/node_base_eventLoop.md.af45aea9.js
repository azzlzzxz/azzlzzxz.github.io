import{_ as e,B as o,o as c,c as t,D as l,z as p,Q as n,a as r,x as s}from"./chunks/framework.a5035e6c.js";const i="/assets/Node_EventLoop.5567d011.jpg",y="/assets/diff.052d65d0.png",C=JSON.parse('{"title":"Node 的事件循环机制","description":"","frontmatter":{},"headers":[],"relativePath":"node/base/eventLoop.md","lastUpdated":1697552014000}'),F={name:"node/base/eventLoop.md"},D=n('<h1 id="node-的事件循环机制" tabindex="-1">Node 的事件循环机制 <a class="header-anchor" href="#node-的事件循环机制" aria-label="Permalink to &quot;Node 的事件循环机制&quot;">​</a></h1><p><img src="'+i+`" alt="node_eventLoop"></p><h2 id="event-loop-是一个独立的线程" tabindex="-1">event loop 是一个独立的线程 <a class="header-anchor" href="#event-loop-是一个独立的线程" aria-label="Permalink to &quot;event loop 是一个独立的线程&quot;">​</a></h2><p>当 Node.js 启动时，它初始化事件循环，处理提供的输入脚本，这些脚本可能进行异步 API 调用、调度计时器或调用 process.nextTick()，然后开始处理事件循环。</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">   ┌───────────────────────┐</span></span>
<span class="line"><span style="color:#BABED8;">┌─</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">│        timers         │</span></span>
<span class="line"><span style="color:#BABED8;">│  └──────────┬────────────┘</span></span>
<span class="line"><span style="color:#BABED8;">│  ┌──────────┴────────────┐</span></span>
<span class="line"><span style="color:#BABED8;">│  │     pending callbacks │</span></span>
<span class="line"><span style="color:#BABED8;">│  └──────────┬────────────┘</span></span>
<span class="line"><span style="color:#BABED8;">│  ┌──────────┴────────────┐</span></span>
<span class="line"><span style="color:#BABED8;">│  │     idle, prepare     │</span></span>
<span class="line"><span style="color:#BABED8;">│  └──────────┬────────────┘      ┌───────────────┐</span></span>
<span class="line"><span style="color:#BABED8;">│  ┌──────────┴────────────┐      │   </span><span style="color:#FFCB6B;">incoming</span><span style="color:#BABED8;">:   │</span></span>
<span class="line"><span style="color:#BABED8;">│  │         poll          │</span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;">─────┤  connections, │</span></span>
<span class="line"><span style="color:#BABED8;">│  └──────────┬────────────┘      │   data, etc.  │</span></span>
<span class="line"><span style="color:#BABED8;">│  ┌──────────┴────────────┐      └───────────────┘</span></span>
<span class="line"><span style="color:#BABED8;">│  │        check          │</span></span>
<span class="line"><span style="color:#BABED8;">│  └──────────┬────────────┘</span></span>
<span class="line"><span style="color:#BABED8;">│  ┌──────────┴────────────┐</span></span>
<span class="line"><span style="color:#BABED8;">└──┤    close callbacks    │</span></span>
<span class="line"><span style="color:#BABED8;">   └───────────────────────┘</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>`,5),m=s("ul",null,[s("li",null,"timers: 执行 setTimeout 和 setInterval 中到期的 callback。"),s("li",null,"pending callback: 上一轮循环中少数的 callback 会放在这一阶段执行。"),s("li",null,"idle, prepare: 仅在内部使用。"),s("li",null,"poll: 最重要的阶段，执行 pending callback，在适当的情况下会阻塞在这个阶段。"),s("li",null,"check: 执行 setImmediate 的 callback。"),s("li",null,"close callbacks: 执行 close 事件的 callback，例如 socket.on(‘close’[,fn])或者 http.server.on('close, fn)。")],-1),b=n(`<blockquote><p>setImmediate()是将事件插入到事件队列尾部，主线程和事件队列的函数执行完成之后立即执行 setImmediate 指定的回调函数</p></blockquote><p>event loop 的每一次循环都需要依次经过上述的阶段。</p><p>每个阶段都有自己的 FIFO 的 callback 队列（在 timer 阶段其实使用一个最小堆而不是队列来保存所有元素，比如 timeout 的 callback 是按照超时时间的顺序来调用的，并不是先进先出的队列逻辑），每当进入某个阶段，都会从所属的队列中取出 callback 来执行。</p><p>当队列为空或者被执行 callback 的数量达到系统的最大数量时，进入下一阶段。这六个阶段都执行完毕称为一轮循环。</p><h2 id="timers" tabindex="-1">timers <a class="header-anchor" href="#timers" aria-label="Permalink to &quot;timers&quot;">​</a></h2><blockquote><p>源码地址 <a href="https://github.com/nodejs/node/blob/23a3410f9fecf2c8652eef4f92b4072edf307137/deps/uv/src/timer.c#L163" target="_blank" rel="noreferrer">uv__run_timers</a></p></blockquote><p>在 timers 阶段，会执行 setTimeout 和 setInterval 中到期的 callback。执行这两者回调需要设置一个毫秒数，理论上来说，应该是时间一到就立即执行 callback 回调，但是由于 system 的调度可能会延时，达不到预期时间。如下例：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">someAsyncOperation</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">callback</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFile</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/path/to/file</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">callback</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> timeoutScheduled </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#BABED8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">delay</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">timeoutScheduled</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`\${</span><span style="color:#BABED8;">delay</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">ms have passed since I was scheduled</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">100</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">someAsyncOperation</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">startCallback</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#F07178;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">startCallback</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// do nothing</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>当进入事件循环时，它有一个空队列（fs.readFile()尚未完成），因此定时器将等待剩余毫秒数，当到达 95ms（假设 fs.readFile()需要 95ms）时，fs.readFile()完成读取文件并且其完成需要 10 毫秒的回调被添加到轮询队列并执行。</p><p>因此，原本设置 100ms 后执行的回调函数，会在约 105ms 后执行。</p><h2 id="pending-callbacks" tabindex="-1">pending callbacks <a class="header-anchor" href="#pending-callbacks" aria-label="Permalink to &quot;pending callbacks&quot;">​</a></h2><p>此阶段执行某些系统操作（例如 TCP 错误类型）的回调。</p><p>例如：如果 TCP socket ECONNREFUSED 在尝试 connect 时 receives， 系统希望等待报告错误，这将在 pending callbacks 阶段执行。</p><h2 id="poll-轮询" tabindex="-1">poll（轮询） <a class="header-anchor" href="#poll-轮询" aria-label="Permalink to &quot;poll（轮询）&quot;">​</a></h2><p>执行 pending callback，在适当的情况下会阻塞在这个阶段。</p><p>poll 里面 有很多回调 node 中有执行的最大个数，超过最大个数会被延迟到下一轮循环执行。</p><p>poll 阶段有两个主要功能：</p><ol><li>执行 I/O（连接、数据进入/输出）回调。</li><li>处理轮询队列中的事件。</li></ol><p>当事件循环进入 poll 阶段并且在 timers 中没有可以执行定时器时：</p><ul><li><p>如果 poll 队列不为空，则事件循环将遍历其同步执行它们的 callback 队列，直到队列为空，或者达到 system-dependent（系统相关限制）。</p></li><li><p>如果 poll 队列为空，会检查是否有 setImmediate()回调需要执行，如果有则马上进入执行 check 阶段以执行回调。</p></li><li><p>如果 timers 中有可以执行定时器且 poll 队列为空时，则会判断是否有 timer 超时，如果有的话会回到 timer 阶段执行回调。</p></li></ul><h2 id="check" tabindex="-1">check <a class="header-anchor" href="#check" aria-label="Permalink to &quot;check&quot;">​</a></h2><p>此阶段执行 setImmediate 的 callback。</p><p>setImmediate()实际上是一个特殊的计时器，它在事件循环的一个单独阶段运行。它使用一个 libuv API，该 API 在 poll 阶段完成后执行 callback。</p><ul><li><p>setImmediate()和 setTimeout()是相似的，但根据它们被调用的时间以不同的方式表现。</p></li><li><p>setImmediate()设计用于在当前 poll 阶段完成后 check 阶段执行脚本 。</p></li><li><p>setTimeout() 安排在经过最小（ms）后运行的脚本，在 timers 阶段执行。</p></li></ul><p>举个 🌰：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFile</span><span style="color:#BABED8;">(__filename</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">timeout</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setImmediate</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">immediate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">immediate</span></span>
<span class="line"><span style="color:#BABED8;">timeout</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>主要原因是在 I/O 阶段读取文件后，事件循环会先进入 poll 阶段，发现有 setImmediate 需要执行，会立即进入 check 阶段执行 setImmediate 的回调。然后再进入 timers 阶段，执行 setTimeout，打印 timeout。</p><h3 id="setimmediate-与-settimeout-的区别" tabindex="-1">setImmediate 与 setTimeout 的区别 <a class="header-anchor" href="#setimmediate-与-settimeout-的区别" aria-label="Permalink to &quot;setImmediate 与 setTimeout 的区别&quot;">​</a></h3><p>setImmediate()  和  setTimeout()  很类似，但是基于被调用的时机，他们也有不同表现。</p><ol><li>setImmediate()  设计为一旦在当前   轮询   阶段完成， 就执行脚本。</li><li>setTimeout()  在最小阈值（ms 单位）（定时器时间到达）过后运行脚本。</li></ol><p>执行计时器的顺序将根据调用它们的上下文而异。</p><p><strong>如果二者都从主模块内调用，则计时器将受进程性能的约束（这可能会受到计算机上其他正在运行应用程序的影响）。</strong></p><p>例如，如果运行以下不在 I/O 周期（即主模块）内的脚本，则执行两个计时器的顺序是非确定性的，因为它受进程性能的约束：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">timeout</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setImmediate</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">immediate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">$ node timeout_vs_immediate.</span><span style="color:#FFCB6B;">js</span></span>
<span class="line"><span style="color:#BABED8;">timeout</span></span>
<span class="line"><span style="color:#BABED8;">immediate</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">$ node timeout_vs_immediate.</span><span style="color:#FFCB6B;">js</span></span>
<span class="line"><span style="color:#BABED8;">immediate</span></span>
<span class="line"><span style="color:#BABED8;">timeout</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,36),u=n(`<div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// I/O  轮询时会执行i/o回调 如果没有定义setImmediate会等待剩下的i/o完成 或者定时器到达时间</span></span>
<span class="line"><span style="color:#BABED8;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFile</span><span style="color:#BABED8;">(__filename</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">timeout</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setImmediate</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 不是特别重要的任务 可以放到setImmediate</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">immediate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">$ node timeout_vs_immediate.</span><span style="color:#FFCB6B;">js</span></span>
<span class="line"><span style="color:#BABED8;">immediate</span></span>
<span class="line"><span style="color:#BABED8;">timeout</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">$ node timeout_vs_immediate.</span><span style="color:#FFCB6B;">js</span></span>
<span class="line"><span style="color:#BABED8;">immediate</span></span>
<span class="line"><span style="color:#BABED8;">timeout</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>使用  setImmediate()  相对于 setTimeout()  的主要优势是，如果 setImmediate()是在 I/O 周期内被调度的，那它将会在其中任何的定时器之前执行，跟这里存在多少个定时器无关。</strong></p><h2 id="close-callbacks" tabindex="-1">close callbacks <a class="header-anchor" href="#close-callbacks" aria-label="Permalink to &quot;close callbacks&quot;">​</a></h2><p>如果套接字或句柄突然关闭(例如 socket.destroy())，那么’close’事件将在这个阶段发出。否则，它将通过 process.nextTick()发出。</p><p>process.nextTick()方法将 callback 添加到 next tick 队列。 一旦当前事件轮询队列的任务全部完成，在 next tick 队列中的所有 callbacks 会被依次调用。即，当每个阶段完成后，如果存在 nextTick 队列，就会清空队列中的所有回调函数，并且优先于其他 microtask 执行。</p><p>Nodejs 与浏览器的 Event Loop 差异：</p><ul><li>Node 端，microtask（微任务） 在事件循环的各个阶段之间执行。</li><li>浏览器端，microtask（微任务） 在事件循环的 macrotask （宏任务）执行完之后执行。</li></ul><p><img src="`+y+'" alt="diff"></p>',9);function d(B,A,E,h,_,k){const a=o("font");return c(),t("div",null,[D,l(a,{color:"#5887ff"},{default:p(()=>[m]),_:1}),b,l(a,{color:"#FF4444"},{default:p(()=>[r(" 但是，如果你把这两个函数放入一个 I/O 循环内调用，setImmediate 总是被优先调用： 因为 I/O 操作是在 poll 阶段进行的，poll 阶段之后是 check（也就是调用 setImmediate）。 ")]),_:1}),u])}const v=e(F,[["render",d]]);export{C as __pageData,v as default};
