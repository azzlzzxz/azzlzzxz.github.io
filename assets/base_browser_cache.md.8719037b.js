import{_ as o,o as c,c as a,N as d}from"./chunks/framework.2f525601.js";const u=JSON.parse('{"title":"浏览器缓存机制","description":"","frontmatter":{},"headers":[],"relativePath":"base/browser/cache.md","lastUpdated":1728801256000}'),s={name:"base/browser/cache.md"};function l(i,e,r,t,p,n){return c(),a("div",null,e[0]||(e[0]=[d('<h1 id="浏览器缓存机制" tabindex="-1">浏览器缓存机制 <a class="header-anchor" href="#浏览器缓存机制" aria-label="Permalink to &quot;浏览器缓存机制&quot;">​</a></h1><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/cache.jpg" alt="cache"></p><h2 id="浏览器缓存位置和优先级" tabindex="-1">浏览器缓存位置和优先级 <a class="header-anchor" href="#浏览器缓存位置和优先级" aria-label="Permalink to &quot;浏览器缓存位置和优先级&quot;">​</a></h2><ol><li><code>Service Worker</code></li><li><code>Memory Cache</code>（内存缓存）</li><li><code>Disk Cache</code>（硬盘缓存）</li><li><code>Push Cache</code>（推送缓存）</li><li>以上缓存都没命中就会进行网络请求</li></ol><h2 id="不同缓存间的差别" tabindex="-1">不同缓存间的差别 <a class="header-anchor" href="#不同缓存间的差别" aria-label="Permalink to &quot;不同缓存间的差别&quot;">​</a></h2><h3 id="service-worker" tabindex="-1"><code>Service Worker</code> <a class="header-anchor" href="#service-worker" aria-label="Permalink to &quot;`Service Worker`&quot;">​</a></h3><p>和 <code>Web Worker</code> 类似，是独立的线程，我们可以在这个线程中缓存文件，在主线程需要的时候读取这里的文件，<code>Service Worker</code> 使我们可以自由选择缓存哪些文件以及文件的匹配、读取规则，并且缓存是持续性的。</p><p><code>ServiceWorker</code> 是运行在浏览器后台进程里的一段 <code>JS</code>，它可以做许多事情，比如拦截客户端的请求、向客户端发送消息、向服务器发起请求等等，其中最重要的作用之一就是离线资源缓存。</p><p><code>ServiceWorker</code> 拥有对缓存流程丰富灵活的控制能力，当页面请求到 <code>ServiceWorker</code> 时，<code>ServiceWorker</code> 同时请求缓存和网络，把缓存的内容直接给用户，而后覆盖缓存。</p><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/server_worker.png" alt="server_worker"></p><div class="tip custom-block"><p class="custom-block-title">注意</p><ul><li>需要<code>HTTPS</code>才可以使用<code>ServiceWorker</code></li></ul></div><h3 id="memory-cache" tabindex="-1"><code>Memory Cache</code> <a class="header-anchor" href="#memory-cache" aria-label="Permalink to &quot;`Memory Cache`&quot;">​</a></h3><p>内存缓存，内存缓存不是持续性的，缓存会随着进程释放而释放。</p><p>内存缓存：读取快、持续时间短、容量小。</p><h3 id="disk-cache" tabindex="-1"><code>Disk Cache</code> <a class="header-anchor" href="#disk-cache" aria-label="Permalink to &quot;`Disk Cache`&quot;">​</a></h3><p>硬盘缓存，相较于内存缓存，硬盘缓存的持续性和容量更优，它会根据 <code>HTTP header</code> 的字段判断哪些资源需要缓存。</p><p>硬盘缓存：读取慢、持续时间长、容量大。</p><h3 id="push-cache" tabindex="-1"><code>Push Cache</code> <a class="header-anchor" href="#push-cache" aria-label="Permalink to &quot;`Push Cache`&quot;">​</a></h3><p>推送缓存，<code>Push Cache</code> 是与 <code>HTTP/2</code> 中的 <code>Server Push</code> 机制相关的缓存机制。<code>Server Push</code> 是 <code>HTTP/2</code> 提供的一个功能，允许服务器在客户端请求某个资源时，主动向客户端推送其他相关的资源，而不需要客户端显式地请求这些资源。</p><p><code>Push Cache</code> 是一种临时的缓存机制，生命周期相对较短，通常在当前会话中有效。一旦会话结束或者资源被使用后，缓存内容可能会被清除</p><h2 id="浏览器缓存策略" tabindex="-1">浏览器缓存策略 <a class="header-anchor" href="#浏览器缓存策略" aria-label="Permalink to &quot;浏览器缓存策略&quot;">​</a></h2><p><code>HTTP</code> 缓存一般分为两类：<code>强缓存（也称本地缓存</code>）和 <code>协商缓存（也称 304 缓存）</code>。</p><p>普通刷新会启用协商缓存，忽略强缓存。只有在地址栏或收藏夹输入网址、通过链接引用资源等情况下，浏览器才会启用强缓存。</p><h3 id="强缓存-不需要向服务器询问的缓存-200" tabindex="-1">强缓存(不需要向服务器询问的缓存)（200） <a class="header-anchor" href="#强缓存-不需要向服务器询问的缓存-200" aria-label="Permalink to &quot;强缓存(不需要向服务器询问的缓存)（200）&quot;">​</a></h3><p>本地缓存是最快速的一种缓存方式，只要资源还在缓存有效期内，浏览器就会直接在本地读取，不会请求服务端。</p><div class="tip custom-block"><p class="custom-block-title"><code>from disk cache</code> 和 <code>from memory cache</code> 什么时候会触发？</p><ol><li>先查找内存，如果内存中存在，从内存中加载</li><li>如果内存中未查找到，选择硬盘获取，如果硬盘中有，从硬盘中加载</li><li>如果硬盘中未查找到，那就进行网络请求</li><li>加载到的资源缓存到硬盘和内存</li></ol></div><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/memory_cache.png" alt="memory_cache"></p><h4 id="设置-expires-http1-0" tabindex="-1">设置 <code>Expires(HTTP1.0)</code> <a class="header-anchor" href="#设置-expires-http1-0" aria-label="Permalink to &quot;设置 `Expires(HTTP1.0)`&quot;">​</a></h4><p>即过期时间，例如<code>「Expires: Thu, 26 Dec 2019 10:30:42 GMT」</code>表示缓存会在这个时间后失效，这个过期日期是绝对日期，如果修改了本地日期，或者本地日期与服务器日期不一致，那么将导致缓存过期时间错误。</p><p><code>Expires</code>是 <code>HTTP1.0</code> 的产物，故现在大多数使用 <code>Cache-Control</code> 替代。</p><h4 id="设置-cache-control" tabindex="-1">设置 <code>Cache-Control</code> <a class="header-anchor" href="#设置-cache-control" aria-label="Permalink to &quot;设置 `Cache-Control`&quot;">​</a></h4><p><code>HTTP/1.1</code>新增字段，<code>Cache-Control</code> 可以通过 <code>max-age</code> 字段来设置过期时间，例如<code>「Cache-Control:max-age=3600」</code>除此之外<code>Cache-Control</code>还能设置<code>private/no-cache</code>等多种字段:</p><ul><li><p><code>private</code>：客户端可以缓存</p></li><li><p><code>public</code>：客户端和代理服务器都可以缓存</p></li><li><p><code>max-age=t</code>：缓存内容将在<code>t</code>秒后失效</p></li><li><p><code>no-cache</code>：需要使用协商缓存来验证缓存数据</p></li><li><p><code>no-store</code>：所有内容都不会缓存。</p></li></ul><div class="tip custom-block"><p class="custom-block-title">注意 ⚠️</p><ul><li><p><strong><code>no-cache</code> 的意思是可以缓存，但每次用应该去想服务器验证缓存是否可用。（而不是不缓存）</strong></p></li><li><p><strong><code>no-store</code>才是不缓存内容。当在首部字段<code>Cache-Control</code>有指定<code>max-age</code>指令时，比起首部字段 <code>Expires</code>，会优先处理<code>max-age</code>指令。命中强缓存的表现形式：<code>Firefox</code>浏览器表现为一个灰色的 200 状态码。<code>Chrome</code>浏览器状态码表现为<code>200 (from disk cache)</code>或是<code>200 OK (from memory cache)</code></strong></p></li></ul></div><h3 id="协商缓存-需要向服务器询问缓存是否已经过期-304" tabindex="-1">协商缓存(需要向服务器询问缓存是否已经过期)（304） <a class="header-anchor" href="#协商缓存-需要向服务器询问缓存是否已经过期-304" aria-label="Permalink to &quot;协商缓存(需要向服务器询问缓存是否已经过期)（304）&quot;">​</a></h3><p>协商缓存，顾名思义是经过浏览器与服务器之间协商过之后，在决定是否读取本地缓存，如果服务器通知浏览器可以读取本地缓存，会返回 <code>304</code> 状态码，并且协商过程很简单，只会发送头信息，不会发送响应体</p><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/304.png" alt="304"></p><h4 id="last-modified-http1-0" tabindex="-1"><code>Last-Modified(HTTP1.0)</code> <a class="header-anchor" href="#last-modified-http1-0" aria-label="Permalink to &quot;`Last-Modified(HTTP1.0)`&quot;">​</a></h4><p>即最后修改时间，浏览器第一次请求资源时，服务器会在响应头上加上<code>Last-Modified</code>。</p><p>当资源过期时（浏览器判断 <code>Cache-Control</code> 标识的 <code>max-age</code> 过期），发现响应头具有 <code>Last-Modified</code> 声明，浏览器会在请求头中带上 <code>If-Modified-Since</code> 字段，字段的值就是之前服务器返回的最后修改时间，服务器对比这两个时间，若相同响应 <code>304</code> 走缓存，否则，响应 <code>200</code> 返回新资源，并更新 <code>Last-Modified</code></p><h4 id="etag" tabindex="-1"><code>ETag</code> <a class="header-anchor" href="#etag" aria-label="Permalink to &quot;`ETag`&quot;">​</a></h4><p><code>HTTP/1.1</code> 新增字段，表示文件唯一标识，只要文件内容改动，<code>ETag</code> 就会重新计算，<code>ETag</code> 的值，默认是对 <code>文件的索引节（INode）</code>，<code>大小（Size）</code>和<code>最后修改时间（MTime）</code>进行 <code>Hash</code> 后得到的。</p><p>缓存流程和<code>Last-Modified</code>一样：</p><ol><li><p>浏览器请求资源</p></li><li><p>服务器发送<code>ETag</code>字段</p></li><li><p>浏览器再次请求时发送<code>If-None-Match</code></p></li><li><p>如果<code>ETag</code>值不匹配，说明文件已经改变，返回新资源并更新<code>ETag</code>，若匹配则返回 <code>304</code>。</p></li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><code>If-None-Match：</code>当资源过期时，浏览器发现响应头里有<code>ETag</code>，则再次像服务器请求时带上请求头<code>If-none-match</code>(值是<code>ETag</code>的值)，服务器收到请求进行比对，决定返回<code>200</code>或<code>304</code></li></ul></div><p><code>Last-Modified</code> 与 <code>ETag</code> 两者对比：</p><ul><li><p><code>ETag</code>比<code>Last-Modified</code>更准确：如果我们打开文件但并没有修改，<code>Last-Modified</code> 也会改变，并且<code>Last-Modified</code>的单位时间为一秒，如果一秒内修改完了文件，那么还是会命中缓存。</p></li><li><p>如果什么缓存策略都没有设置，那么浏览器会取响应头中的<code>Date</code>减去<code>Last-Modified</code>值的 10% 作为缓存时间。</p></li></ul><h2 id="缓存场景" tabindex="-1">缓存场景 <a class="header-anchor" href="#缓存场景" aria-label="Permalink to &quot;缓存场景&quot;">​</a></h2><p>对于大部分的场景都可以使用强缓存配合协商缓存解决，但是在一些特殊的地方可能需要选择特殊的缓存策略。</p><p>对于某些不需要缓存的资源，可以使用<code>Cache-control: no-store</code>，表示该资源不需要缓存</p><p>对于频繁变动的资源，可以使用<code>Cache-Control: no-cache</code>并配合<code>ETag</code>使用，表示该资源已被缓存，但是每次都会发送请求询问资源是否更新。</p><p>对于代码文件来说，通常使用<code>Cache-Control: max-age=31536000</code>并配合策略缓存使用，然后对文件进行指纹处理，一旦文件名变动就会立刻下载新的文件</p><h2 id="启发式缓存" tabindex="-1">启发式缓存 <a class="header-anchor" href="#启发式缓存" aria-label="Permalink to &quot;启发式缓存&quot;">​</a></h2><p>如果响应中未显示<code>Expires</code>，<code>Cache-Control：max-age</code>或<code>Cache-Control：s-maxage</code>，并且响应中不包含其他有关缓存的限制，缓存可以使用启发式方法计算新鲜度寿命。</p><p>通常会根据响应头中的 2 个时间字段<code>Date</code>减去<code>Last-Modified</code>值的 10% 作为缓存时间。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Date 减去 Last-Modified 值的 10% 作为缓存时间。</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// Date：创建报文的日期时间, Last-Modified 服务器声明文档最后被修改时间</span></span>\n<span class="line"><span style="color:#BABED8;">response_is_fresh </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;">  </span><span style="color:#82AAFF;">max</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">（Date </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">  Last</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">Modified)) </span><span style="color:#89DDFF;">%</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10</span></span>\n<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">注意 ⚠️</p><p>只有在服务端没有返回明确的缓存策略时才会激活浏览器的启发式缓存策略。</p></div><h3 id="启发式缓存会引起什么问题" tabindex="-1">启发式缓存会引起什么问题 <a class="header-anchor" href="#启发式缓存会引起什么问题" aria-label="Permalink to &quot;启发式缓存会引起什么问题&quot;">​</a></h3><p>考虑一个情况，假设你有一个文件没有设置缓存时间，在一个月前你更新了上个版本。这次发版后，你可能得等到 <code>3</code> 天后用户才看到新的内容了。如果这个资源还在<code>CDN</code>也缓存了，则问题会更严重。</p><p>所以，要给资源设置合理的缓存时间。不要不设置缓存，也不要设置过长时间的缓存。应用内容要很久才会覆盖新版本。一般带<code>hash</code>的文件缓存时间可以长一点。</p>',60)]))}const m=o(s,[["render",l]]);export{u as __pageData,m as default};
