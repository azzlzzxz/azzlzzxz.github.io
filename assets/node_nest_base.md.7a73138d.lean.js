import{_ as n,o as a,c as o,N as l}from"./chunks/framework.5873b8fd.js";const i=JSON.parse('{"title":"Nest 基础","description":"","frontmatter":{},"headers":[],"relativePath":"node/nest/base.md","lastUpdated":1727449175000}'),e={name:"node/nest/base.md"};function p(c,s,t,r,d,y){return a(),o("div",null,s[0]||(s[0]=[l(`<h1 id="nest-基础" tabindex="-1">Nest 基础 <a class="header-anchor" href="#nest-基础" aria-label="Permalink to &quot;Nest 基础&quot;">​</a></h1><h2 id="nest-介绍" tabindex="-1"><code>nest</code> 介绍 <a class="header-anchor" href="#nest-介绍" aria-label="Permalink to &quot;\`nest\` 介绍&quot;">​</a></h2><p><code>Nest (NestJS)</code> 是一个用于构建高效、可扩展的 <code>Node.js</code> 服务器端应用程序的框架。它使用渐进式 <code>JavaScript</code>，使用 <code>TypeScript</code> 构建并完全支持 <code>TypeScript</code>（但仍然允许开发人员使用纯 <code>JavaScript</code> 进行编码），并结合了 <code>OOP（面向对象编程）</code>、<code>FP（函数式编程）</code>和 <code>FRP（函数式反应式编程）</code>的元素。</p><p>在底层，<code>Nest</code>使用强大的 <code>HTTP</code> 服务器框架，如 <code>Express（默认</code>），并且也可以选择配置为使用 <code>Fastify！</code></p><p><code>Nest</code>提供了高于这些常见 <code>Node.js</code> 框架<code>（Express/Fastify）</code>的抽象级别，而且还直接向开发人员公开其 <code>API</code>。这使开发人员可以自由地使用可用于底层平台的无数第三方模块。</p><h2 id="nest相关命令" tabindex="-1"><code>nest</code>相关命令 <a class="header-anchor" href="#nest相关命令" aria-label="Permalink to &quot;\`nest\`相关命令&quot;">​</a></h2><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 安装nest cli</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">i</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-g</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">@nestjs/cli</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 创建新项目</span></span>
<span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">nest</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">new</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">项目名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 生成module</span></span>
<span class="line"><span style="color:#FFCB6B;">nest</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">generate</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">module</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">aaa</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 生成controller</span></span>
<span class="line"><span style="color:#FFCB6B;">nest</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">genergate</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">controller</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">xxx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 生成一个完整的模块代码</span></span>
<span class="line"><span style="color:#FFCB6B;">nest</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">generate</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">resource</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">yyy</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 快速创建项目</span></span>
<span class="line"><span style="color:#FFCB6B;">nest</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">new</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 快速生成各种代码</span></span>
<span class="line"><span style="color:#FFCB6B;">nest</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">generate</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 使用 tsc 或者 webpack 构建代码</span></span>
<span class="line"><span style="color:#FFCB6B;">nest</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">build</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 启动开发服务，支持 watch 和调试</span></span>
<span class="line"><span style="color:#FFCB6B;">nest</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">start</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 打印 node、npm、nest 包的依赖版本</span></span>
<span class="line"><span style="color:#FFCB6B;">nest</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">info</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h2 id="nest-cli-json-配置" tabindex="-1"><code>nest-cli.json</code> 配置 <a class="header-anchor" href="#nest-cli-json-配置" aria-label="Permalink to &quot;\`nest-cli.json\` 配置&quot;">​</a></h2><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">$schema</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://json.schemastore.org/nest-cli</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">collection</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@nestjs/schematics</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">sourceRoot</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">entryFile</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">main</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">generateOPtions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">spec</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">false,</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 是否生成测试文件</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">flat</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">false</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 是否生成对应的目录</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">webpack</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">true,</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 打包方式 webpack/tsc</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">watchAssets</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">false,</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// --watch 默认只是监听 ts、js 文件，加上 --watchAssets 会连别的文件一同监听变化，并输出到 dist 目录，比如 md、yml 等文件</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">assets</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#676E95;font-style:italic;">// assets 是指定 nest build 的时候，把那些非 js、ts 文件也复制到 dist 目录下</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">**/*.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">include</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">**/*.html</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">exclude</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">**/aaa.html</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">watchAssets</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">true</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">tsConfigPath</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tsconfig.build.json</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">webpackConfigPath</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">webpack.config.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">deleteOutDir</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="项目核心文件" tabindex="-1">项目核心文件 <a class="header-anchor" href="#项目核心文件" aria-label="Permalink to &quot;项目核心文件&quot;">​</a></h2><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">src</span></span>
<span class="line"><span style="color:#BABED8;"> ├── app.</span><span style="color:#FFCB6B;">controller</span><span style="color:#BABED8;">.</span><span style="color:#FFCB6B;">spec</span><span style="color:#BABED8;">.</span><span style="color:#FFCB6B;">ts</span></span>
<span class="line"><span style="color:#BABED8;"> ├── app.</span><span style="color:#FFCB6B;">controller</span><span style="color:#BABED8;">.</span><span style="color:#FFCB6B;">ts</span></span>
<span class="line"><span style="color:#BABED8;"> ├── app.</span><span style="color:#FFCB6B;">module</span><span style="color:#BABED8;">.</span><span style="color:#FFCB6B;">ts</span></span>
<span class="line"><span style="color:#BABED8;"> ├── app.</span><span style="color:#FFCB6B;">service</span><span style="color:#BABED8;">.</span><span style="color:#FFCB6B;">ts</span></span>
<span class="line"><span style="color:#BABED8;"> └── main.</span><span style="color:#FFCB6B;">ts</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><table><thead><tr><th>文件名</th><th>文件概述</th></tr></thead><tbody><tr><td><code>app.controller.ts</code></td><td>带有单个路由的基本控制器示例。</td></tr><tr><td><code>app.controller.spec.ts</code></td><td>对于基本控制器的单元测试样例。</td></tr><tr><td><code>app.module.ts</code></td><td>应用程序的根模块。</td></tr><tr><td><code>app.service.ts</code></td><td>带有单个方法的基本服务。</td></tr><tr><td><code>main.ts</code></td><td>应用程序入口文件。它使用 <code>NestFactory</code> 用来创建 <code>Nest</code> 应用实例。</td></tr></tbody></table></div><h2 id="_5-种-http-数据传输方式" tabindex="-1">5 种 <code>Http</code> 数据传输方式 <a class="header-anchor" href="#_5-种-http-数据传输方式" aria-label="Permalink to &quot;5 种 \`Http\` 数据传输方式&quot;">​</a></h2><h3 id="_1-url-param" tabindex="-1">1 <code>url param</code> <a class="header-anchor" href="#_1-url-param" aria-label="Permalink to &quot;1 \`url param\`&quot;">​</a></h3><p><code>url param</code> 是 <code>url</code> 中的参数，<code>Nest</code> 里通过 :参数名 的方式来声明，然后通过 <code>@Param(参数名)</code> 的装饰器取出来注入到 <code>controller</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">Controller</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">api/person</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">PersonController</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">Get</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">:id</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">urlParam</span><span style="color:#89DDFF;">(@</span><span style="color:#82AAFF;">Param</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#BABED8;font-style:italic;">id</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">received: id=</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">id</span><span style="color:#89DDFF;">}\`</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>@Controller(&#39;api/person&#39;)</code> 的路由和 <code>@Get(&#39;:id&#39;)</code> 的路由会拼到一起，也就是只有 <code>/api/person/xxx</code> 的 <code>get</code> 请求才会走到这个方法。</p><h3 id="_2-query" tabindex="-1">2 <code>query</code> <a class="header-anchor" href="#_2-query" aria-label="Permalink to &quot;2 \`query\`&quot;">​</a></h3><p><code>query</code> 是 <code>url</code> 中 ? 后的字符串，需要做 <code>url encode</code>。</p><p>在 <code>Nest</code> 里，通过 <code>@Query</code> 装饰器来取：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">Controller</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">api/person</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">PersonController</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">Get</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">find</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">query</span><span style="color:#89DDFF;">(@</span><span style="color:#82AAFF;">Query</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#BABED8;font-style:italic;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">Query</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">age</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#BABED8;font-style:italic;">age</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">received: name=</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">,age=</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;">}\`</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>注意，这个 <code>find</code> 的路由要放到 <code>:id</code> 的路由前面，因为 <code>Nest</code> 是从上往下匹配的，如果放在后面，那就匹配到 <code>:id</code> 的路由了。</p></div><h3 id="_3-form-urlencoded" tabindex="-1">3 <code>form urlencoded</code> <a class="header-anchor" href="#_3-form-urlencoded" aria-label="Permalink to &quot;3 \`form urlencoded\`&quot;">​</a></h3><p><code>form urlencoded</code> 是通过 <code>body</code> 传输数据，其实是把 <code>query</code> 字符串放在了 <code>body</code> 里，所以需要做 <code>url encode</code> 用 <code>Nest</code> 接收的话，使用 <code>@Body</code> 装饰器，<code>Nest</code> 会解析请求体，然后注入到 <code>dto</code> 中。 <code>dto</code> 是 <code>data transfer object</code>，就是用于封装传输的数据的对象：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">CreatePersonDto</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">string</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">number</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">CreatePersonDto</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dto/create-person.dto</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">Controller</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">api/person</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">PersonController</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">Post</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">(@</span><span style="color:#82AAFF;">Body</span><span style="color:#BABED8;">() </span><span style="color:#BABED8;font-style:italic;">createPersonDto</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">CreatePersonDto</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">received: </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#BABED8;">(createPersonDto)</span><span style="color:#89DDFF;">}\`</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>前端代码使用 <code>post</code> 方式请求，指定 <code>content type</code> 为 <code>application/x-www-form-urlencoded</code>，用 <code>qs</code> 做下 <code>url encode</code>。</p><h3 id="_4-json" tabindex="-1">4 <code>json</code> <a class="header-anchor" href="#_4-json" aria-label="Permalink to &quot;4 \`json\`&quot;">​</a></h3><p><code>json</code> 需要指定 <code>content-type</code> 为 <code>application/json</code>。 后端代码同样使用 <code>@Body</code> 来接收，不需要做啥变动。<code>form urlencoded</code> 和 <code>json</code> 都是从 <code>body</code> 取值，<code>Nest</code> 内部会根据 <code>content type</code> 做区分，使用不同的解析方式。</p><h3 id="_5-form-data" tabindex="-1">5 <code>form data</code> <a class="header-anchor" href="#_5-form-data" aria-label="Permalink to &quot;5 \`form data\`&quot;">​</a></h3><p><code>form data</code> 是用 -------- 作为 <code>boundary</code> 分隔传输的内容的。 <code>Nest</code> 解析 <code>form data</code> 使用 <code>FilesInterceptor</code> 的拦截器，用 <code>@UseInterceptors</code> 装饰器启用，然后通过 <code>@UploadedFiles</code> 来取。非文件的内容，同样是通过 <code>@Body</code> 来取。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">AnyFilesInterceptor</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@nestjs/platform-express</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">CreatePersonDto</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dto/create-person.dto</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">Controller</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">api/person</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">PersonController</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">Post</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">file</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">UseInterceptors</span><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#82AAFF;">AnyFilesInterceptor</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">dest</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">uploads/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  )</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">body2</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">Body</span><span style="color:#BABED8;">() </span><span style="color:#BABED8;font-style:italic;">createPersonDto</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">CreatePersonDto</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">UploadedFiles</span><span style="color:#BABED8;">() </span><span style="color:#BABED8;font-style:italic;">files</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Express</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Multer</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">File</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">files</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">received: </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#BABED8;">(createPersonDto)</span><span style="color:#89DDFF;">}\`</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">i</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-D</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">@types/multer</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>前端代码使用 <code>axios</code> 发送 <code>post</code> 请求，指定 <code>content type</code> 为 <code>multipart/form-data</code>。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>我们用 <code>axios</code> 发送请求，使用 <code>Nest</code> 起后端服务，实现了 5 种 <code>http/https</code> 的数据传输方式：</p><p>其中前两种是 <code>url</code> 中的：</p><p><code>url param：</code> <code>url</code> 中的参数，<code>Nest</code> 中使用 <code>@Param </code>来取。</p><p><code>query：\`\`url</code> 中 ? 后的字符串，<code>Nest</code> 中使用<code>@Query</code>来取。</p><p>后三种是 <code>body</code> 中的：</p><p><code>form urlencoded：</code> 类似 query 字符串，只不过是放在 <code>body</code> 中。<code>Nest</code> 中使用 <code>@Body</code> 来取，<code>axios</code> 中需要指定 <code>content type</code> 为 <code>application/x-www-form-urlencoded</code>，并且对数据用 <code>qs</code> 或者 <code>query-string</code> 库做 <code>url encode</code>。</p><p><code>json：</code> <code>json</code> 格式的数据。<code>Nest</code> 中使用 <code>@Body</code> 来取，<code>axios</code> 中不需要单独指定 <code>content type</code>，<code>axios</code> 内部会处理。</p><p><code>form data：</code>通过 ----- 作为 <code>boundary</code> 分隔的数据。主要用于传输文件，<code>Nest</code> 中要使用 <code>FilesInterceptor</code> 来处理其中的 <code>binary</code> 字段，用 <code>@UseInterceptors</code> 来启用，其余字段用 <code>@Body</code> 来取。<code>axios</code> 中需要指定 <code>content type</code> 为 <code>multipart/form-data</code>，并且用 <code>FormData</code> 对象来封装传输的内容。</p><h2 id="nest-装饰器" tabindex="-1"><code>Nest</code> 装饰器 <a class="header-anchor" href="#nest-装饰器" aria-label="Permalink to &quot;\`Nest\` 装饰器&quot;">​</a></h2><ul><li><code>@Module</code>： 声明 <code>Nest</code> 模块</li><li><code>@Controller</code>：声明模块里的 <code>controller</code><blockquote><p>控制器的目的是接收应用的特定请求。路由机制控制哪个控制器接收哪些请求。通常，每个控制器有多个路由，不同的路由可以执行不同的操作。</p></blockquote></li><li><code>@Injectable</code>：声明模块里可以注入的 <code>provider</code></li><li><code>@Inject</code>：通过 <code>token</code> 手动指定注入的 <code>provider</code>，<code>token</code> 可以是 <code>class</code> 或者 <code>string</code></li><li><code>@Optional</code>：声明注入的 <code>provider</code> 是可选的，可以为空</li><li><code>@Global</code>：声明全局模块</li><li><code>@Catch</code>：声明 <code>exception filter</code> 处理的 <code>exception</code> 类型</li><li><code>@UseFilters</code>：路由级别使用 <code>exception filter</code></li><li><code>@UsePipes</code>：路由级别使用 <code>pipe</code></li><li><code>@UseInterceptors</code>：路由级别使用 <code>interceptor</code></li><li><code>@SetMetadata</code>：在 <code>class</code> 或者 <code>handler</code> 上添加 <code>metadata</code></li><li><code>@Get</code>、<code>@Post</code>、<code>@Put</code>、<code>@Delete</code>、<code>@Patch</code>、<code>@Options</code>、<code>@Head</code>：声明 <code>get</code>、<code>post</code>、<code>put</code>、<code>delete</code>、<code>patch</code>、<code>options</code>、<code>head</code> 的请求方式</li><li><code>@Param</code>：取出 <code>url</code> 中的参数，比如 <code>/aaa/:id</code> 中的 <code>id</code></li><li><code>@Query</code>: 取出 <code>query</code> 部分的参数，比如 <code>/aaa?name=xx</code> 中的 <code>name</code></li><li><code>@Body</code>：取出请求 <code>body</code>，通过 <code>dto class</code> 来接收</li><li><code>@Headers</code>：取出某个或全部请求头</li><li><code>@Session</code>：取出 <code>session</code> 对象，需要启用 <code>express-session</code> 中间件</li><li><code>@HostParm</code>： 取出 <code>host</code> 里的参数</li><li><code>@Req</code>、<code>@Request</code>：注入 <code>request</code> 对象</li><li><code>@Res</code>、<code>@Response</code>：注入 <code>response</code> 对象，一旦注入了这个 Nest 就不会把返回值作为响应了，除非指定 <code>passthrough</code> 为 <code>true</code></li><li><code>@Next</code>：注入调用下一个 <code>handler</code> 的 <code>next</code> 方法</li><li><code>@HttpCode</code>： 修改响应的状态码</li><li><code>@Header</code>：修改响应头</li><li><code>@Redirect</code>：指定重定向的 <code>url</code></li><li><code>@Render</code>：指定渲染用的模版引擎</li></ul>`,45)]))}const F=n(e,[["render",p]]);export{i as __pageData,F as default};
