import{_ as s,o,c as a,N as n}from"./chunks/framework.2f525601.js";const y=JSON.parse('{"title":"Webpack 相关知识点","description":"","frontmatter":{},"headers":[],"relativePath":"capital/construct/webpack/other.md","lastUpdated":1730786138000}'),l={name:"capital/construct/webpack/other.md"};function c(p,e,r,t,d,i){return o(),a("div",null,e[0]||(e[0]=[n(`<h1 id="webpack-相关知识点" tabindex="-1">Webpack 相关知识点 <a class="header-anchor" href="#webpack-相关知识点" aria-label="Permalink to &quot;Webpack 相关知识点&quot;">​</a></h1><h2 id="require" tabindex="-1"><code>require</code> <a class="header-anchor" href="#require" aria-label="Permalink to &quot;\`require\`&quot;">​</a></h2><p>在 <code>Webpack</code> 中，<code>require</code> 并不是像在 <code>Node.js</code> 中那样真正加载文件，而是经过编译时处理后的代码。</p><p><code>Webpack</code> 是一个静态模块打包工具，它会在编译时对模块的 <code>require</code> 进行静态分析、处理和打包，而不是在运行时才加载模块。</p><blockquote><p><a href="/node/norm/commonJs#4require-命令"><u>Node 的 require 可以看这里 🚀</u></a></p></blockquote><p>编译时加载：<code>Webpack</code> 中的 <code>require</code> 是在编译时处理的，<code>Webpack</code> 会分析代码中的所有 <code>require</code> 调用，将依赖打包进一个或者多个 <code>bundle</code> 文件中。</p><blockquote><p>举个 🌰</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 引入一个 JavaScript 模块</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> myModule </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./myModule</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 加载一个 CSS 文件</span></span>
<span class="line"><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./styles.css</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 动态加载模块（需要 Webpack 支持）</span></span>
<span class="line"><span style="color:#BABED8;">require</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ensure</span><span style="color:#BABED8;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./myModule</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">require</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">myModule</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./myModule</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">myModule</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">执行流程</p><ul><li><p>静态分析：<code>Webpack</code> 在编译时会分析代码中的 <code>require</code> 调用，查找依赖模块。</p></li><li><p>打包：<code>Webpack</code> 会将这些模块打包到一个或者多个文件中。</p></li><li><p>加载时执行：打包后的 <code>require</code> 是一个函数调用，从已经打包好的模块集合中获取模块的导出内容。</p></li></ul></div><h3 id="webpack-的-require-特殊处理" tabindex="-1"><code>Webpack</code> 的 <code>require</code> 特殊处理 <a class="header-anchor" href="#webpack-的-require-特殊处理" aria-label="Permalink to &quot;\`Webpack\` 的 \`require\` 特殊处理&quot;">​</a></h3><p>在 <code>Webpack</code> 中，<code>require</code> 可以用于更多类型的文件，不只是 <code>JavaScript</code> 模块。</p><ul><li><p>可以通过 <code>require</code> 引入样式文件（<code>CSS</code>/<code>LESS</code>/<code>SASS</code>）。</p></li><li><p>可以通过 <code>require</code> 加载图片文件，并根据配置文件生成文件 <code>URL</code>。</p></li><li><p>可以动态地加载模块（使用 <code>require.ensure</code> 或 <code>import()</code>），从而支持按需加载。</p></li></ul><p><code>Webpack</code> 还对 <code>require</code> 进行了增强，可以配合 <code>Webpack</code> 的 <code>Loader</code> 系统，处理各种资源文件。</p><blockquote><p>举个 🌰</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./styles.css</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// 引入 CSS 文件，经过 Webpack CSS loader 处理</span></span>
<span class="line"><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./image.png</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// 加载图片文件，经过 Webpack file-loader 处理</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h3><p><code>Node.js</code> 中的 <code>require</code> 和 <code>Webpack</code> 中的 <code>require</code> 虽然在表面上看起来相似，因为它们都用于加载模块，但它们有着不同的目的和实现机制。</p><table><thead><tr><th>特性</th><th><code>Node.js</code> 中的 <code>require</code></th><th><code>Webpack</code> 中的 <code>require</code></th></tr></thead><tbody><tr><td><strong>模块加载机制</strong></td><td><code>CommonJS</code> 模块系统，运行时加载</td><td>静态分析并打包，编译时处理依赖</td></tr><tr><td><strong>同步/异步</strong></td><td>同步加载模块，且阻塞主线程</td><td>在打包时静态处理，支持异步代码分割（动态加载）</td></tr><tr><td><strong>模块类型</strong></td><td>主要用于加载 <code>JavaScript</code> 文件和 <code>Node.js</code> 核心模块</td><td>支持多种资源类型（<code>JS</code>、<code>CSS</code>、图片等）</td></tr><tr><td><strong>动态路径</strong></td><td>支持动态路径，如变量拼接</td><td>不支持完全的动态路径，路径在编译时要明确</td></tr><tr><td><strong>缓存机制</strong></td><td>模块会在第一次加载后被缓存</td><td>模块在打包文件中静态管理</td></tr><tr><td><strong>打包</strong></td><td><code>Node.js</code> 中没有打包功能</td><td><code>Webpack</code> 会将所有模块打包成一个或者多个 <code>bundle</code> 文件</td></tr><tr><td><strong>代码优化</strong></td><td>运行时加载，不能自动删除未使用的代码</td><td><code>Webpack</code> 支持 <code>Tree Shaking</code> 等优化功能</td></tr></tbody></table><p><strong>总结</strong></p><ul><li><p><strong>Node.js 中的 <code>require</code></strong>：是基于 <code>CommonJS</code> 的模块系统，用于在运行时加载模块，适合服务端 JavaScript 环境。</p></li><li><p><strong>Webpack 中的 <code>require</code></strong>：是 <code>Webpack</code> 在编译阶段处理的，属于静态模块打包的方式，支持代码分割、资源加载等功能，适合前端项目。</p></li></ul><p>两者都使用 <code>require</code> 关键字，但目的和机制是不同的。</p>`,21)]))}const b=s(l,[["render",c]]);export{y as __pageData,b as default};
