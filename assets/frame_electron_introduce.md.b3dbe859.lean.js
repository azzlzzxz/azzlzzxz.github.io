import{_ as l,B as n,o as r,c as i,x as o,D as d,z as t,a as e,Q as a}from"./chunks/framework.a5035e6c.js";const U=JSON.parse('{"title":"Electron","description":"","frontmatter":{},"headers":[],"relativePath":"frame/electron/introduce.md","lastUpdated":1723537988000}'),s={name:"frame/electron/introduce.md"},h=a("",18),p=o("code",null,"Electron",-1),u=o("code",null,"Electron",-1),_=o("code",null,"Chromium",-1),m=o("code",null,"UI",-1),E=o("code",null,"BrowserWindow",-1),g=o("code",null,"Chromium",-1),b=o("code",null,"BrowserWindow",-1),f=o("code",null,"Electron",-1),P=o("code",null,"Web",-1),I=a("",14);function q(T,w,x,S,k,C){const c=n("font");return r(),i("div",null,[h,o("p",null,[o("strong",null,[d(c,{color:"FF9D00"},{default:t(()=>[e("一个 "),p,e(" 只会存在一个主进程，但它可以存在多个渲染进程，")]),_:1})]),e(" 由于 "),u,e(" 使用了 "),_,e(" 来展示 "),m,e(" 界面 (应用程序中被称为 "),E,e(")，自然而然地，"),g,e(" 的多进程架构也被引入。")]),o("p",null,[o("strong",null,[d(c,{color:"FF9D00"},{default:t(()=>[e("当主进程每创建一个独立的 "),b,e(" 实例，"),f,e(" 都会初始化一个独立的渲染进程，隔离了不同窗口之间的环境，")]),_:1})]),e(" 每一个渲染进程，只需要关心自己内部的 "),P,e(" 页面。")]),I])}const N=l(s,[["render",q]]);export{U as __pageData,N as default};
