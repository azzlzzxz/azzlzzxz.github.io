import{_ as a,o as n,c as e,N as l}from"./chunks/framework.2f525601.js";const y=JSON.parse('{"title":"Yarn","description":"","frontmatter":{},"headers":[],"relativePath":"node/npm/yarn.md","lastUpdated":1728901331000}'),p={name:"node/npm/yarn.md"};function o(r,s,c,t,i,d){return n(),e("div",null,s[0]||(s[0]=[l(`<h1 id="yarn" tabindex="-1">Yarn <a class="header-anchor" href="#yarn" aria-label="Permalink to &quot;Yarn&quot;">​</a></h1><h2 id="_1-x-classic" tabindex="-1">1.x（<code>classic</code>） <a class="header-anchor" href="#_1-x-classic" aria-label="Permalink to &quot;1.x（\`classic\`）&quot;">​</a></h2><ol><li><p>使用扁平化依赖解决<code>npm1</code>、<code>npm2</code>的嵌套结构。</p></li><li><p>采用了并行操作，支持并行安装多个依赖，提高安装速度。</p></li><li><p>使用缓存机制将每个包缓存在磁盘上，在下一次安装这个包时，可以脱离网络实现从磁盘离线安装。</p></li><li><p>发明了<code>lock</code>文件。</p></li><li><p><a href="https://yarnpkg.com/features/workspaces" target="_blank" rel="noreferrer"><u>workspace</u></a></p></li></ol><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#FFCB6B;">&quot;workspaces&quot;</span><span style="color:#82AAFF;">:</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#FFCB6B;">&quot;packages/*&quot;</span></span>
<span class="line"><span style="color:#BABED8;">  ]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_2-x-3-x-berry-pnp" tabindex="-1">2.x/3.x (berry <a href="https://yarnpkg.com/features/pnp" target="_blank" rel="noreferrer"><u>PnP</u></a>) <a class="header-anchor" href="#_2-x-3-x-berry-pnp" aria-label="Permalink to &quot;2.x/3.x (berry [&lt;u&gt;PnP&lt;/u&gt;](https://yarnpkg.com/features/pnp))&quot;">​</a></h2><blockquote><p>Node 18+</p></blockquote><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 切换yarn 版本</span></span>
<span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">set</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">version</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">berry</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>PnP</code> 的具体工作原理是，作为把依赖从缓存拷贝到 <code>node_modules</code> 的替代方案，<code>Yarn</code> 会维护一张静态映射表</p><div class="tip custom-block"><p class="custom-block-title">该表中包含了以下信息</p><ul><li>当前依赖树中包含了哪些依赖包的哪些版本</li><li>这些依赖包是如何互相关联的</li><li>这些依赖包在文件系统中的具体位置</li></ul></div><p>这个映射表在 <code>Yarn</code> 的 <code>PnP</code> 实现中对应项目目录中的 <code>.pnp.js</code> 文件</p><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/yarn.png" alt="yarn"></p><p>与 <code>pnpm</code> 不同，<code>pnpm</code> 使用内容可寻址存储，其中每个包中的每个文件都需要硬链接到其最终目标，<code>PnP</code> 加载程序通过其缓存路径直接引用包，从而消除了很多复杂性。</p><p><a href="https://yarnpkg.com/features/pnp#ghost-dependencies-protection" target="_blank" rel="noreferrer">幽灵依赖保护</a></p><p>由于 <code>Yarn</code> 保留了所有包及其依赖项的列表，因此它可以防止在解析过程中访问未说明的依赖项。</p><p><code>nodeLinker</code>安装模式：<a href="https://yarnpkg.com/features/linkers" target="_blank" rel="noreferrer"><u>install mode</u></a></p><ol><li><p><code>nodeLinker: pnp</code></p></li><li><p><code>nodeLinker: pnpm</code></p></li><li><p><code>nodeLinker: node_modules</code></p></li></ol><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">yarnPath:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">.yarn/releases/yarn-3.6.3.cjs</span></span>
<span class="line"><span style="color:#FFCB6B;">cacheFolder:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./.yarn/cache</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">nodeLinker:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pnpm</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">npmRegistryServer:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://registry.yarnpkg.com</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">PnP 不适用的</p><ul><li><p>已经开始使用大量依赖项，因此可能会列出大量依赖项的软件包数量成比例地增加</p></li><li><p>它们可能被锁定在各自软件包的旧版本上，因此更有可能包含幽灵依赖项</p></li><li><p>自己的脚本可能会无意中依赖于某些实现细节或幽灵依赖项</p></li></ul></div><div class="info custom-block"><p class="custom-block-title">相关资料</p><ul><li><a href="https://yarnpkg.com/" target="_blank" rel="noreferrer"><u>Yarn 官网</u></a></li></ul></div>`,19)]))}const m=a(p,[["render",o]]);export{y as __pageData,m as default};
