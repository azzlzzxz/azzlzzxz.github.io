import{_ as p,B as t,o as r,c,x as s,D as e,z as n,Q as o,a as l}from"./chunks/framework.a5035e6c.js";const h=JSON.parse('{"title":"IOC","description":"","frontmatter":{},"headers":[],"relativePath":"node/nest/ioc.md","lastUpdated":1699441501000}'),i={name:"node/nest/ioc.md"},D=o("",13),d=o("",15);function y(u,B,F,b,A,C){const a=t("font");return r(),c("div",null,[D,s("p",null,[s("strong",null,[e(a,{color:"FF9D00"},{default:n(()=>[l("在 Nest 中，IOC（Inversion of Control，控制反转）是一种设计模式，它用于管理和解决类之间的依赖关系。")]),_:1})])]),s("p",null,[s("strong",null,[e(a,{color:"FF9D00"},{default:n(()=>[l("Nest 使用依赖注入（DI）作为实现 IOC 的机制。依赖注入是一种设计模式，它允许将依赖项动态地注入到一个类中，而不是在类内部直接创建这些依赖项的实例。这样做的好处是可以实现松耦合的代码，提高可测试性和可维护性。")]),_:1})])]),d])}const I=p(i,[["render",y]]);export{h as __pageData,I as default};
