import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.a5035e6c.js";const B=JSON.parse('{"title":"箭头函数","description":"","frontmatter":{},"headers":[],"relativePath":"base/es6/arrowFn.md","lastUpdated":1695725889000}'),p={name:"base/es6/arrowFn.md"},e=l(`<h1 id="箭头函数" tabindex="-1">箭头函数 <a class="header-anchor" href="#箭头函数" aria-label="Permalink to &quot;箭头函数&quot;">​</a></h1><h2 id="什么是箭头函数" tabindex="-1">什么是箭头函数 <a class="header-anchor" href="#什么是箭头函数" aria-label="Permalink to &quot;什么是箭头函数&quot;">​</a></h2><p>箭头函数是 Es6 新增的一种定义函数表达式的语法，它简化了我们之前写的函数书写方式，箭头函数实例化的函数对象与我们 Es5 之前创建的函数表达式的创建函数行为是相同的。在任何使用函数表达式的地方，都可以使用箭头函数。</p><h2 id="箭头函数与普通函数有哪些区别" tabindex="-1">箭头函数与普通函数有哪些区别 <a class="header-anchor" href="#箭头函数与普通函数有哪些区别" aria-label="Permalink to &quot;箭头函数与普通函数有哪些区别&quot;">​</a></h2><h3 id="箭头函数的-this-指向规则" tabindex="-1">箭头函数的 this 指向规则 <a class="header-anchor" href="#箭头函数的-this-指向规则" aria-label="Permalink to &quot;箭头函数的 this 指向规则&quot;">​</a></h3><ol><li>箭头函数没有 prototype(原型)，所以箭头函数本身没有 this</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> sg </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#FFCB6B;">sg</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype) </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>箭头函数的 this 指向在定义的时候继承自外层第一个普通函数的 this</li></ol><p>一个函数中定义箭头函数，然后在另一个函数中执行箭头函数。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> a</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  barObj </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">msg</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bar的this指向</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">fooObj </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">msg</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo的this指向</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">bar</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(barObj) </span><span style="color:#676E95;font-style:italic;">// 将bar的this指向barObj</span></span>
<span class="line"><span style="color:#BABED8;">foo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(fooObj) </span><span style="color:#676E95;font-style:italic;">// 将foo的this指向fooObj</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">a</span><span style="color:#F07178;">() </span><span style="color:#676E95;font-style:italic;">// 结果：{ msg: &#39;bar的this指向&#39; }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">bar</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">this指向定义的时候外层第一个普通函数</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 在bar中定义 this继承于bar函数的this指向</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>从上面 🌰 中可以得出两点：</p><ul><li>箭头函数的 this 指向定义时所在的外层第一个普通函数，跟使用位置没有关系。</li><li>被继承的普通函数的 this 指向改变，箭头函数的 this 指向会跟着改变</li></ul><ol start="3"><li>不能直接修改箭头函数的 this 指向</li></ol><p>上个栗子中的 foo 函数修改一下，尝试直接修改箭头函数的 this 指向。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> fnObj </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">msg</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">尝试直接修改箭头函数的this指向</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">fnObj</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 结果：{ msg: &#39;bar的this指向&#39; }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>很明显，call 显示绑定 this 指向失败了，包括 apply、bind 都一样。</p><blockquote><p>它们(call、aaply、bind)会默认忽略第一个参数，但是可以正常传参。</p></blockquote><p>然后我又通过隐式绑定来尝试同样也失败了，new 调用会报错，所有，箭头函数不能直接修改它的 this 指向。</p><p>然而，我们可以通过间接的形式来修改箭头函数的指向：</p><p>去修改被继承的普通函数的 this 指向，然后箭头函数的 this 指向也会跟着改变，这在上一个栗子中有演示。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 将bar普通函数的this指向barObj 然后内部的箭头函数也会指向barObj</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">bar</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(barObj)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="4"><li>箭头函数外层没有普通函数，严格模式和非严格模式下它的 this 都会指向 window(全局对象)</li></ol><p>既然箭头函数的 this 指向在定义的时候继承自外层第一个普通函数的 this，那么当箭头函数外层没有普通函数，它的 this 会指向哪里？</p><p>这里跟我之前写的 this 绑定规则不太一样(不懂的可以点进去看一下),普通函数的默认绑定规则是：</p><ul><li>在非严格模式下，默认绑定的 this 指向全局对象，严格模式下 this 指向 undefined</li><li>如果箭头函数外层没有普通函数继承，它 this 指向的规则：箭头函数在全局作用域下，严格模式和非严格模式下它的 this 都会指向 window(全局对象)。</li></ul><p>严格模式在中途声明无效，必须在全局/函数的开头声明才会生效：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">a </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use strict</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// 严格模式无效 必须在一开始就声明严格模式</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">b </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 不报错</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="箭头函数的-arguments" tabindex="-1">箭头函数的 arguments <a class="header-anchor" href="#箭头函数的-arguments" aria-label="Permalink to &quot;箭头函数的 arguments&quot;">​</a></h3><ol><li>箭头函数的 this 指向全局，使用 arguments 会报未声明的错误</li></ol><p>如果箭头函数的 this 指向 window(全局对象)使用 arguments 会报错，未声明 arguments。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">arguments</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">b</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">4</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">Uncaught </span><span style="color:#FFCB6B;">ReferenceError</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> arguments is not defined</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,31),o=[e];function t(r,c,i,y,D,F){return a(),n("div",null,o)}const u=s(p,[["render",t]]);export{B as __pageData,u as default};
