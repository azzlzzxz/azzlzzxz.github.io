import{_ as c,B as r,o as t,c as i,N as p,x as n,a,D as e,z as o}from"./chunks/framework.2f525601.js";const E=JSON.parse('{"title":"Scheduler 调度器","description":"","frontmatter":{},"headers":[],"relativePath":"rsource/react/schedule.md","lastUpdated":1729414590000}'),y={name:"rsource/react/schedule.md"};function F(D,s,u,b,d,m){const l=r("font");return t(),i("div",null,[s[7]||(s[7]=p(`<h1 id="scheduler-调度器" tabindex="-1">Scheduler 调度器 <a class="header-anchor" href="#scheduler-调度器" aria-label="Permalink to &quot;Scheduler 调度器&quot;">​</a></h1><p><code>Scheduler</code>他包含两个功能：</p><ul><li><p>时间切片</p></li><li><p>优先级调度</p></li></ul><h2 id="时间切片" tabindex="-1">时间切片 <a class="header-anchor" href="#时间切片" aria-label="Permalink to &quot;时间切片&quot;">​</a></h2><p>时间切片的本质是模拟实现<a href="/base/browser/api#requestidlecallback"><u>requestIdleCallback</u></a></p><div class="tip custom-block"><p class="custom-block-title">那<code>React</code>为什么不使用 <code>requestIdleCallback</code> ？</p><ul><li>浏览器兼容性</li><li>执行任务的帧空闲时间不可控</li><li>触发频率不稳定，受很多因素影响</li></ul><p>基于以上原因，<code>React</code>实现了功能更完备的<code>requestIdleCallback</code> <code>polyfill</code>，这就是<code>Scheduler</code></p></div><p><code>Scheduler</code>的时间切片功能是通过<code>task</code>（宏任务）实现的</p><p>最常见的<code>task</code>当属<code>setTimeout</code>了。但是有个<code>task</code>比<code>setTimeout</code>执行时机更靠前，那就是<code>MessageChannel</code>。</p><p>所以<code>Scheduler</code>将需要被执行的回调函数作为<code>MessageChannel</code>的回调执行。如果当前宿主环境不支持<code>MessageChannel</code>，则使用<code>setTimeout</code>。</p><h2 id="优先级调度" tabindex="-1">优先级调度 <a class="header-anchor" href="#优先级调度" aria-label="Permalink to &quot;优先级调度&quot;">​</a></h2><p><code>Scheduler</code>是独立于<code>React</code>的包，所以他的优先级也是独立于<code>React</code>的优先级的</p><p><code>Scheduler</code>内部存在<code>5种</code>优先级(<a href="https://github.com/azzlzzxz/react-source-code/blob/main/packages/scheduler/src/SchedulerPriorities.js" target="_blank" rel="noreferrer"><u>源码地址 ｜ SchedulerPriorities 🚀</u></a>):</p><ul><li><p><code>NoPriority = 0</code>：无优先级</p></li><li><p><code>ImmediatePriority = 1</code>：立刻执行优先级</p></li><li><p><code>UserBlockingPriority = 2</code>：用户阻塞操作优先级，例如：用户点击 ，用户输入等</p></li><li><p><code>NormalPriority = 3</code>：正常优先级</p></li><li><p><code>LowPriority = 4</code>：低优先级</p></li><li><p><code>IdlePriority = 5</code>：空闲优先级</p></li></ul><h3 id="优先级的意义" tabindex="-1">优先级的意义 <a class="header-anchor" href="#优先级的意义" aria-label="Permalink to &quot;优先级的意义&quot;">​</a></h3><p><code>Scheduler</code>对外暴露最重要的方法便是<code>unstable_scheduleCallback</code>。该方法用于以某个优先级注册回调函数</p><p>不同优先级意味着不同时长的任务过期时间：</p><ul><li><p><code>IMMEDIATE_PRIORITY_TIMEOUT = -1</code>：立刻过期</p></li><li><p><code>USER_BLOCKING_PRIORITY_TIMEOUT = 250</code>：用户阻塞优先级 250 毫秒</p></li><li><p><code>NORMAL_PRIORITY_TIMEOUT = 5000</code>：正常优先级的过期时间 5 秒</p></li><li><p><code>LOW_PRIORITY_TIMEOUT = 10000</code>：低优先级过期时间 10 秒</p></li><li><p><code>IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt = 1073741823</code>：永不过期</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> timeout</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 任务的开始时间</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> startTime </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> performance</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#BABED8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#BABED8;"> (priorityLevel) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#BABED8;"> ImmediatePriority</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">    timeout </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> IMMEDIATE_PRIORITY_TIMEOUT</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#BABED8;"> UserBlockingPriority</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">    timeout </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> USER_BLOCKING_PRIORITY_TIMEOUT</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#BABED8;"> IdlePriority</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">    timeout </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> IDLE_PRIORITY_TIMEOUT</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#BABED8;"> LowPriority</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">    timeout </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> LOW_PRIORITY_TIMEOUT</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#BABED8;"> NormalPriority</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">    timeout </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> NORMAL_PRIORITY_TIMEOUT</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 任务过期时间</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> expirationTime </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> startTime </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> timeout</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>可以看到，如果一个任务的优先级是<code>ImmediatePriority</code>，对应<code>IMMEDIATE_PRIORITY_TIMEOUT</code>为<code>-1</code>，那么</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> expirationTime </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> startTime </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>则该任务的过期时间比当前时间还短，表示他已经过期了，需要立即被执行。</p><h3 id="不同优先级任务的排序" tabindex="-1">不同优先级任务的排序 <a class="header-anchor" href="#不同优先级任务的排序" aria-label="Permalink to &quot;不同优先级任务的排序&quot;">​</a></h3><p>优先级意味着任务的过期时间。设想一个大型 <code>React</code> 项目，在某一刻，存在很多不同优先级的任务，对应不同的过期时间。</p><p>同时，又因为任务可以被延迟，所以我们可以将这些任务按是否被延迟分为：</p><ul><li><p>已就绪任务</p></li><li><p>未就绪任务</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#BABED8;"> options </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">object</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#BABED8;"> options </span><span style="color:#89DDFF;">!==</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">null</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">delay</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">options</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">delay</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">delay</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">number</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">delay</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 任务被延迟</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">startTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">currentTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">delay</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">startTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">currentTime</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">startTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">currentTime</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>Scheduler</code>存在两个队列：</p><ul><li><p><code>timerQueue</code>：保存未就绪任务</p></li><li><p><code>taskQueue</code>：保存已就绪任务</p></li></ul><p>每当有新的未就绪的任务被注册，我们将其插入<code>timerQueue</code>并根据开始时间重新排列<code>timerQueue</code>中任务的顺序。</p><p>当<code>timerQueue</code>中有任务就绪，即<code>startTime &lt;= currentTime</code>，我们将其取出并加入<code>taskQueue</code>。</p><div class="tip custom-block"><p class="custom-block-title"><code>currentTime</code></p><ul><li>获取当前时间</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> currentTime </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> performance</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#BABED8;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div><p>取出<code>taskQueue</code>中最早过期的任务并执行他。</p><p>为了能在<code>O(1)复杂度</code>找到两个队列中时间最早的那个任务，<code>Scheduler</code>使用<code>最小堆</code>实现了优先级队列</p><hr><p><strong>下面我们看看 React 是如何实现<code>Scheduler</code>的</strong></p><h2 id="scheduler-js" tabindex="-1"><code>Scheduler.js</code> <a class="header-anchor" href="#scheduler-js" aria-label="Permalink to &quot;\`Scheduler.js\`&quot;">​</a></h2><ul><li><p><code>push</code>、<code>peek</code>、<code>pop</code>方法均属于最小堆的方法</p><ul><li><p>关于最小堆的实现可以看<a href="/rsource/react/preknowledge#最小堆">前置知识｜最小堆</a></p></li><li><p><a href="https://github.com/azzlzzxz/react-source-code/blob/main/packages/scheduler/src/SchedulerMinHeap.js" target="_blank" rel="noreferrer"><u>React 源码 最小堆的实现 ｜ SchedulerMinHeap.js</u></a></p></li></ul></li><li><p><code>scheduleCallback</code>函数：按优先级执行任务</p></li><li><p><code>requestHostCallback</code>函数：通过<code>MessageChannel</code>，开始执行任务<code>performWorkUntilDeadline</code></p></li><li><p><code>performWorkUntilDeadline</code>函数：从最小堆中依次取出优先级最高的任务循环执行，直到没有任务需要被执行</p><ul><li><p><code>workLoop</code>: 执行任务</p></li><li><p><code>shouldYieldToHost</code>：判断是否需要放弃执行任务</p></li></ul></li></ul><blockquote><p>流程图</p></blockquote><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/react/schedule_flow.jpg" alt="schedule_flow"></p><h3 id="schedulecallback" tabindex="-1"><code>scheduleCallback</code> <a class="header-anchor" href="#schedulecallback" aria-label="Permalink to &quot;\`scheduleCallback\`&quot;">​</a></h3>`,40)),n("ul",null,[n("li",null,[n("p",null,[s[1]||(s[1]=a("根据优先级，计算任务过期时间（")),n("strong",null,[e(l,{color:"#FF4229"},{default:o(()=>s[0]||(s[0]=[a("任务的过期时间 是一个 绝对值 不会改变")])),_:1})]),s[2]||(s[2]=a("）"))])]),s[6]||(s[6]=n("li",null,[n("p",null,"创建一个任务")],-1)),n("li",null,[n("p",null,[s[4]||(s[4]=a("向任务最小堆里添加任务，排序的依据是过期时间（")),n("strong",null,[e(l,{color:"#FF4229"},{default:o(()=>s[3]||(s[3]=[a("严格按照 过期时间 进行调度")])),_:1})]),s[5]||(s[5]=a("）"))])])]),s[8]||(s[8]=p(`<div class="tip custom-block"><p class="custom-block-title">高优先级先执行，低优先级后执行</p><ul><li>如果最小堆里的低优先级任务前面的高优先级任务都执行完毕了，这时又来了一个高优先级任务，该怎么执行？</li></ul><p>还是 <strong><code>比较过期时间</code></strong>，即使来的是高优先级，如果<code>低优先级的任务的过期时间 比 高优先级的任务过期时间长</code>，就会<code>先执行这个 过期时间长的低优先级任务</code></p><ul><li>如果一个任务已经过期了，那么在执行过程中，是不能被打断的</li></ul></div><ul><li>调用<code>requestHostCallback</code>开始执行任务</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">getCurrentTime</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">performance</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 按优先级执行任务</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">*</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#BABED8;font-style:italic;">priorityLevel</span><span style="color:#676E95;font-style:italic;"> 优先级的级别</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">*</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#BABED8;font-style:italic;">callback</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">scheduleCallback</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">priorityLevel</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">callback</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 获取当前的时候</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">currentTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getCurrentTime</span><span style="color:#F07178;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 此任务的开时间</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">startTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">currentTime</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//超时时间</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">timeout</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//根据优先级计算过期的时间</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">priorityLevel</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ImmediatePriority</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">timeout</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">IMMEDIATE_PRIORITY_TIMEOUT</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// -1</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">UserBlockingPriority</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">timeout</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">USER_BLOCKING_PRIORITY_TIMEOUT</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 250 ms</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">IdlePriority</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">timeout</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">IDLE_PRIORITY_TIMEOUT</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 1073741823</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">LowPriority</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">timeout</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">LOW_PRIORITY_TIMEOUT</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 1000</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">NormalPriority</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">timeout</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">NORMAL_PRIORITY_TIMEOUT</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 500</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//计算此任务的过期时间</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">expirationTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">startTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">timeout</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">newTask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    id</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">taskIdCounter</span><span style="color:#89DDFF;">++,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">callback</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 回调函数或者说任务函数</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">priorityLevel</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 优先级别</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">startTime</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 任务的开始时间</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">expirationTime</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 任务的过期时间</span></span>
<span class="line"><span style="color:#F07178;">    sortIndex</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">expirationTime</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 排序依据</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 向任务最小堆里添加任务，排序的依据是过期时间</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">taskQueue</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">newTask</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// flushWork执行工作，刷新工作，执行任务</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">requestHostCallback</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">flushWork</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">newTask</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br></div></div><h3 id="requesthostcallback" tabindex="-1"><code>requestHostCallback</code> <a class="header-anchor" href="#requesthostcallback" aria-label="Permalink to &quot;\`requestHostCallback\`&quot;">​</a></h3><ul><li><p>缓存回调函数</p></li><li><p>通过<code>MessageChannel</code>这个宏任务，实现类似于<code>requestIdleCallback</code></p></li></ul><blockquote><p>流程图</p></blockquote><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/react/scheduler_method.jpg" alt="scheduler_method"></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> channel </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">MessageChannel</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> port2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> channel</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">port2</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> port1 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> channel</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">port1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">port1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">onmessage </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> performWorkUntilDeadline</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">requestHostCallback</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">flushWork</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//先缓存回调函数</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">scheduleHostCallback</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">flushWork</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//执行工作直到截止时间</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">schedulePerformWorkUntilDeadline</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 开始执行任务队列中的任务</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">flushWork</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">startTime</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">workLoop</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">startTime</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">schedulePerformWorkUntilDeadline</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">port2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">postMessage</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="performworkuntildeadline" tabindex="-1"><code>performWorkUntilDeadline</code> <a class="header-anchor" href="#performworkuntildeadline" aria-label="Permalink to &quot;\`performWorkUntilDeadline\`&quot;">​</a></h3><ul><li>执行任务循环，直到没有任务需要被执行</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">performWorkUntilDeadline</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">scheduleHostCallback</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 先获取开始执行任务的时间, 表示时间片的开始</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">startTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getCurrentTime</span><span style="color:#F07178;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 是否有更多的工作要做</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">hasMoreWork</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">//执行workLoop，并判断有没有返回值</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">hasMoreWork</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">scheduleHostCallback</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">startTime</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 执行完以后如果为true,说明还有更多工作要做</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">hasMoreWork</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 继续执行 workLoop</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">schedulePerformWorkUntilDeadline</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">scheduleHostCallback</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="workloop-开始工作循环" tabindex="-1"><code>workLoop</code> 开始工作循环 <a class="header-anchor" href="#workloop-开始工作循环" aria-label="Permalink to &quot;\`workLoop\` 开始工作循环&quot;">​</a></h3><ul><li><p>从最小堆中取出优先级最高的的任务，开始执行工作循环</p></li><li><p>执行<code>scheduleCallback</code>函数，传入的<code>callback</code>回调函数，判断<code>callback</code>的返回是否是函数</p><ul><li><p>如果是函数，说明还有任务需要执行，<code>return true</code>，任务已经完成，则不需要再继续执行了，可以把此任务弹出<code>pop(taskQueue)</code></p></li><li><p>否则就直接把此任务弹出<code>pop(taskQueue)</code></p></li></ul></li><li><p>如果当前的任务执行完了，或者当前任务不合法，取出下一个任务执行<code>currentTask = peek(taskQueue)</code></p></li><li><p>没有任何要完成的任务了 <code>return false</code></p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">workLoop</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">startTime</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">currentTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">startTime</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 取出优先级最高的任务</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">currentTask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">peek</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">taskQueue</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">currentTask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果此任务的过期时间小于当前时间，说明任务没有过期，并且需要放弃执行，时间片到期</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">currentTask</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">expirationTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">currentTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">shouldYieldToHost</span><span style="color:#F07178;">()) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 跳出工作循环</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 取出当前的任务中的回调函数 （scheduleCallback里的callback回调函数）</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">callback</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">currentTask</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">callback</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">callback</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">currentTask</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">callback</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 回调函数是否过期</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">didUserCallbackTimeout</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">currentTask</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">expirationTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">currentTime</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 执行工作，如果返回新的函数，则表示当前的工作没有完成</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">continuationCallback</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">callback</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">didUserCallbackTimeout</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">continuationCallback</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">currentTask</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">callback</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">continuationCallback</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 还有任务要执行</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 如果此任务已经完成，则不需要再继续执行了，可以把此任务弹出</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">currentTask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">peek</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">taskQueue</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">pop</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">taskQueue</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">pop</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">taskQueue</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果当前的任务执行完了，或者当前任务不合法，取出下一个任务执行</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">currentTask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">peek</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">taskQueue</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 如果循环结束还有未完成的任务，那就表示hasMoreWork=true</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">currentTask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 没有任何要完成的任务了</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><h3 id="shouldyieldtohost" tabindex="-1"><code>shouldYieldToHost</code> <a class="header-anchor" href="#shouldyieldtohost" aria-label="Permalink to &quot;\`shouldYieldToHost\`&quot;">​</a></h3><ul><li><p><code>frameInterval</code>：<code>React</code>会在每一帧向浏览器申请<code>5ms</code>用于自己任务执行，如果<code>5ms</code>内没有完成，<code>React</code>就会放弃控制权，把控制权交还给浏览器</p></li><li><p><code>shouldYieldToHost</code>函数：通过过去的时间和<code>frameInterval</code>进行比较，来判断任务是否过期，跳出工作循环</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> frameInterval </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">shouldYieldToHost</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 用当前时间减去开始的时间就是过去的时间</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">timeElapsed</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getCurrentTime</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">startTime</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//如果说经过的时间小于5ms，那就不需要放弃执行</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">timeElapsed</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">frameInterval</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 否则就是表示5ms用完了，需要放弃执行</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="unstable-cancelcallback-取消任务" tabindex="-1"><code>unstable_cancelCallback</code> 取消任务 <a class="header-anchor" href="#unstable-cancelcallback-取消任务" aria-label="Permalink to &quot;\`unstable_cancelCallback\` 取消任务&quot;">​</a></h3><ul><li>在<code>workLoop</code>中，会判断<code>continuationCallback</code>是不是函数，不是的话直接出队</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">unstable_cancelCallback</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">task</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">task</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">callback</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">源码地址</p><p>实现<code>Scheduler</code>的相关代码我放在了<a href="https://github.com/azzlzzxz/react-code/tree/13.scheduler" target="_blank" rel="noreferrer"><u>13.scheduler 分支里了 点击直达 🚀</u></a></p></div><div class="info custom-block"><p class="custom-block-title">相关资料</p><ul><li><a href="https://react.iamkasong.com/concurrent/scheduler.html" target="_blank" rel="noreferrer">Scheduler 的原理与实现</a></li></ul></div>`,22))])}const A=c(y,[["render",F]]);export{E as __pageData,A as default};
