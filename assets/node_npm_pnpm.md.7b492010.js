import{_ as n,o as a,c as p,N as l}from"./chunks/framework.2f525601.js";const y=JSON.parse('{"title":"PNPM","description":"","frontmatter":{},"headers":[],"relativePath":"node/npm/pnpm.md","lastUpdated":1729657648000}'),e={name:"node/npm/pnpm.md"};function o(c,s,r,t,d,i){return a(),p("div",null,s[0]||(s[0]=[l(`<h1 id="pnpm" tabindex="-1">PNPM <a class="header-anchor" href="#pnpm" aria-label="Permalink to &quot;PNPM&quot;">​</a></h1><h2 id="pnpm-介绍" tabindex="-1"><code>pnpm</code> 介绍 <a class="header-anchor" href="#pnpm-介绍" aria-label="Permalink to &quot;\`pnpm\` 介绍&quot;">​</a></h2><p><code>pnpm - performant npm</code>，在 <code>2017</code> 年正式发布，定义为快速的，节省磁盘空间的包管理工具，开创了一套新的依赖管理机制，成为了包管理的后起之秀。</p><h2 id="节省磁盘空间" tabindex="-1">节省磁盘空间 <a class="header-anchor" href="#节省磁盘空间" aria-label="Permalink to &quot;节省磁盘空间&quot;">​</a></h2><p>使用 <code>npm</code> 时，依赖每次被不同的项目使用，都会重复安装一次。 而在使用 <code>pnpm</code> 时，依赖会被存储在内容可寻址的存储中，所以：</p><ul><li>如果你用到了某依赖项的不同版本，只会将不同版本间有差异的文件添加到仓库。</li></ul><blockquote><p>举个 🌰</p></blockquote><p>如果某个包有 <code>100</code> 个文件，而它的新版本只改变了其中 <code>1</code> 个文件。那么 <code>pnpm update</code> 时只会向存储中心额外添加 <code>1</code> 个新文件，而不会因为仅仅一个文件的改变复制整新版本包的内容。</p><ul><li>所有文件都会存储在硬盘上的某一位置。 当软件包被被安装时，包里的文件会硬链接到这一位置，而不会占用额外的磁盘空间。</li></ul><p>这允许你跨项目地共享同一版本的依赖，因此，您在磁盘上节省了大量空间，这与项目和依赖项的数量成正比，并且安装速度要快得多！</p><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/pnpm_one.jpg" alt="pnpm_one"></p><h3 id="硬链接" tabindex="-1">硬链接 <a class="header-anchor" href="#硬链接" aria-label="Permalink to &quot;硬链接&quot;">​</a></h3><ol><li><p>硬链接就是多个文件名指向了同一个文件，这多个文件互为硬链接。</p></li><li><p>通过硬链接，不会产生额外的磁盘占用，并且，两个文件都能找到相同的磁盘内容</p></li><li><p>硬链接的数量没有限制，可以为同一个文件产生多个硬链接</p></li><li><p>硬链接的概念来自于 <code>Unix</code> 操作系统，它是指将一个文件 <code>A</code> 指针复制到另一个文件 <code>B</code> 指针中，文件 <code>B</code> 就是文件 <code>A</code> 的硬链接</p></li></ol><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/hard_link.jpg" alt="hard_link"></p><h3 id="软连接-符号链接" tabindex="-1">软连接(符号链接) <a class="header-anchor" href="#软连接-符号链接" aria-label="Permalink to &quot;软连接(符号链接)&quot;">​</a></h3><ol><li><p>软链接就是快捷方式，是一个单独文件。就像我们电脑桌面上的快捷方式，大小只有几字节，指向源文件，点击快捷方式，其实执行的就是源文件。</p></li><li><p>符号链接又称为软连接，如果为某个文件或文件夹 <code>A</code> 创建符号连接 <code>B</code>，则 <code>B</code> 指向 <code>A</code>。</p></li></ol><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/symbol_link.jpg" alt="symbol_link"></p><h3 id="软链接和硬链接的区别" tabindex="-1">软链接和硬链接的区别 <a class="header-anchor" href="#软链接和硬链接的区别" aria-label="Permalink to &quot;软链接和硬链接的区别&quot;">​</a></h3><ol><li><p>硬链接仅能链接文件，而符号链接可以链接目录</p></li><li><p>硬链接在链接完成后仅和文件内容关联，和之前链接的文件没有任何关系。而符号链接始终和之前链接的文件关联，和文件内容不直接相关</p></li></ol><h3 id="node-环境对硬链接和软链接的处理" tabindex="-1"><code>node</code> 环境对硬链接和软链接的处理 <a class="header-anchor" href="#node-环境对硬链接和软链接的处理" aria-label="Permalink to &quot;\`node\` 环境对硬链接和软链接的处理&quot;">​</a></h3><ol><li><p>硬链接：硬链接是一个实实在在的文件，<code>node</code> 不对其做任何特殊处理，也无法区别对待，实际上，<code>node</code> 根本无从知晓该文件是不是一个硬链接</p></li><li><p>软链接：由于符号链接指向的是另一个文件或目录，当 <code>node</code> 执行符号链接下的 <code>JS</code> 文件时，会使用原始路径。</p></li></ol><h2 id="pnpm-原理" tabindex="-1"><code>pnpm</code> 原理 <a class="header-anchor" href="#pnpm-原理" aria-label="Permalink to &quot;\`pnpm\` 原理&quot;">​</a></h2><p><code>pnpm</code> 引入了另一套依赖管理策略：内容寻址存储。</p><p>该策略会将包安装在系统的全局 <code>store</code> 中，依赖的每个版本只会在系统中安装一次。</p><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/pnpm_store.jpg" alt="pnpm_store"></p><p>在引用项目 <code>node_modules</code> 的依赖时，会通过硬链接与符号链接在全局 <code>store</code> 中找到这个文件。</p><p><code>node_modules</code> 中每个包的每个文件都是来自内容可寻址存储的硬链接。</p><p>假设您安装了依赖于 <code>bar@1.0.0</code> 的 <code>foo@1.0.0</code>。 <code>pnpm</code> 会将两个包硬链接到 <code>node_modules</code> 如下所示：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">node_modules</span></span>
<span class="line"><span style="color:#BABED8;">└── .</span><span style="color:#FFCB6B;">pnpm</span></span>
<span class="line"><span style="color:#BABED8;">    ├── bar@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span></span>
<span class="line"><span style="color:#BABED8;">    │   └── node_modules</span></span>
<span class="line"><span style="color:#BABED8;">    │       └── bar </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">&lt;store&gt;</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">bar</span></span>
<span class="line"><span style="color:#BABED8;">    │           ├── index.</span><span style="color:#FFCB6B;">js</span></span>
<span class="line"><span style="color:#BABED8;">    │           └── package.</span><span style="color:#FFCB6B;">json</span></span>
<span class="line"><span style="color:#BABED8;">    └── foo@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span></span>
<span class="line"><span style="color:#BABED8;">        └── node_modules</span></span>
<span class="line"><span style="color:#BABED8;">            └── foo </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">&lt;store&gt;</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">foo</span></span>
<span class="line"><span style="color:#BABED8;">                ├── index.</span><span style="color:#FFCB6B;">js</span></span>
<span class="line"><span style="color:#BABED8;">                └── package.</span><span style="color:#FFCB6B;">json</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/pnpm_pj.jpg" alt="pnpm_pj"></p><p>这是<code>node_modules</code> 中的唯一的<code>“真实”</code>文件。 一旦所有包都硬链接到<code>node_modules</code>，就会创建符号链接来构建嵌套的依赖关系图结构。</p><p>您可能已经注意到，这两个包都硬链接到一个<code>node_modules</code> 文件夹（<code>foo@1.0.0/node_modules/foo</code>）内的子文件夹中。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>允许包自行导入自己。</li></ul><p><code>foo</code> 应该能够 <code>require(&#39;foo/package.json&#39;)</code> 或者 <code>import \\* as package from &quot;foo/package.json&quot;。</code></p><ul><li>避免循环符号链接。</li></ul><p>依赖以及需要依赖的包被放置在一个文件夹下。 对于 <code>Node.js</code> 来说，依赖是在包的内部<code>node_modules</code> 中或在任何其它在父目录<code>node_modules</code> 中是没有区别的。</p></div><p>安装的下一阶段是符号链接依赖项。 <code>bar</code> 将被符号链接到 <code>foo@1.0.0/node_modules</code> 文件夹：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">node_modules</span></span>
<span class="line"><span style="color:#BABED8;">└── .</span><span style="color:#FFCB6B;">pnpm</span></span>
<span class="line"><span style="color:#BABED8;">    ├── bar@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span></span>
<span class="line"><span style="color:#BABED8;">    │   └── node_modules</span></span>
<span class="line"><span style="color:#BABED8;">    │       └── bar </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">&lt;store&gt;</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">bar</span></span>
<span class="line"><span style="color:#BABED8;">    └── foo@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span></span>
<span class="line"><span style="color:#BABED8;">        └── node_modules</span></span>
<span class="line"><span style="color:#BABED8;">            ├── foo </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">&lt;store&gt;</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">foo</span></span>
<span class="line"><span style="color:#BABED8;">            └── bar </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">../../</span><span style="color:#BABED8;">bar@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">bar</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/pnpm_form-data.jpg" alt="pnpm_form-data"></p><p>接下来，处理直接依赖关系。 <code>foo</code> 将被符号链接至根目录的<code>node_modules</code> 文件夹，因为 <code>foo</code> 是项目的依赖项：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">node_modules</span></span>
<span class="line"><span style="color:#BABED8;">├── foo </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> .</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">.</span><span style="color:#FFCB6B;">pnpm</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">foo@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">foo</span></span>
<span class="line"><span style="color:#BABED8;">└── .</span><span style="color:#FFCB6B;">pnpm</span></span>
<span class="line"><span style="color:#BABED8;">    ├── bar@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span></span>
<span class="line"><span style="color:#BABED8;">    │   └── node_modules</span></span>
<span class="line"><span style="color:#BABED8;">    │       └── bar </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">&lt;store&gt;</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">bar</span></span>
<span class="line"><span style="color:#BABED8;">    └── foo@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span></span>
<span class="line"><span style="color:#BABED8;">        └── node_modules</span></span>
<span class="line"><span style="color:#BABED8;">            ├── foo </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">&lt;store&gt;</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">foo</span></span>
<span class="line"><span style="color:#BABED8;">            └── bar </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">../../</span><span style="color:#BABED8;">bar@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">bar</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/pnpm_axios.jpg" alt="pnpm_axios"></p><p>这是一个非常简单的例子。 但是，无论依赖项的数量和依赖关系图的深度如何，布局都会保持这种结构。</p><p>让我们添加 <code>qar@2.0.0</code> 作为 <code>bar</code> 和 <code>foo</code> 的依赖项。 这是新的结构的样子：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">node_modules</span></span>
<span class="line"><span style="color:#BABED8;">├── foo </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> .</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">.</span><span style="color:#FFCB6B;">pnpm</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">foo@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">foo</span></span>
<span class="line"><span style="color:#BABED8;">└── .</span><span style="color:#FFCB6B;">pnpm</span></span>
<span class="line"><span style="color:#BABED8;">    ├── bar@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span></span>
<span class="line"><span style="color:#BABED8;">    │   └── node_modules</span></span>
<span class="line"><span style="color:#BABED8;">    │       ├── bar </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">&lt;store&gt;</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">bar</span></span>
<span class="line"><span style="color:#BABED8;">    │       └── qar </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">../../</span><span style="color:#BABED8;">qar@</span><span style="color:#F78C6C;">2.0</span><span style="color:#BABED8;">.0</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">qar</span></span>
<span class="line"><span style="color:#BABED8;">    ├── foo@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span></span>
<span class="line"><span style="color:#BABED8;">    │   └── node_modules</span></span>
<span class="line"><span style="color:#BABED8;">    │       ├── foo </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">&lt;store&gt;</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">foo</span></span>
<span class="line"><span style="color:#BABED8;">    │       ├── bar </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">../../</span><span style="color:#BABED8;">bar@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">bar</span></span>
<span class="line"><span style="color:#BABED8;">    │       └── qar </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">../../</span><span style="color:#BABED8;">qar@</span><span style="color:#F78C6C;">2.0</span><span style="color:#BABED8;">.0</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">qar</span></span>
<span class="line"><span style="color:#BABED8;">    └── qar@</span><span style="color:#F78C6C;">2.0</span><span style="color:#BABED8;">.0</span></span>
<span class="line"><span style="color:#BABED8;">        └── node_modules</span></span>
<span class="line"><span style="color:#BABED8;">            └── qar </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">&lt;store&gt;</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">qar</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>如你所见，即使图形现在更深<code>（foo &gt; bar &gt; qar）</code>，但目录深度仍然相同。</p><p>这种布局乍一看可能很奇怪，但它与 <code>Node</code> 的模块解析算法完全兼容！</p><p>解析模块时，<code>Node</code> 会忽略符号链接，因此当 <code>foo@1.0.0/node_modules/foo/index.js</code> 需要 <code>bar</code> 时，<code>Node</code> 不会使用在 <code>foo@1.0.0/node_modules/bar</code> 的 <code>bar</code>，相反<code>bar</code> 是被解析到其实际位置<code>（bar@1.0.0/node_modules/bar）</code>。</p><p>因此，<code>bar</code> 也可以解析其在 <code>bar@1.0.0/node_modules</code> 中的依赖项。</p><p>这种布局的一大好处是只有真正在依赖项中的包才能访问。</p><h2 id="pnpm-workspace-原理" tabindex="-1"><code>pnpm workspace</code> 原理 <a class="header-anchor" href="#pnpm-workspace-原理" aria-label="Permalink to &quot;\`pnpm workspace\` 原理&quot;">​</a></h2><p><code>pnpm workspace</code> 提供了一种在单一项目仓库中管理多个相关项目的机制。它允许你通过一个根目录的 <code>pnpm-workspace.yaml</code> 文件来配置和管理多个包。</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">packages</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">packages/*</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在这个配置中，<code>pnpm</code>会将 <code>packages</code> 目录下的所有子目录视为工作区内的包。</p><h3 id="依赖共享和管理" tabindex="-1">依赖共享和管理 <a class="header-anchor" href="#依赖共享和管理" aria-label="Permalink to &quot;依赖共享和管理&quot;">​</a></h3><p>在 <code>pnpm workspace</code> 中，每个包都有它自己的 <code>package.json</code> 文件，定义了各自的依赖关系。</p><p>由于 <code>pnpm</code> 使用全局缓存和符号链接，所以所有包之间的依赖会尽可能共享。</p><ul><li>共享依赖</li></ul><p>如果多个包依赖同一个版本的依赖项，<code>pnpm</code> 会从全局缓存中引用这个依赖，并在多个包之间共享。</p><ul><li>本地包引用</li></ul><p>在工作区中，如果一个包（例如 <code>package-a</code>）依赖另一个本地包（例如 <code>package-b</code>），<code>pnpm</code> 会自动处理这个依赖关系并将它符号链接起来。这意味着 <code>package-a</code> 可以直接引用 <code>package-b</code>，而不需要发布 <code>package-b</code>。</p><h3 id="工作区的并行操作" tabindex="-1">工作区的并行操作 <a class="header-anchor" href="#工作区的并行操作" aria-label="Permalink to &quot;工作区的并行操作&quot;">​</a></h3><p><code>pnpm workspace</code> 提供了各种命令来操作工作区中的所有包。</p><p>例如，<code>pnpm install</code> 会安装所有工作区包的依赖，<code>pnpm run build --filter &lt;package&gt;</code> 可以只构建某一个包，<code>pnpm recursive</code> 则可以在多个包之间并行运行命令。</p><div class="tip custom-block"><p class="custom-block-title">优点</p><ul><li>依赖的去重和共享</li></ul><p>它会对整个工作区的依赖进行去重、共享和符号链接。因此，工作区中相同的依赖不会被重复安装多次，最大限度地节省了磁盘空间和安装时间。</p><ul><li>快速的安装和构建</li></ul><p>得益于 <code>pnpm</code> 的全局缓存和硬链接机制，在 <code>workspace</code> 中，即使是跨多个包的安装、构建等操作，<code>pnpm</code> 也能保持非常高的速度。对于初次安装来说，<code>pnpm</code> 会充分利用缓存，而对于后续安装，它会通过 <code>lockfile</code> 快速匹配并重用依赖。</p><ul><li>并行处理</li></ul></div><h2 id="处理-peerdependencies" tabindex="-1">处理 <code>peerDependencies</code> <a class="header-anchor" href="#处理-peerdependencies" aria-label="Permalink to &quot;处理 \`peerDependencies\`&quot;">​</a></h2><p><code>pnpm</code> 的最佳特征之一是，在一个项目中，<code>package</code> 的一个特定版本将始终只有一组依赖项。</p><div class="tip custom-block"><p class="custom-block-title">这个规则有一个例外</p><ul><li>那就是具有 <code>peer dependencies</code> 的 <code>package</code></li></ul></div><p><code>peer</code> 依赖项<code>（peer dependencies）</code>会从依赖图中更高的已安装的依赖项中解析<code>（resolve）</code>，因为它们与父级共享相同的版本。</p><p>这意味着，如果 <code>foo@1.0.0</code> 有两个 <code>peers</code> 依赖<code>（bar@^1 和 baz@^1）</code>，那么它可能在一个项目中有多个不同的依赖项集合。</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> foo</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">parent</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> bar@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> baz@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> foo@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> foo</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">parent</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> bar@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> baz@</span><span style="color:#F78C6C;">1.1</span><span style="color:#BABED8;">.0</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> foo@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在 👆 的示例中， <code>foo@1.0.0</code> 已安装在 <code>foo-parent-1</code> 和 <code>foo-parent-2</code> 中。</p><p>这两个包都有依赖包 <code>baz</code> 和 <code>bar</code>, 但是它们却依赖着不同版本的 <code>baz</code>。</p><p>因此，<code>foo@1.0.0</code> 有两组不同的依赖项：一组具有 <code>baz@1.0.0</code> ，另一组具有 <code>baz@1.1.0</code>。 若要支持这些用例，<code>pnpm</code> 必须有几组不同的依赖项，就去硬链接几次 <code>foo@1.0.0</code>。</p><p>通常，如果一个 <code>package</code> 没有 <code>peer</code> 依赖项<code>（peer dependencies）</code>，它会被硬链接到其依赖项的<code>软连接（symlinks）</code>旁的 <code>node_modules</code>，就像这样：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">node_modules</span></span>
<span class="line"><span style="color:#BABED8;">└── .</span><span style="color:#FFCB6B;">pnpm</span></span>
<span class="line"><span style="color:#BABED8;">    ├── foo@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span></span>
<span class="line"><span style="color:#BABED8;">    │   └── node_modules</span></span>
<span class="line"><span style="color:#BABED8;">    │       ├── foo</span></span>
<span class="line"><span style="color:#BABED8;">    │       ├── qux   </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">../../</span><span style="color:#BABED8;">qux@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">qux</span></span>
<span class="line"><span style="color:#BABED8;">    │       └── plugh </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">../../</span><span style="color:#BABED8;">plugh@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">plugh</span></span>
<span class="line"><span style="color:#BABED8;">    ├── qux@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span></span>
<span class="line"><span style="color:#BABED8;">    ├── plugh@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>但是，如果 <code>foo</code> 有 <code>peer</code> 依赖<code>（peer dependencies）</code>，那么它可能就会有多组依赖项，所以我们为不同的 <code>peer</code> 依赖项创建不同的解析：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">node_modules</span></span>
<span class="line"><span style="color:#BABED8;">└── .</span><span style="color:#FFCB6B;">pnpm</span></span>
<span class="line"><span style="color:#BABED8;">    ├── foo@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0_bar@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;">baz@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span></span>
<span class="line"><span style="color:#BABED8;">    │   └── node_modules</span></span>
<span class="line"><span style="color:#BABED8;">    │       ├── foo</span></span>
<span class="line"><span style="color:#BABED8;">    │       ├── bar   </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">../../</span><span style="color:#BABED8;">bar@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">bar</span></span>
<span class="line"><span style="color:#BABED8;">    │       ├── baz   </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">../../</span><span style="color:#BABED8;">baz@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">baz</span></span>
<span class="line"><span style="color:#BABED8;">    │       ├── qux   </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">../../</span><span style="color:#BABED8;">qux@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">qux</span></span>
<span class="line"><span style="color:#BABED8;">    │       └── plugh </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">../../</span><span style="color:#BABED8;">plugh@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">plugh</span></span>
<span class="line"><span style="color:#BABED8;">    ├── foo@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0_bar@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;">baz@</span><span style="color:#F78C6C;">1.1</span><span style="color:#BABED8;">.0</span></span>
<span class="line"><span style="color:#BABED8;">    │   └── node_modules</span></span>
<span class="line"><span style="color:#BABED8;">    │       ├── foo</span></span>
<span class="line"><span style="color:#BABED8;">    │       ├── bar   </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">../../</span><span style="color:#BABED8;">bar@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">bar</span></span>
<span class="line"><span style="color:#BABED8;">    │       ├── baz   </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">../../</span><span style="color:#BABED8;">baz@</span><span style="color:#F78C6C;">1.1</span><span style="color:#BABED8;">.0</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">baz</span></span>
<span class="line"><span style="color:#BABED8;">    │       ├── qux   </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">../../</span><span style="color:#BABED8;">qux@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">qux</span></span>
<span class="line"><span style="color:#BABED8;">    │       └── plugh </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">../../</span><span style="color:#BABED8;">plugh@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">plugh</span></span>
<span class="line"><span style="color:#BABED8;">    ├── bar@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span></span>
<span class="line"><span style="color:#BABED8;">    ├── baz@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span></span>
<span class="line"><span style="color:#BABED8;">    ├── baz@</span><span style="color:#F78C6C;">1.1</span><span style="color:#BABED8;">.0</span></span>
<span class="line"><span style="color:#BABED8;">    ├── qux@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span></span>
<span class="line"><span style="color:#BABED8;">    ├── plugh@</span><span style="color:#F78C6C;">1.0</span><span style="color:#BABED8;">.0</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>我们创建 <code>foo@1.0.0_bar@1.0.0+baz@1.0.0</code>或<code>foo@1.0.0_bar@1.0.0+baz@1.1.0</code>内到 <code>foo</code> 的软链接。 因此，<code>Node.js</code> 模块解析器将找到正确的 <code>peers</code>。</p><p>如果一个 <code>package</code> 没有 <code>peer</code> 依赖（<code>peer dependencies）</code>，不过它的依赖项有 <code>peer</code> 依赖，这些依赖会在更高的依赖图中解析, 则这个传递 <code>package</code> 便可在项目中有几组不同的依赖项。</p><h2 id="npmrc" tabindex="-1"><code>.npmrc</code> <a class="header-anchor" href="#npmrc" aria-label="Permalink to &quot;\`.npmrc\`&quot;">​</a></h2><p><code>pnpm</code>的配置文件</p><h3 id="依赖提升设置" tabindex="-1">依赖提升设置 <a class="header-anchor" href="#依赖提升设置" aria-label="Permalink to &quot;依赖提升设置&quot;">​</a></h3><p>依赖项都会被提升到 <code>node_modules/.pnpm/node_modules</code></p><h4 id="hoist" tabindex="-1"><code>hoist</code> <a class="header-anchor" href="#hoist" aria-label="Permalink to &quot;\`hoist\`&quot;">​</a></h4><p>当 <code>hoist</code> 为 <code>true</code> 时，所有依赖项都会被提升到 <code>node_modules/.pnpm/node_modules</code>。 这使得 <code>node_modules</code> 所有包都可以访问 未列出的依赖项。</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">hoist</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="hoist-pattern" tabindex="-1"><code>hoist-pattern</code> <a class="header-anchor" href="#hoist-pattern" aria-label="Permalink to &quot;\`hoist-pattern\`&quot;">​</a></h4><p>告诉 <code>pnpm</code> 哪些包应该被提升到 <code>node_modules/.pnpm/node_modules</code>。 默认情况下，所有包都被提升 —— 但是，如果您知道只有某些有缺陷的包具有幻影依赖，您可以使用此选项专门提升幻影依赖（推荐做法）。</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">hoist-pattern[]</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">=</span><span style="color:#BABED8;"> [*]</span></span>
<span class="line"><span style="color:#FFCB6B;">hoist-pattern[]</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">=</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;">*</span><span style="color:#C3E88D;">eslint</span><span style="color:#BABED8;">*</span></span>
<span class="line"><span style="color:#FFCB6B;">hoist-pattern[]</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">=</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;">*</span><span style="color:#C3E88D;">babel</span><span style="color:#BABED8;">*</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="public-hoist-pattern" tabindex="-1"><code>public-hoist-pattern</code> <a class="header-anchor" href="#public-hoist-pattern" aria-label="Permalink to &quot;\`public-hoist-pattern\`&quot;">​</a></h4><p>不同于 <code>hoist-pattern</code> 会把依赖提升到一个虚拟存储中的隐藏的模块目录中，<code>public-hoist-pattern</code> 将匹配的依赖提升至根模块目录中。 提升至根模块目录中意味着应用代码可以访问到幻影依赖，即使他们对解析策略做了不当的修改。</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">public-hoist-pattern[]</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">=</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*eslint*</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*prettier*</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="shamefully-hoist" tabindex="-1"><code>shamefully-hoist</code> <a class="header-anchor" href="#shamefully-hoist" aria-label="Permalink to &quot;\`shamefully-hoist\`&quot;">​</a></h4><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">shamefully-hoist</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># =</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">public-hoist-pattern[]</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">=</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;">*</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="peer-dependency-设置" tabindex="-1"><code>Peer Dependency</code> 设置 <a class="header-anchor" href="#peer-dependency-设置" aria-label="Permalink to &quot;\`Peer Dependency\` 设置&quot;">​</a></h3><p>针对 <code>Peer Dependency</code> 处理的设置</p><h4 id="auto-install-peers" tabindex="-1"><code>auto-install-peers</code> <a class="header-anchor" href="#auto-install-peers" aria-label="Permalink to &quot;\`auto-install-peers\`&quot;">​</a></h4><p>当值为 <code>true</code> 时，将自动安装任何缺少的非可选同级依赖关系。</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">auto-install-peers</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="支持-pnp" tabindex="-1">支持 PnP <a class="header-anchor" href="#支持-pnp" aria-label="Permalink to &quot;支持 PnP&quot;">​</a></h2><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">node-linker</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">pnp</span></span>
<span class="line"><span style="color:#BABED8;">symlink</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="info custom-block"><p class="custom-block-title">相关资料</p><ul><li><a href="https://pnpm.io/zh/" target="_blank" rel="noreferrer"><u>pnpm 官网</u></a></li></ul></div>`,100)]))}const D=n(e,[["render",o]]);export{y as __pageData,D as default};
