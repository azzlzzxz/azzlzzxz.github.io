import{_ as o,o as s,c,N as a}from"./chunks/framework.2f525601.js";const k=JSON.parse('{"title":"Docker","description":"","frontmatter":{},"headers":[],"relativePath":"capital/deploy/docker/base.md","lastUpdated":1729222717000}'),n={name:"capital/deploy/docker/base.md"};function l(p,e,r,d,t,i){return s(),c("div",null,e[0]||(e[0]=[a(`<h1 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-label="Permalink to &quot;Docker&quot;">​</a></h1><p><code>Docker</code> 是一个开源的应用容器引擎，让开发者打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 <code>Linux</code> 机器上，也可以实现虚拟化。</p><p><code>Docker</code> 容器是完全使用沙箱机制，相互之间不会有任何接口。更重要的是，容器性能开销极低。</p><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/docker.png" alt="docker"></p><h2 id="docker-的应用场景" tabindex="-1">Docker 的应用场景 <a class="header-anchor" href="#docker-的应用场景" aria-label="Permalink to &quot;Docker 的应用场景&quot;">​</a></h2><ul><li><p><code>Web</code> 应用的自动化打包和发布。</p></li><li><p>自动化测试和持续集成、发布。</p></li><li><p>在服务型环境中部署和调整数据库或其他的后台应用。</p></li><li><p>从头编译或者扩展现有的 <code>OpenShift</code> 或 <code>Cloud Foundry</code> 平台来搭建自己的 <code>PaaS</code> 环境。</p></li></ul><h2 id="docker-组件" tabindex="-1">Docker 组件 <a class="header-anchor" href="#docker-组件" aria-label="Permalink to &quot;Docker 组件&quot;">​</a></h2><ul><li><code> Docker Client：</code> <code>Docker </code> 客户端，通过命令行或者其他工具使用 <code>Docker API</code> 进行操作。</li><li><code> Docker Image：</code> <code>Docker </code> 镜像，用来打包应用程序及其依赖。</li><li><code> Docker Container：</code> <code>Docker </code> 容器，是 <code>Docker</code> 运行时环境中的一个进程，是应用运行的环境。</li><li><code> Docker Compose：</code> <code>Docker </code> 编排，用于定义和运行多容器 <code>Docker</code> 应用程序。</li><li><code> Docker File：</code> <code>Docker</code> 镜像构建文件，用来定义 <code>Docker</code> 镜像的内容。</li></ul><h2 id="通过-docker-destop-直观学习-docker" tabindex="-1">通过 Docker Destop 直观学习 Docker <a class="header-anchor" href="#通过-docker-destop-直观学习-docker" aria-label="Permalink to &quot;通过 Docker Destop 直观学习 Docker&quot;">​</a></h2><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/docker_desktop.jpg" alt="docker_desktop"></p><p><code>images</code> 是本地的所有镜像，<code>containers</code> 是镜像跑起来的容器。</p><p><code>docker desktop</code> <code>pull</code> 一个镜像试试看。</p><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/pull_nginx.png" alt="pull_nginx"></p><p>我们点击 <code>pull</code> 按钮，就相当于执行了 <code>docker pull</code></p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">nginx:latest</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/run_nginx.png" alt="run_nginx"></p><p>我们点击 <code>run</code> 按钮，填了个表单，就相当于执行了 <code>docker run</code></p><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/docker_run.png" alt="docker_run"></p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">run</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">nginx-test2</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">80</span><span style="color:#C3E88D;">:80</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">/tmp/aaa:/usr/share/nginx/html</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-e</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">KEY1=VALUE1</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">nginx:latest</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>-p</code> 是端口映射 <ul><li>端口：这个是宿主机的端口，比如你要访问宿主机的 80 端口，那你就要映射到容器的 80 端口，容器内跑的 <code>nginx</code> 服务是在 80 端口，你要把宿主机的某个端口映射到容器的 80 端口才可以访问。</li></ul></li><li><code>-v</code> 是指定数据卷挂载目录 <ul><li>数据卷 <code>volume</code>：这个是把宿主机某个目录挂到容器内。因为容器是镜像跑起来的，下次再用这个镜像跑的还是同样的容器，那你在容器内保存的数据就会消失。所以我们都是把某个宿主机目录，挂载到容器内的某个保存数据的目录，这样数据是保存在宿主机的，下次再用镜像跑一个新容器，只要把这个目录挂载上去就行。</li></ul></li><li><code>-e</code> 是指定环境变量</li><li><code>-d </code>是后台运行</li></ul><p>点击 run，可以看到容器内的 nginx 服务跑起来了。</p><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/run.png" alt="run"></p>`,22)]))}const D=o(n,[["render",l]]);export{k as __pageData,D as default};
