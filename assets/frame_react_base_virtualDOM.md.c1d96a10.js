import{_ as s,o as a,c as o,N as l}from"./chunks/framework.2f525601.js";const u=JSON.parse('{"title":"虚拟 DOM","description":"","frontmatter":{},"headers":[],"relativePath":"frame/react/base/virtualDOM.md","lastUpdated":1730785566000}'),c={name:"frame/react/base/virtualDOM.md"};function n(p,e,t,d,r,i){return a(),o("div",null,e[0]||(e[0]=[l(`<h1 id="虚拟-dom" tabindex="-1">虚拟 DOM <a class="header-anchor" href="#虚拟-dom" aria-label="Permalink to &quot;虚拟 DOM&quot;">​</a></h1><h2 id="什么是react的虚拟dom" tabindex="-1">什么是<code>React</code>的<code>虚拟DOM</code> <a class="header-anchor" href="#什么是react的虚拟dom" aria-label="Permalink to &quot;什么是\`React\`的\`虚拟DOM\`&quot;">​</a></h2><ul><li><p><code>React.createElement</code> 函数所返回的就是一个<code>虚拟 DOM</code></p></li><li><p><code>虚拟 DOM</code> 就是一个描述真实 <code>DOM</code> 的纯 <code>JS</code> 对象</p></li></ul><blockquote><p>举个 🌰</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> element </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> (</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    Hello, </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">style</span><span style="color:#89DDFF;">={{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">color</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">red</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}}&gt;</span><span style="color:#BABED8;">world</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">!</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(element)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><img src="https://steinsgate.oss-cn-hangzhou.aliyuncs.com/virtual_dom.jpg" alt="virtual_dom"></p><h2 id="为什么要有虚拟dom" tabindex="-1">为什么要有<code>虚拟DOM</code> <a class="header-anchor" href="#为什么要有虚拟dom" aria-label="Permalink to &quot;为什么要有\`虚拟DOM\`&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">前提</p><p><strong>没有任何框架可以比纯手动的优化 <code>DOM</code> 操作更快，因为框架的 <code>DOM</code> 操作层需要应对任何上层 <code>API</code> 可能产生的操作，它的实现必须是普适的。</strong></p></div><p>由浏览器的渲染流水线可知，<code>DOM</code>操作是一个昂贵的操作，它是一个很复杂的数据结构，因此产生了<code>虚拟DOM</code>。<code>虚拟DOM</code>是对<code>真实DOM</code>的映射，<code>React</code>通过新旧虚拟<code>DOM</code>对比，得到需要更新的部分，实现数据的增量更新。</p><ul><li>借助 <code>虚拟DOM</code>，带来了跨平台的能力，可以一套代码多端运行</li><li><code>虚拟DOM</code> 使得开发者能够更专注于应用的业务逻辑，而无需过多关注手动 <code>DOM</code> 操作</li><li>使用 <code>虚拟DOM</code>，能够有效避免真实 <code>DOM</code> 数频繁更新，减少多次引起重绘与回流，提高性能</li></ul><h2 id="虚拟-dom-的工作原理" tabindex="-1">虚拟 DOM 的工作原理 <a class="header-anchor" href="#虚拟-dom-的工作原理" aria-label="Permalink to &quot;虚拟 DOM 的工作原理&quot;">​</a></h2><ul><li><p><code>创建 虚拟DOM</code>：当应用初始化时或数据发生变化时，会创建或更新 <code>虚拟DOM</code></p></li><li><p><code>Diff 算法</code>：在生成新的 <code>虚拟DOM</code> 之后，会与之前的 <code>虚拟DOM</code>进行比较，找出两者之间的差异。这个过程称为 <code>Diff算法</code>，它能够高效地计算出需要更新的最小操作集合</p></li><li><p><code>更新原生 DOM</code>：通过 <code>Diff算法</code> 的结果，确定了哪些部分需要更新，然后将这些变化应用到<code>真实 DOM</code>上。这个阶段真正将变化应用到 <code>DOM</code> 上，通常使用最小的 <code>DOM</code> 操作来实现更新，从而减少了 <code>DOM</code> 操作的开销。</p></li></ul><div class="tip custom-block"><p class="custom-block-title"><code>DOM-DIFF</code></p><ul><li><p><code>React</code> 的 <code>DOM-DIFF</code> 原理解析 可以看这里</p><ul><li><p><a href="/rsource/react/singleNode-dom-diff"><u>单节点的 DOM-DIFF 🚀</u></a></p></li><li><p><a href="/rsource/react/multiNode-dom-diff"><u>多节点的 DOM-DIFF 🚀</u></a></p></li></ul></li></ul></div>`,13)]))}const m=s(c,[["render",n]]);export{u as __pageData,m as default};
